{"version":3,"file":"app.bundle.js","mappings":"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","sources":["webpack://Battleship/./src/js/Components/Board/main/view/board-style.css?229b","webpack://Battleship/./src/js/Components/Dialogs/GameOverDialog/game-over-dialog-styles.css?9b36","webpack://Battleship/./src/js/Components/Dialogs/SettingsDialog/view/settings-styles.css?cdf9","webpack://Battleship/./src/js/Components/Fleet/main/view/fleet-style.css?eceb","webpack://Battleship/./src/js/Components/Game/utility/ai-vs-ai-styles.css?3ede","webpack://Battleship/./src/js/Components/Grids/MainGrid/main/view/main-grid-styles.css?88a7","webpack://Battleship/./src/js/Components/Grids/TrackingGrid/main/view/tracking-grid-styles.css?b65a","webpack://Battleship/./src/js/Components/Ship/main/view/ship-styles.css?0cb2","webpack://Battleship/./src/styles/normalize.css?a628","webpack://Battleship/./src/styles/page-style.css?0ac5","webpack://Battleship/./src/styles/style.css?e274","webpack://Battleship/./node_modules/css-loader/dist/runtime/api.js","webpack://Battleship/./node_modules/css-loader/dist/runtime/sourceMaps.js","webpack://Battleship/./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js","webpack://Battleship/./node_modules/style-loader/dist/runtime/insertBySelector.js","webpack://Battleship/./node_modules/style-loader/dist/runtime/insertStyleElement.js","webpack://Battleship/./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js","webpack://Battleship/./node_modules/style-loader/dist/runtime/styleDomAPI.js","webpack://Battleship/./node_modules/style-loader/dist/runtime/styleTagTransform.js","webpack://Battleship/webpack/bootstrap","webpack://Battleship/webpack/runtime/compat get default export","webpack://Battleship/webpack/runtime/define property getters","webpack://Battleship/webpack/runtime/hasOwnProperty shorthand","webpack://Battleship/webpack/runtime/nonce","webpack://Battleship/./src/styles/normalize.css?36ae","webpack://Battleship/./src/styles/style.css?ecaf","webpack://Battleship/./src/styles/page-style.css?579d","webpack://Battleship/./src/js/Components/Game/GameStateController.js","webpack://Battleship/./src/js/Utility/constants/common.js","webpack://Battleship/./src/js/Utility/utils/stringUtils.js","webpack://Battleship/./src/js/Utility/utils/validationUtils.js","webpack://Battleship/./src/js/Utility/utils/coordinatesUtils.js","webpack://Battleship/./src/js/Utility/utils/arrayUtils.js","webpack://Battleship/./src/js/Utility/uiBuilderUtils/buildElementTree.js","webpack://Battleship/./src/js/Utility/constants/dom/elements.js","webpack://Battleship/./src/js/Utility/uiBuilderUtils/uiBuilders.js","webpack://Battleship/./src/js/Utility/constants/dom/attributes.js","webpack://Battleship/./src/js/Components/Ship/common/shipConstants.js","webpack://Battleship/./src/js/Components/Fleet/common/fleetConstants.js","webpack://Battleship/./src/js/Utility/constants/dom/domEvents.js","webpack://Battleship/./src/js/Components/Grids/common/gridConstants.js","webpack://Battleship/./src/js/Components/Grids/TrackingGrid/common/trackingGridConstants.js","webpack://Battleship/./src/js/Utility/uiBuilderUtils/gridBuilderUtils.js","webpack://Battleship/./src/js/Components/Grids/TrackingGrid/main/view/tracking-grid-styles.css?f6d7","webpack://Battleship/./src/js/Components/Grids/TrackingGrid/main/view/TrackingGridView.js","webpack://Battleship/./src/js/Components/Grids/TrackingGrid/main/view/buildTrackingGridUIObj.js","webpack://Battleship/./src/js/Components/AI/components/TrackingGrid/AITrackingGridView.js","webpack://Battleship/./src/js/Components/AI/AIView.js","webpack://Battleship/./src/js/Components/AI/components/Fleet/AIFleetView.js","webpack://Battleship/./src/js/Components/AI/components/Ship/AIShipView.js","webpack://Battleship/./src/js/Utility/dataStructures/Queue.js","webpack://Battleship/./src/js/Utility/utils/gridUtils.js","webpack://Battleship/./src/js/Components/AI/Managers/Combat/Strategies/IntermediateMoveStrategy.js","webpack://Battleship/./src/js/Utility/dataStructures/Dequeue.js","webpack://Battleship/./src/js/Components/AI/Managers/Combat/Strategies/AdvancedCore/Chain.js","webpack://Battleship/./src/js/Components/AI/Managers/Combat/Strategies/AdvancedCore/Managers/ChainManager.js","webpack://Battleship/./src/js/Components/AI/Managers/Combat/Strategies/AdvancedCore/Utils/Probability/ProbabilityMap.js","webpack://Battleship/./src/js/Components/AI/Managers/Combat/Strategies/AdvancedCore/Utils/Probability/Core/weightedCanShipFit.js","webpack://Battleship/./src/js/Components/AI/Managers/Combat/Strategies/AdvancedCore/Utils/Probability/Core/calculateAdjacencyScore.js","webpack://Battleship/./src/js/Components/AI/Managers/Combat/Strategies/AdvancedCore/Utils/initializers.js","webpack://Battleship/./src/js/Components/AI/Managers/Combat/Strategies/AdvancedCore/Managers/OpponentFleetManager.js","webpack://Battleship/./src/js/Components/AI/Managers/Combat/Strategies/AdvancedCore/Managers/HitsManager.js","webpack://Battleship/./src/js/Components/AI/Managers/Combat/Strategies/AdvancedCore/Utils/canShipFit.js","webpack://Battleship/./src/js/Components/AI/Managers/Combat/Strategies/AdvancedCore/processMoveResult.js","webpack://Battleship/./src/js/Components/AI/Managers/Combat/AiCombatManager.js","webpack://Battleship/./src/js/Components/AI/Managers/Combat/Strategies/AdvancedMoveStrategy.js","webpack://Battleship/./src/js/Components/AI/Managers/Combat/Strategies/AdvancedCore/MoveStrategy.js","webpack://Battleship/./src/js/Components/AI/AIController.js","webpack://Battleship/./src/js/Components/AI/components/MainGrid/AIMainGridModel.js","webpack://Battleship/./src/js/Components/AI/components/TrackingGrid/AITrackingGridModel.js","webpack://Battleship/./src/js/Components/AI/components/Fleet/AIFleetModel.js","webpack://Battleship/./src/js/Components/AI/components/Ship/AIShipModel.js","webpack://Battleship/./src/js/Components/AI/model/AIModel.js","webpack://Battleship/./src/js/Components/AI/model/AvailableMovesManager.js","webpack://Battleship/./src/js/Components/AI/Managers/Placement/PlacementCoordinatesGenerator.js","webpack://Battleship/./src/js/Components/Fleet/main/view/fleet-style.css?eac2","webpack://Battleship/./src/js/Utility/ManagerFactory.js","webpack://Battleship/./src/js/Components/Fleet/Managers/FleetPlacementManager.js","webpack://Battleship/./src/js/Components/Fleet/common/fleetEvents.js","webpack://Battleship/./src/js/Components/Fleet/Managers/FleetCombatManager.js","webpack://Battleship/./src/js/Events/core/EventEmitter.js","webpack://Battleship/./src/js/Events/management/EventHandler.js","webpack://Battleship/./src/js/Components/Fleet/FleetController.js","webpack://Battleship/./src/js/Components/Fleet/main/model/FleetModel.js","webpack://Battleship/./src/js/Components/Fleet/main/view/FleetView.js","webpack://Battleship/./src/js/Components/Fleet/main/view/buildFleetUIObj.js","webpack://Battleship/./src/js/Utility/constants/dom/baseStyles.js","webpack://Battleship/./src/js/Components/Ship/main/view/buildShipUIObj.js","webpack://Battleship/./src/js/Components/Ship/main/view/ship-styles.css?a6bf","webpack://Battleship/./src/js/Utility/uiBuilderUtils/ListenerManager.js","webpack://Battleship/./src/js/Components/Ship/Managers/SelectionAndPlacement/selection/ShipSelectionView.js","webpack://Battleship/./src/js/Components/Ship/Managers/SelectionAndPlacement/SelectionAndPlacementManager.js","webpack://Battleship/./src/js/Components/Ship/Managers/SelectionAndPlacement/selection/ShipSelectionController.js","webpack://Battleship/./src/js/Components/Ship/Managers/SelectionAndPlacement/placement/ShipPlacementController.js","webpack://Battleship/./src/js/Components/Ship/Managers/ShipCombatManager.js","webpack://Battleship/./src/js/Components/Ship/ShipController.js","webpack://Battleship/./src/js/Components/Ship/main/model/ShipModel.js","webpack://Battleship/./src/js/Components/Ship/main/view/ShipView.js","webpack://Battleship/./src/js/Components/Grids/MainGrid/common/mainGridConstants.js","webpack://Battleship/./src/js/Components/Grids/MainGrid/main/view/main-grid-styles.css?ecb6","webpack://Battleship/./src/js/Components/Grids/MainGrid/Managers/placement/core/PreviewManager.js","webpack://Battleship/./src/js/Components/Grids/MainGrid/Managers/placement/core/MainGridPlacementView.js","webpack://Battleship/./src/js/Components/Grids/MainGrid/Managers/placement/MainGridPlacementManager.js","webpack://Battleship/./src/js/Components/Grids/MainGrid/Managers/placement/core/MainGridPlacementController.js","webpack://Battleship/./src/js/Components/Grids/MainGrid/Managers/MainGridCombatManager.js","webpack://Battleship/./src/js/Components/Grids/MainGrid/MainGridController.js","webpack://Battleship/./src/js/Components/Grids/MainGrid/main/model/MainGridModel.js","webpack://Battleship/./src/js/Components/Grids/MainGrid/main/model/EntityPlacementManager.js","webpack://Battleship/./src/js/Components/Grids/MainGrid/main/view/MainGridView.js","webpack://Battleship/./src/js/Components/Grids/MainGrid/main/view/buildMainGridUIObj.js","webpack://Battleship/./src/js/Components/Grids/TrackingGrid/main/view/TrackingGridCombatView.js","webpack://Battleship/./src/js/Components/Grids/TrackingGrid/Managers/TrackingGridCombatManager.js","webpack://Battleship/./src/js/Components/Grids/TrackingGrid/TrackingGridController.js","webpack://Battleship/./src/js/Components/Game/utility/initializePlayer.js","webpack://Battleship/./src/js/Components/Player/PlayerModel.js","webpack://Battleship/./src/js/Components/Board/Managers/BoardPlacementManager.js","webpack://Battleship/./src/js/Components/Board/main/view/board-style.css?7e7f","webpack://Battleship/./src/js/Components/Board/main/view/boardViewUtility.js","webpack://Battleship/./src/js/Components/Board/BoardController.js","webpack://Battleship/./src/js/Components/Board/main/view/BoardView.js","webpack://Battleship/./src/js/Components/Board/main/view/BoardPlacementView.js","webpack://Battleship/./src/js/Components/Board/Managers/BoardCombatManager.js","webpack://Battleship/./src/js/Components/Game/utility/ai-vs-ai-styles.css?1055","webpack://Battleship/./src/js/Components/Game/utility/configurePlayerBoardControllers.js","webpack://Battleship/./src/js/Events/management/EventManager.js","webpack://Battleship/./src/js/Events/management/EventDefinitionManager.js","webpack://Battleship/./src/js/Components/Game/States/StartStateCoordinator.js","webpack://Battleship/./src/js/Components/Game/Managers/PlayerManager.js","webpack://Battleship/./src/js/Components/Game/Managers/TurnManager.js","webpack://Battleship/./src/js/Components/Dialogs/SettingsDialog/constants.js","webpack://Battleship/./src/js/Components/Dialogs/SettingsDialog/view/buildSettingsDialogElement.js","webpack://Battleship/./src/js/Components/Dialogs/SettingsDialog/view/initializeListenerManager.js","webpack://Battleship/./src/js/Components/Dialogs/SettingsDialog/view/settings-styles.css?371b","webpack://Battleship/./src/js/Components/Dialogs/SettingsDialog/SettingsDialogController.js","webpack://Battleship/./src/js/Components/Dialogs/SettingsDialog/SettingsDialogModel.js","webpack://Battleship/./src/js/Components/Dialogs/SettingsDialog/view/SettingsDialogView.js","webpack://Battleship/./src/js/Components/Dialogs/common/dialogClassConstants.js","webpack://Battleship/./src/js/Components/Dialogs/GameOverDialog/buildGameOverDialogElement.js","webpack://Battleship/./src/js/Components/Dialogs/GameOverDialog/game-over-dialog-styles.css?a1ab","webpack://Battleship/./src/js/Components/Dialogs/InstructionsDialog/utility/constants.js","webpack://Battleship/./src/js/Components/Dialogs/InstructionsDialog/utility/InstructionsManager.js","webpack://Battleship/./src/js/Components/Dialogs/InstructionsDialog/configurations/placementInstructionsConfig.js","webpack://Battleship/./src/js/Components/Dialogs/InstructionsDialog/configurations/combatInstructionsConfig.js","webpack://Battleship/./src/js/Components/Dialogs/InstructionsDialog/configurations/settingsInstructionsConfig.js","webpack://Battleship/./src/js/Components/Dialogs/InstructionsDialog/utility/initializeListenerManager.js","webpack://Battleship/./src/js/Components/Dialogs/InstructionsDialog/utility/buildInstructionsElements.js","webpack://Battleship/./src/js/Components/Dialogs/dialogsManager.js","webpack://Battleship/./src/js/Components/Dialogs/InstructionsDialog/InstructionsDialogView.js","webpack://Battleship/./src/js/Components/Dialogs/InstructionsDialog/utility/buildInstructionsDialogElement.js","webpack://Battleship/./src/js/Components/Dialogs/GameOverDialog/GameOverDialogView.js","webpack://Battleship/./src/js/Components/Dialogs/AlternatePlayersDialog/AlternatePlayerDialogView.js","webpack://Battleship/./src/js/Components/Dialogs/AlternatePlayersDialog/buildAlternatePlayerDialogElement.js","webpack://Battleship/./src/js/Components/Game/GameCoordinator.js","webpack://Battleship/./src/js/Components/Game/States/PlacementStateCoordinator.js","webpack://Battleship/./src/js/Components/Game/States/CombatStateCoordinator.js","webpack://Battleship/./src/js/Components/Game/Managers/CombatManager.js"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `// extracted by mini-css-extract-plugin\nexport {};`, \"\",{\"version\":3,\"sources\":[\"webpack://./src/js/Components/Board/main/view/board-style.css\"],\"names\":[],\"mappings\":\"AAAA;QACQ,CAAA\",\"sourcesContent\":[\"// extracted by mini-css-extract-plugin\\nexport {};\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `// extracted by mini-css-extract-plugin\nexport {};`, \"\",{\"version\":3,\"sources\":[\"webpack://./src/js/Components/Dialogs/GameOverDialog/game-over-dialog-styles.css\"],\"names\":[],\"mappings\":\"AAAA;QACQ,CAAA\",\"sourcesContent\":[\"// extracted by mini-css-extract-plugin\\nexport {};\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `// extracted by mini-css-extract-plugin\nexport {};`, \"\",{\"version\":3,\"sources\":[\"webpack://./src/js/Components/Dialogs/SettingsDialog/view/settings-styles.css\"],\"names\":[],\"mappings\":\"AAAA;QACQ,CAAA\",\"sourcesContent\":[\"// extracted by mini-css-extract-plugin\\nexport {};\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `// extracted by mini-css-extract-plugin\nexport {};`, \"\",{\"version\":3,\"sources\":[\"webpack://./src/js/Components/Fleet/main/view/fleet-style.css\"],\"names\":[],\"mappings\":\"AAAA;QACQ,CAAA\",\"sourcesContent\":[\"// extracted by mini-css-extract-plugin\\nexport {};\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `// extracted by mini-css-extract-plugin\nexport {};`, \"\",{\"version\":3,\"sources\":[\"webpack://./src/js/Components/Game/utility/ai-vs-ai-styles.css\"],\"names\":[],\"mappings\":\"AAAA;QACQ,CAAA\",\"sourcesContent\":[\"// extracted by mini-css-extract-plugin\\nexport {};\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `// extracted by mini-css-extract-plugin\nexport {};`, \"\",{\"version\":3,\"sources\":[\"webpack://./src/js/Components/Grids/MainGrid/main/view/main-grid-styles.css\"],\"names\":[],\"mappings\":\"AAAA;QACQ,CAAA\",\"sourcesContent\":[\"// extracted by mini-css-extract-plugin\\nexport {};\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `// extracted by mini-css-extract-plugin\nexport {};`, \"\",{\"version\":3,\"sources\":[\"webpack://./src/js/Components/Grids/TrackingGrid/main/view/tracking-grid-styles.css\"],\"names\":[],\"mappings\":\"AAAA;QACQ,CAAA\",\"sourcesContent\":[\"// extracted by mini-css-extract-plugin\\nexport {};\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `// extracted by mini-css-extract-plugin\nexport {};`, \"\",{\"version\":3,\"sources\":[\"webpack://./src/js/Components/Ship/main/view/ship-styles.css\"],\"names\":[],\"mappings\":\"AAAA;QACQ,CAAA\",\"sourcesContent\":[\"// extracted by mini-css-extract-plugin\\nexport {};\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `// extracted by mini-css-extract-plugin\nexport {};`, \"\",{\"version\":3,\"sources\":[\"webpack://./src/styles/normalize.css\"],\"names\":[],\"mappings\":\"AAAA;QACQ,CAAA\",\"sourcesContent\":[\"// extracted by mini-css-extract-plugin\\nexport {};\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `// extracted by mini-css-extract-plugin\nexport {};`, \"\",{\"version\":3,\"sources\":[\"webpack://./src/styles/page-style.css\"],\"names\":[],\"mappings\":\"AAAA;QACQ,CAAA\",\"sourcesContent\":[\"// extracted by mini-css-extract-plugin\\nexport {};\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `// extracted by mini-css-extract-plugin\nexport {};`, \"\",{\"version\":3,\"sources\":[\"webpack://./src/styles/style.css\"],\"names\":[],\"mappings\":\"AAAA;QACQ,CAAA\",\"sourcesContent\":[\"// extracted by mini-css-extract-plugin\\nexport {};\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","\"use strict\";\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = \"\";\n      var needLayer = typeof item[5] !== \"undefined\";\n      if (item[4]) {\n        content += \"@supports (\".concat(item[4], \") {\");\n      }\n      if (item[2]) {\n        content += \"@media \".concat(item[2], \" {\");\n      }\n      if (needLayer) {\n        content += \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += \"}\";\n      }\n      if (item[2]) {\n        content += \"}\";\n      }\n      if (item[4]) {\n        content += \"}\";\n      }\n      return content;\n    }).join(\"\");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === \"string\") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== \"undefined\") {\n        if (typeof item[5] === \"undefined\") {\n          item[5] = layer;\n        } else {\n          item[1] = \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\").concat(item[1], \"}\");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = \"@media \".concat(item[2], \" {\").concat(item[1], \"}\");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = \"\".concat(supports);\n        } else {\n          item[1] = \"@supports (\".concat(item[4], \") {\").concat(item[1], \"}\");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};","\"use strict\";\n\nmodule.exports = function (item) {\n  var content = item[1];\n  var cssMapping = item[3];\n  if (!cssMapping) {\n    return content;\n  }\n  if (typeof btoa === \"function\") {\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n    var sourceMapping = \"/*# \".concat(data, \" */\");\n    return [content].concat([sourceMapping]).join(\"\\n\");\n  }\n  return [content].join(\"\\n\");\n};","\"use strict\";\n\nvar stylesInDOM = [];\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n    identifiers.push(identifier);\n  }\n  return identifiers;\n}\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n  return updater;\n}\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n    var newLastIdentifiers = modulesToDom(newList, options);\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n      var _index = getIndexByIdentifier(_identifier);\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n    lastIdentifiers = newLastIdentifiers;\n  };\n};","\"use strict\";\n\nvar memo = {};\n\n/* istanbul ignore next  */\nfunction getTarget(target) {\n  if (typeof memo[target] === \"undefined\") {\n    var styleTarget = document.querySelector(target);\n\n    // Special case to return head of iframe instead of iframe itself\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n    memo[target] = styleTarget;\n  }\n  return memo[target];\n}\n\n/* istanbul ignore next  */\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n  if (!target) {\n    throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n  }\n  target.appendChild(style);\n}\nmodule.exports = insertBySelector;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement(\"style\");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\nmodule.exports = insertStyleElement;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce = typeof __webpack_nonce__ !== \"undefined\" ? __webpack_nonce__ : null;\n  if (nonce) {\n    styleElement.setAttribute(\"nonce\", nonce);\n  }\n}\nmodule.exports = setAttributesWithoutAttributes;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = \"\";\n  if (obj.supports) {\n    css += \"@supports (\".concat(obj.supports, \") {\");\n  }\n  if (obj.media) {\n    css += \"@media \".concat(obj.media, \" {\");\n  }\n  var needLayer = typeof obj.layer !== \"undefined\";\n  if (needLayer) {\n    css += \"@layer\".concat(obj.layer.length > 0 ? \" \".concat(obj.layer) : \"\", \" {\");\n  }\n  css += obj.css;\n  if (needLayer) {\n    css += \"}\";\n  }\n  if (obj.media) {\n    css += \"}\";\n  }\n  if (obj.supports) {\n    css += \"}\";\n  }\n  var sourceMap = obj.sourceMap;\n  if (sourceMap && typeof btoa !== \"undefined\") {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  }\n\n  // For old IE\n  /* istanbul ignore if  */\n  options.styleTagTransform(css, styleElement, options.options);\n}\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n  styleElement.parentNode.removeChild(styleElement);\n}\n\n/* istanbul ignore next  */\nfunction domAPI(options) {\n  if (typeof document === \"undefined\") {\n    return {\n      update: function update() {},\n      remove: function remove() {}\n    };\n  }\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\nmodule.exports = domAPI;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\nmodule.exports = styleTagTransform;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.nc = undefined;","\n      import API from \"!../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../node_modules/css-loader/dist/cjs.js!../../node_modules/mini-css-extract-plugin/dist/loader.js!../../node_modules/css-loader/dist/cjs.js!./normalize.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../node_modules/css-loader/dist/cjs.js!../../node_modules/mini-css-extract-plugin/dist/loader.js!../../node_modules/css-loader/dist/cjs.js!./normalize.css\";\n       export default content && content.locals ? content.locals : undefined;\n","\n      import API from \"!../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../node_modules/css-loader/dist/cjs.js!../../node_modules/mini-css-extract-plugin/dist/loader.js!../../node_modules/css-loader/dist/cjs.js!./style.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../node_modules/css-loader/dist/cjs.js!../../node_modules/mini-css-extract-plugin/dist/loader.js!../../node_modules/css-loader/dist/cjs.js!./style.css\";\n       export default content && content.locals ? content.locals : undefined;\n","\n      import API from \"!../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../node_modules/css-loader/dist/cjs.js!../../node_modules/mini-css-extract-plugin/dist/loader.js!../../node_modules/css-loader/dist/cjs.js!./page-style.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../node_modules/css-loader/dist/cjs.js!../../node_modules/mini-css-extract-plugin/dist/loader.js!../../node_modules/css-loader/dist/cjs.js!./page-style.css\";\n       export default content && content.locals ? content.locals : undefined;\n","const FN_TYPES = {\n  ENTER: 'onEnter',\n  EXIT: 'onExit'\n};\n\n/**\n * Controls game state transitions and event triggers.\n *\n * @param {string[]} initialStates Optional array of initial state names to add on creation.\n * @returns {Object} An interface for adding states, managing transitions, and handling entry/exit events.\n */\nexport const GameStateController = (initialStates = []) => {\n  const states = { current: null };\n\n  const addState = (stateName) => (states[stateName] = { onEnter: [], onExit: [] });\n\n  const setCurrentState = (state) => {\n    states.current = state;\n    executeCurrentEnter();\n  };\n\n  const startGame = (firstState) => {\n    if (states.current) executeCurrentExit();\n    setCurrentState(firstState);\n  };\n\n  const execute = (callbacks) => callbacks.forEach((fn) => fn());\n  const executeCurrentExit = () => execute(states[states.current][FN_TYPES.EXIT]);\n  const executeCurrentEnter = () => execute(states[states.current][FN_TYPES.ENTER]);\n\n  const transitionTo = (newState) => {\n    executeCurrentExit();\n    setCurrentState(newState);\n  };\n\n  const exitCurrent = () => {\n    executeCurrentExit();\n    states.current = null;\n  };\n\n  if (initialStates.length > 0) initialStates.forEach((state) => addState(state));\n\n  return {\n    addState,\n    onEnter: (state, callback) => states[state][FN_TYPES.ENTER].push(callback),\n    onExit: (state, callback) => states[state][FN_TYPES.EXIT].push(callback),\n    startGame,\n    transitionTo,\n    exitCurrent\n  };\n};\n","export const PLAYERS = {\n  IDS: {\n    P1: 'playerOne',\n    P2: 'playerTwo'\n  },\n  TYPES: {\n    HUMAN: 'human',\n    AI: 'ai'\n  },\n  DEFAULT_NAME: 'Mutinous' // Mutinous: (of a solider or sailor) refusing to obey the orders of a person in authority.\n};\n\nexport const DEFAULT_FLEET = [\n  { name: 'Carrier', length: 5 },\n  { name: 'Battleship', length: 4 },\n  { name: 'Destroyer', length: 3 },\n  { name: 'Submarine', length: 3 },\n  { name: 'Patrol Boat', length: 2 }\n];\n\nexport const STATES = {\n  START: 'startState',\n  PLACEMENT: 'placementState',\n  PROGRESS: 'progressState',\n  OVER: 'overState'\n};\n\n// Represents grid cell status and attack outcomes.\nexport const STATUSES = {\n  MISS: 'miss',\n  HIT: 'hit',\n  SHIP_SUNK: 'ship_sunk',\n  ALL_SHIPS_SUNK: 'all_ships_sunk',\n  UNEXPLORED: 'unexplored',\n  OCCUPIED: 'occupied',\n  EMPTY: 'empty'\n};\n\n// Grid traversal in vertical and horizontal orientations.\nexport const DIRECTIONS = {\n  UP: [-1, 0],\n  RIGHT: [0, 1],\n  DOWN: [1, 0],\n  LEFT: [0, -1]\n};\n\n// Valid ship orientations\nexport const ORIENTATIONS = {\n  VERTICAL: 'vertical',\n  HORIZONTAL: 'horizontal'\n};\n\n// Defines which grid axis is labeled with letters.\n// Common for use with coordinate conversions, grid configuration, etc.\nexport const LETTER_AXES = {\n  COL: 'col',\n  ROW: 'row'\n};\n\nexport const GAME_MODES = {\n  HvH: 'HvH', // human vs human\n  HvA: 'HvA', // human vs ai\n  AvA: 'AvA' // ai vs ai\n};\n\nexport const AI_NAMES = [\n  'Seaman Bumbling BitBarnacle',\n  'Captain CodeSmells',\n  'Fleet Admiral ByteBeard'\n];\n","/*\n  Reference: Slug refers to a URL-friendly representation of a string,\n  originating from printing and publishing where it denoted a piece of\n  type metal used for spacing between lines of text to ensure proper alignment.\n*/\n/**\n * Creates a URL-friendly representation of a string.\n *\n * @param {string} text Text to convert.\n * @returns {string | null} Converted text.\n *\n */\nconst createSlug = (text) => {\n  const clean = cleanText(text);\n  return clean ? clean.toLowerCase().replaceAll(/ /g, '-') : null;\n};\n\n/**\n * Removes redundant spaces from text.\n *\n * @param {string} text Text to clean.\n * @returns {string} Cleaned text.\n */\nconst cleanText = (text) => {\n  let clean = `${text}`;\n  clean = clean.replace(/\\s+/g, ' ');\n  return clean.trim();\n};\n\nconst A_CHARACTER_CODE = 65;\n\n/**\n * Converts a numerical index to its corresponding alphabet letter (starting from 'A').\n *\n * @param {number} num The numerical index to convert.\n * @return {string} The corresponding alphabet letter.\n */\nconst convertIndexToLetter = (index) => String.fromCharCode(A_CHARACTER_CODE + index);\n/**\n * Converts a character string to its corresponding index value.\n *\n * @param {string} num The character string to convert.\n * @return {num} The corresponding index number.\n */\nconst convertLetterToIndex = (letter) => letter.charCodeAt() - A_CHARACTER_CODE;\n\nexport { cleanText, createSlug, convertIndexToLetter, convertLetterToIndex };\n","import { DIRECTIONS } from '../constants/common';\n/**\n * @module inputValidators\n * Provides input validation and testing functions for commonly passed parameter values, allowing\n * centralized and consistent argument validation across the application.\n *\n * Functions validate/test:\n *  - Coordinates: Ensures pairs or arrays of pairs are valid [row, col] formats.\n *  - Directions: Validates direction strings or vectors against known valid directions.\n *  - Grids: Confirms grids are valid 2-dimensional arrays with consistent row lengths.\n */\n\n/**\n * Tests if the input is a valid array of coordinate pairs.\n *\n * @param {number[] | array[number[]]} coordinates Array of coordinate pairs to validate.\n * @returns {boolean} True if all coordinate pairs are valid, false otherwise.\n */\nconst areCoordinatePairs = (pairs) =>\n  pairs.every((coordinates) => Array.isArray(coordinates) && isCoordinatePair(coordinates));\n\n/**\n * Tests if input is a valid coordinate pair containing two numbers.\n *\n * @param {number[]} coordinates A single pair of coordinates.\n * @returns {boolean} True if valid coordinate pair, false otherwise.\n */\nconst isCoordinatePair = (coordinates) =>\n  Array.isArray(coordinates) &&\n  coordinates.length === 2 &&\n  coordinates.every((coordinate) => typeof coordinate === 'number');\n\n/**\n * Tests if the input is a valid direction in string or vector format.\n * Each direction vector should be a coordinate pair containing a 0 and +-1.\n *\n * @param {string|number[]} direction String or vector representation of direction.\n * @returns {boolean} True if defined direction, false otherwise.\n */\n\nconst isValidDirection = (direction) => {\n  if (typeof direction === 'string') {\n    const upperCaseDirection = direction.toUpperCase();\n    return (\n      upperCaseDirection === 'UP' ||\n      upperCaseDirection === 'DOWN' ||\n      upperCaseDirection === 'RIGHT' ||\n      upperCaseDirection === 'LEFT'\n    );\n  }\n  if (Array.isArray(direction) && direction.length === 2) {\n    return Object.values(DIRECTIONS).some(\n      (validDirection) => direction[0] === validDirection[0] && direction[1] === validDirection[1]\n    );\n  }\n  return false;\n};\n\n/**\n * Tests if the input is a 2 dimensional grid array.\n *\n * @param {array[array[]]} grid - Nested array (2 levels) representing grid rows and columns grid[row][col].\n * @returns {boolean} True if valid, false otherwise.\n */\nconst isValidGrid = (grid) => {\n  const allRowsAreEqual = () => grid.every((row) => row.length === grid[0].length);\n  return (\n    grid ||\n    Array.isArray(grid) ||\n    grid.length <= 0 ||\n    Array.isArray(grid[0]) ||\n    grid[0].length <= 0 ||\n    allRowsAreEqual()\n  );\n};\n\n/**\n * Validates that the input is a valid coordinate pair or an array of coordinate pairs.\n * @param {number[] | array[number[]]} coordinates A single coordinate pair or an array of coordinate pairs to validate.\n * @throws {Error} Throws an error if any coordinate pair is invalid.\n * @returns {void}\n */\nconst validateCoordinates = (coordinates) => {\n  if (Array.isArray(coordinates[0])) {\n    if (!areCoordinatePairs(coordinates)) {\n      throw new Error(\n        `Invalid Coordinates In ${JSON.stringify(coordinates)}. Expected format: [[number, number]]`\n      );\n    }\n  } else {\n    if (!isCoordinatePair(coordinates)) {\n      throw new Error(\n        `Invalid Coordinate Pair: ${JSON.stringify(coordinates)}. Expected format: [number, number]`\n      );\n    }\n  }\n};\n\n/**\n * Validates that the input is a valid direction in string or vector format.\n * Each direction vector should be a coordinate pair containing a 0 and +-1.\n *\n * @param {string|number[]} direction String or vector representation of direction.\n * @throws {Error} Throws an error if direction is not defined.\n * @returns {void}\n */\n\nconst validateDirection = (direction) => {\n  if (!isValidDirection(direction)) throw new Error(`Invalid direction: ${direction}`);\n};\n\n/**\n * Validates that the input is a 2 dimensional grid array.\n *\n * @param {array[array[]]} grid - Nested array (2 levels) representing grid rows and columns grid[row][col].\n * @throws {Error} Throws an error if the grid is not a valid 2D array.\n * @returns {void}\n */\nconst validateGrid = (grid) => {\n  if (!isValidGrid) throw new Error(`Invalid grid: ${JSON.stringify(grid)}`);\n};\n\nexport {\n  isCoordinatePair,\n  areCoordinatePairs,\n  isValidDirection,\n  isValidGrid,\n  validateCoordinates,\n  validateDirection,\n  validateGrid\n};\n","import { convertIndexToLetter, convertLetterToIndex } from './stringUtils';\nimport { LETTER_AXES, DIRECTIONS, ORIENTATIONS } from '../constants/common';\nimport { areCoordinatePairs, validateCoordinates } from './validationUtils';\n/**\n * @module coordinatesHelpers\n * Provides utility functions for AI with 2D grid coordinate pairs in spatial analysis and navigation.\n * Allows operations such as orientation processing, direction determination, and vector arithmetic within a Cartesian coordinate system.\n *\n * Features include:\n * - Converting coordinates to internal and display format. Examples:\n *    - 'A0' => [0, 0] (Letter labels column)\n *    - '0A' => [0, 0] (Letter labels row)\n *    - [5, 2] => 'C5' or '5C' depending on axis labeled with letters\n * - Calculating directional vectors and deltas between coordinates.\n * - Determining if coordinates are adjacent and in the correct orientation.\n * - Converting orientation strings to directional vectors for easy manipulation.\n *\n * Coordinates are represented as arrays of two integers [x, y], assuming a zero-indexed grid where (0, 0) is the top-left corner.\n */\n\n/**\n * Converts a string representation of display-formatted coordinates to an array of integers for internal use.\n * The function is flexible to input format, supporting letter-first (e.g., \"A1\") or number-first (e.g., \"1A\") conventions.\n *\n * @param {string} coordinate String representation of coordinates. Eg: \"E5\", \"A2\", \"2B\", etc.\n * @returns {number[]} Coordinate pair as numbers [row, column] for internal processing.\n * @throws {Error} If the coordinate format is invalid or cannot be parsed.\n * @example\n * Returns [4, 5] for letter labeling columns\n * convertToInternalFormat(\"E5\");\n * @example\n * Returns [1, 0] for letter labeling rows\n * convertToInternalFormat(\"1A\");\n */\nconst convertToInternalFormat = (coordinatesString) => {\n  const letterPart = coordinatesString.match(/([A-Za-z]+)/)[0]?.toUpperCase();\n  const numberPart = +coordinatesString.match(/\\d+/)[0];\n  if (!letterPart || isNaN(numberPart)) throw new Error('Invalid coordinate format.');\n  const row = isNaN(coordinatesString[0]) ? convertLetterToIndex(letterPart) : numberPart;\n  const col = isNaN(coordinatesString[0]) ? numberPart : convertLetterToIndex(letterPart);\n  return [row, col];\n};\n\n/**\n * Converts internally formatted coordinates [row, column] to their corresponding display format,\n * accommodating flexible labeling of either axis with letters.\n *\n * @param {number} row Number representation of the row index.\n * @param {number} col Number representation of the column index.\n * @param {boolean} isLetterRow Flag indicating whether the row (true) or column (false) is labeled with a letter in the output.\n * @returns {string} String representation of coordinates, formatted based on the specified axis labeling.\n * @example\n * Returns \"A0\" when the column is labeled with letters\n * convertToDisplayFormat(0, 0, false);\n * @example\n * Returns \"0A\" when the row is labeled with letters\n * convertToDisplayFormat(0, 0, true);\n */\nconst convertToDisplayFormat = (row, col, letterAxis) => {\n  const isLetterRow = letterAxis === LETTER_AXES.ROW;\n  const letterPart = convertIndexToLetter(isLetterRow ? row : col);\n  const numberPart = isLetterRow ? col : row;\n  return isLetterRow ? `${letterPart}${numberPart}` : `${numberPart}${letterPart}`;\n};\n\n// Checks if two coordinate pairs are equal (x0 = x1 and y0 = y1)\nconst areCoordinatesEqual = (c1, c2) => c1[0] === c2[0] && c1[1] === c2[1];\n\n// Cleans orientation string input for ease of use\nconst normalizeOrientationString = (orientationString) => orientationString?.toLowerCase().trim();\n\n// Returns the difference between two coordinates as absolute, single step values.\nconst getAbsoluteDeltaVector = (coordinatesOne, coordinatesTwo) => {\n  const deltaVector = getDelta(coordinatesOne, coordinatesTwo, true);\n  return [Math.abs(deltaVector[0]), Math.abs(deltaVector[1])];\n};\n\n// Checks if two sets of coordinates are aligned diagonally.\nconst isDiagonal = (coordinatesOne, coordinatesTwo) => {\n  const vector = getAbsoluteDeltaVector(coordinatesOne, coordinatesTwo);\n  return vector[0] === 1 && vector[1] === 1;\n};\n\n/**\n * Checks if two sets of coordinates are aligned in the horizontal orientation.\n *\n * @param {number[]} coordinatesOne Coordinates to compare.\n * @param {number[]} coordinatesTwo Coordinates to compare.\n * @returns {boolean} True if given coordinates are horizontally aligned, false otherwise.\n */\nconst isHorizontal = (coordinatesOne, coordinatesTwo) =>\n  !isDiagonal(coordinatesOne, coordinatesTwo) && coordinatesOne[0] === coordinatesTwo[0];\n\n/**\n * Checks if two sets of coordinates are aligned in the vertical orientation.\n *\n * @param {number[]} coordinatesOne Coordinates to compare.\n * @param {number[]} coordinatesTwo Coordinates to compare.\n * @returns {boolean} True if given coordinates are vertically aligned, false otherwise.\n */\nconst isVertical = (coordinatesOne, coordinatesTwo) =>\n  !isDiagonal(coordinatesOne, coordinatesTwo) && coordinatesOne[1] === coordinatesTwo[1];\n\n/**\n * Tests if given vector is a single step in the horizontal or vertical orientation.\n *\n * @param {number[]} testVector Vector to test.\n * @returns {boolean} True if vector is a single step, false otherwise.\n */\nconst isSingleStepVector = (testVector) => {\n  const vector = [Math.abs(testVector[0]), Math.abs(testVector[1])];\n  return (vector[0] === 1 && vector[1] === 0) || (vector[0] === 0 && vector[1] === 1);\n};\n\n/**\n * Calculates the sum of two coordinates.\n *\n * @param {number[]} coordinatesOne Coordinate pair to sum.\n * @param {number[]} coordinatesTwo Coordinate pair to sum.\n * @returns {number[]} The sum of the two coordinates.\n * @throws {Error} If coordinate pairs are not arrays containing numbers.\n */\nconst sumCoordinates = (coordinatesOne, coordinatesTwo) => {\n  if (!areCoordinatePairs([coordinatesOne, coordinatesTwo])) return undefined;\n  const dx = coordinatesOne[0] + coordinatesTwo[0];\n  const dy = coordinatesOne[1] + coordinatesTwo[1];\n  const result = [dx, dy];\n  return result;\n};\n\n/**\n * Provides the direction vectors in correlation to the provided orientation.\n *\n * @param {string} orientation String representation of the orientation.\n * @returns {object} Contains the name of the direction as keys and array vectors as values.\n * @throws {Error} If coordinate pairs are not arrays containing numbers.\n * @example Given 'vertical' returns { up: [-1,0], down: [1,0] }\n */\nconst getOrientationDirections = (orientation) => {\n  const cleanOrientation = normalizeOrientationString(orientation);\n  if (\n    !(cleanOrientation === ORIENTATIONS.VERTICAL || cleanOrientation === ORIENTATIONS.HORIZONTAL)\n  ) {\n    throw new Error(`Invalid Orientation: ${cleanOrientation}`);\n  }\n  if (cleanOrientation === ORIENTATIONS.VERTICAL)\n    return { up: DIRECTIONS.UP, down: DIRECTIONS.DOWN };\n  else return { left: DIRECTIONS.LEFT, right: DIRECTIONS.RIGHT };\n};\n\n/**\n * Calculates the difference between two coordinates.\n *\n * @param {number[]} prev Coordinate previous to the next pair.\n * @param {number[]} next Coordinate after the previous pair.\n * @param {boolean} forceSingleStep Enforces a single step delta is returned [+-1, 0], [0,+-1].\n * @returns {number[]} The difference of the two coordinates.\n * @throws {Error} If coordinate pairs are not arrays containing numbers.\n */\nconst getDelta = (prev, next, forceSingleStep = false) => {\n  if (!areCoordinatePairs([prev, next])) return undefined;\n  const toSingleStepVector = (coordinate) =>\n    coordinate === 0 ? 0 : coordinate / Math.abs(coordinate);\n  const dx = next[0] - prev[0];\n  const dy = next[1] - prev[1];\n  return forceSingleStep ? [toSingleStepVector(dx), toSingleStepVector(dy)] : [dx, dy];\n};\n\n/**\n * Provides the two adjacent coordinate pairs perpendicular to the given origin coordinates.\n *\n * @param {number[]} origin The origin cell to get adjacent cells around.\n * @param {string} orientation Orientation to get perpendicular directions for.\n * @returns {array[number[]]} The coordinates perpendicular to the origin's orientation.\n * @throws {Error} If coordinate pairs are not arrays containing numbers or orientation is not recognized.\n * @example Given [1,1] and 'vertical', returns [[1,0],[1,2]]\n */\nconst getPerpendicularCoordinates = (origin, orientation) => {\n  const cleanOrientation = normalizeOrientationString(orientation);\n  if (cleanOrientation === ORIENTATIONS.VERTICAL) {\n    const { left, right } = getOrientationDirections(ORIENTATIONS.HORIZONTAL);\n    return [sumCoordinates(origin, left), sumCoordinates(origin, right)];\n  } else if (cleanOrientation === ORIENTATIONS.HORIZONTAL) {\n    const { up, down } = getOrientationDirections(ORIENTATIONS.VERTICAL);\n    return [sumCoordinates(origin, up), sumCoordinates(origin, down)];\n  } else throw new Error(`Invalid orientation: ${orientation}`);\n};\n\n/**\n * Checks if two coordinates are vertically or horizontally adjacent.\n *\n * @param {number[]} coordinatesOne Coordinate pair to test.\n * @param {number[]} coordinatesTwo Coordinate pair to test.\n * @returns {boolean} True if coordinates are adjacent, false otherwise.\n * @throws {Error} If coordinate pairs are not arrays containing numbers.\n */\nconst isAdjacent = (coordinatesOne, coordinatesTwo) => {\n  if (!areCoordinatePairs([coordinatesOne, coordinatesTwo])) return undefined;\n  const deltaVector = getDelta(coordinatesOne, coordinatesTwo, false);\n  return isSingleStepVector(deltaVector);\n};\n\n/**\n * Returns the orientation relative to two coordinates.\n *\n * @param {number[]} coordinatesOne First coordinate.\n * @param {number[]} coordinatesTwo Second coordinate.\n * @returns {string} Orientation relative to the two coordinates.\n * @throws {Error} If coordinate pairs are not arrays containing numbers.\n */\nconst getRelativeOrientation = (coordinatesOne, coordinatesTwo, adjacent = true) => {\n  if (!areCoordinatePairs([coordinatesOne, coordinatesTwo])) return undefined;\n  const deltaVector = getDelta(coordinatesOne, coordinatesTwo, adjacent !== true);\n  if (!isSingleStepVector(deltaVector)) return null;\n  return coordinatesOne[0] === coordinatesTwo[0] ? ORIENTATIONS.HORIZONTAL : ORIENTATIONS.VERTICAL;\n};\n\n/**\n * Checks if two coordinate pairs are in the same orientation.\n *\n * @param {string} orientation String representing the orientation ('vertical','horizontal').\n * @param {number[]} coordinatesOne Coordinate pair to test.\n * @param {number[]} coordinatesTwo Coordinate pair to test.\n * @returns {boolean} True if coordinate pairs are in the same orientation, false otherwise.\n * @throws {Error} If coordinate pairs are not arrays containing numbers.\n */\nconst doCoordinatesMatchOrientation = (orientation, coordinatesOne, coordinatesTwo) => {\n  if (!areCoordinatePairs([coordinatesOne, coordinatesTwo])) return undefined;\n  const cleanOrientation = normalizeOrientationString(orientation);\n  if (cleanOrientation === ORIENTATIONS.VERTICAL) return isVertical(coordinatesOne, coordinatesTwo);\n  if (cleanOrientation === ORIENTATIONS.HORIZONTAL) {\n    return isHorizontal(coordinatesOne, coordinatesTwo);\n  } else return null;\n};\n\nexport {\n  normalizeOrientationString,\n  convertToInternalFormat,\n  convertToDisplayFormat,\n  areCoordinatesEqual,\n  sumCoordinates,\n  isAdjacent,\n  isHorizontal,\n  isVertical,\n  isDiagonal,\n  doCoordinatesMatchOrientation,\n  getRelativeOrientation,\n  getPerpendicularCoordinates,\n  getDelta,\n  getOrientationDirections\n};\n","import { areCoordinatesEqual } from './coordinatesUtils';\n\nconst popRandom = (array) => array?.splice(Math.floor(Math.random() * array.length), 1)[0] ?? null;\nconst popFrom = (array, index) => array?.splice(index, 1)[0] ?? null;\nconst popFirst = (array) => array.splice(0, 1)[0];\n\nconst getFrom = (array, index) => array?.slice(index, index + 1)[0] ?? null;\nconst getRandom = (array) => array[Math.floor(Math.random() * array.length)].slice() ?? null;\n\nconst removeDuplicates = (array) => {\n  if (!Array.isArray(array) || !Array.isArray(array[0])) return null;\n  if (array.length <= 1) return array;\n  const cleanArray = [];\n  array.forEach((coordinates) => {\n    if (\n      !cleanArray.some((cleanCoordinates) => areCoordinatesEqual(cleanCoordinates, coordinates))\n    ) {\n      cleanArray.push(coordinates);\n    }\n  });\n  return cleanArray;\n};\n\nexport { popRandom, popFrom, removeDuplicates, getRandom, getFrom, popFirst };\n","// Recursively build DOM element tree\nconst SVGNS = 'http://www.w3.org/2000/svg';\nfunction buildElementTree({\n  type,\n  attributes = {},\n  text = null,\n  children = [],\n  nameSpace = null,\n  listeners = {},\n  ns = null\n} = {}) {\n  try {\n    if ((type === 'svg' || type === 'path') && !nameSpace) nameSpace = SVGNS;\n    const element = nameSpace === null ? document.createElement(type) : document.createElementNS(nameSpace, type);\n    for (const [key, value] of Object.entries(attributes)) {\n      element.setAttribute(key, value);\n    }\n    if (text) element.textContent = text;\n\n    for (const [event, actions] of Object.entries(listeners)) {\n      if (Array.isArray(actions)) {\n        actions.forEach((action) => {\n          if (typeof action === 'function') {\n            element.addEventListener(event, action);\n          }\n        });\n      } else if (typeof actions === 'function') element.addEventListener(event, actions);\n    }\n\n    if (children && children.length > 0) {\n      children.forEach((child) => {\n        element.appendChild(buildElementTree(child));\n      });\n    }\n    return element;\n  } catch (e) {\n    console.error(`Failed to build element: ${type}`, e);\n  }\n}\n\nexport { buildElementTree };\n","export const TEXT_ELEMENTS = {\n  PARAGRAPH: 'p',\n  SPAN: 'span',\n  TEXTAREA: 'textarea',\n  HEADINGS: {\n    H1: 'h1',\n    H2: 'h2',\n    H3: 'h3',\n    H4: 'h4',\n    H5: 'h5',\n    H6: 'h6'\n  }\n};\nexport const STRUCTURAL_ELEMENTS = {\n  HTML: 'html',\n  BODY: 'body',\n  HEADER: 'header',\n  MAIN: 'main',\n  SECTION: 'section',\n  ARTICLE: 'article',\n  ASIDE: 'aside',\n  FOOTER: 'footer',\n  DIALOG: 'dialog',\n  DIV: 'div',\n  LISTS: {\n    OL: 'ol',\n    UL: 'ul',\n    LI: 'li'\n  }\n};\nexport const TABLE_ELEMENTS = {\n  TABLE: 'table',\n  THEAD: 'thead',\n  TBODY: 'tbody',\n  TFOOT: 'tfoot',\n  TR: 'tr',\n  TH: 'th',\n  TD: 'td'\n};\nexport const INTERACTIVE_ELEMENTS = {\n  BUTTON: 'button',\n  SELECT: 'select',\n  OPTION: 'option',\n  INPUT: 'input'\n};\nexport const FORM_ELEMENTS = {\n  FORM: 'form',\n  LABEL: 'label',\n  FIELDSET: 'fieldset',\n  LEGEND: 'legend',\n  OUTPUT: 'output'\n};\nexport const MEDIA_ELEMENTS = {\n  VIDEO: 'video',\n  AUDIO: 'audio',\n  IMAGE: 'img',\n  SVG: 'svg'\n};\nexport const NAV_AND_META_ELEMENTS = {\n  NAV: 'nav',\n  ANCHOR: 'a',\n  LINK: 'link',\n  META: 'meta'\n};\nexport const EMBED_ELEMENTS = {\n  STYLE: 'style',\n  SCRIPT: 'script',\n  IFRAME: 'iframe',\n  OBJECT: 'object',\n  EMBED: 'embed'\n};\nexport const INLINE_FORMATTING_ELEMENTS = {\n  STRONG: 'strong',\n  EM: 'em',\n  B: 'b',\n  I: 'i',\n  MARK: 'mark',\n  SMALL: 'small',\n  DEL: 'del',\n  INS: 'ins',\n  SUB: 'sub',\n  SUP: 'sup'\n};\n\nexport const COMMON_ELEMENTS = {\n  DIV: STRUCTURAL_ELEMENTS.DIV,\n  SPAN: TEXT_ELEMENTS.SPAN,\n  PARAGRAPH: TEXT_ELEMENTS.PARAGRAPH,\n  BUTTON: INTERACTIVE_ELEMENTS.BUTTON,\n  BODY: STRUCTURAL_ELEMENTS.BODY\n};\n","import { buildElementTree } from './buildElementTree';\nimport { COMMON_ELEMENTS } from '../constants/dom/elements';\n/**\n * Simplifies creation of UI object descriptions for buildElementTree.\n *\n * @param {string} type The type of the element (e.g., 'div', 'button').\n * @param {Object} options Options object containing attributes, text, and children.\n * @returns {Object} The object description for buildElementTree.\n */\nconst buildUIObj = (\n  type,\n  { attributes = {}, text = '', children = [], namespace = null } = {}\n) => ({\n  type,\n  attributes,\n  text,\n  children,\n  namespace\n});\n\n/**\n * Provides easy access to buildElementTree for building uiObjs.\n *\n * @param {Object} uiObj Structured object to be built.\n * @returns {HTMLElement} Element created from object structure.\n */\nconst buildElementFromUIObj = (uiObj) => buildElementTree(uiObj);\n\n/**\n * Wraps uiObj and buildElementTree to quickly create HTML Elements.\n *\n * @param {string} type The type of element to build (e.g., 'div', 'button').\n * @param {Object} options Options object containing attributes, text, and children.\n * @returns {HTMLElement} Built HTML Element.\n */\nconst buildUIElement = (\n  type,\n  { text = '', attributes = {}, children = [], namespace = null } = {}\n) => buildElementTree(buildUIObj(type, { text, attributes, children, namespace }));\n\nconst wrap = (wrapperClass, uiObjs = [], additionalAttributes) =>\n  buildUIObj(COMMON_ELEMENTS.DIV, {\n    attributes: { class: wrapperClass },\n    children: uiObjs,\n    ...additionalAttributes\n  });\n\nconst buildParagraphObj = (text, classAttr) =>\n  buildUIObj(COMMON_ELEMENTS.PARAGRAPH, { text, attributes: { class: classAttr } });\n\nconst buildButtonObj = (text, classAttr) =>\n  buildUIObj(COMMON_ELEMENTS.BUTTON, { text, attributes: { class: classAttr } });\n\nconst buildSpanObj = (text, spanClass) =>\n  buildUIObj(COMMON_ELEMENTS.SPAN, { text, attributes: { class: spanClass } });\n\nexport {\n  buildUIObj,\n  buildUIElement,\n  buildElementFromUIObj,\n  wrap,\n  buildButtonObj,\n  buildParagraphObj,\n  buildSpanObj\n};\n","/**\n * General attributes commonly used for DOM element manipulation.\n */\nexport const GENERAL_ATTRIBUTES = {\n  ID: 'id',\n  CLASS: 'class',\n  TITLE: 'title',\n  TYPE: 'type',\n  HREF: 'href',\n  DATA: (type) => `data-${type}` // Function to generate data-* attributes\n};\n\n/**\n * Specific attributes for input elements.\n */\nexport const INPUT_ATTRIBUTES = {\n  VALUE: 'value',\n  DISABLED: 'disabled',\n  PLACEHOLDER: 'placeholder',\n  MIN: 'min',\n  MAX: 'max',\n  TYPE: 'type'\n};\n\n/**\n * Constants for string representations of boolean values,\n * primarily used for setting data attributes in HTML.\n */\nexport const BOOL = {\n  T: 'true',\n  F: 'false'\n};\n","import { GENERAL_ATTRIBUTES } from '../../../Utility/constants/dom/attributes';\n\nexport const SHIP_CLASSES = {\n  ENTRY: 'ship-element',\n  NAME: 'ship-name',\n  SELECTED: 'ship-selected'\n};\nexport const SHIP_DATA_ATTRIBUTES = {\n  SHIP_NAME: GENERAL_ATTRIBUTES.DATA('name'),\n  SHIP_SUNK: GENERAL_ATTRIBUTES.DATA('sunk'),\n  SHIP_LENGTH: GENERAL_ATTRIBUTES.DATA('length'),\n  SHIP_ORIENTATION: GENERAL_ATTRIBUTES.DATA('orientation'),\n  SHIP_PLACED: GENERAL_ATTRIBUTES.DATA('placed')\n};\n\nexport const SHIP_ROTATE_BUTTON = {\n  CLASS: 'rotate-ship-button',\n  TEXT: 'Rotate Ship'\n};\n","export const MAIN_FLEET = {\n  TYPE: 'main-fleet',\n  CLASSES: {\n    SHIP_LIST: 'main-fleet-ship-list',\n    HEADER: 'main-fleet-header',\n    BUTTONS_CONTAINER: 'main-fleet-button-container'\n  },\n  PROPERTIES: {\n    HEADER_TEXT: 'Your Fleet'\n  }\n};\n\nexport const TRACKING_FLEET = {\n  TYPE: 'tracking-fleet',\n  CLASSES: {\n    SHIP_LIST: 'tracking-fleet-ship-list',\n    HEADER: 'tracking-fleet-header'\n  },\n  PROPERTIES: {\n    HEADER_TEXT: 'Enemy Fleet'\n  }\n};\n","export const GENERAL_EVENTS = {\n  CHANGE: 'change'\n};\n\nexport const MOUSE_EVENTS = {\n  CLICK: 'click',\n  DOUBLE_CLICK: 'dblclick',\n  DOWN: 'mousedown',\n  UP: 'mouseup',\n  MOVE: 'mousemove',\n  ENTER: 'mouseenter',\n  LEAVE: 'mouseleave',\n  OVER: 'mouseover',\n  CONTEXT_MENU: 'contextmenu'\n};\nexport const KEY_EVENTS = {\n  DOWN: 'keydown',\n  UP: 'keyup',\n  CODES: {\n    Q: 'KeyQ',\n    W: 'KeyW',\n    E: 'KeyE',\n    R: 'KeyR',\n    T: 'KeyT',\n    Y: 'KeyY',\n    SPACE: 'Space',\n    ESC: 'Escape',\n    ENTER: 'Enter',\n    ARROW_UP: 'ArrowUp',\n    ARROW_DOWN: 'ArrowDown',\n    ARROW_LEFT: 'ArrowLeft',\n    ARROW_RIGHT: 'ArrowRight',\n    TAB: 'Tab',\n    SHIFT: 'Shift',\n    CONTROL: 'Control',\n    ALT: 'Alt',\n    DELETE: 'Delete'\n  }\n};\n","export const createAttributeSelector = ({ elementType, attribute, value }) =>\n  `${elementType}[${attribute}='${value}']`;\n\nexport const COMMON_GRID = {\n  CLASSES: {\n    WRAPPER: 'grid-wrapper',\n    HEADER: 'grid-header',\n    CELL: 'grid-cell',\n    ROW: 'board-row',\n    LABELS: {\n      ROW: 'board-row-label',\n      COL_CONTAINER: 'board-col-labels',\n      COL: 'board-col-label'\n    }\n  },\n  LABEL_TYPES: {\n    LETTER: 'letter',\n    NUMERIC: 'numeric'\n  },\n  get CELL_SELECTOR() {\n    return `.${COMMON_GRID.CLASSES.CELL}`;\n  }\n};\n","import { INTERACTIVE_ELEMENTS } from '../../../../Utility/constants/dom/elements';\nimport { createAttributeSelector } from '../../common/gridConstants';\nimport { GENERAL_ATTRIBUTES, INPUT_ATTRIBUTES } from '../../../../Utility/constants/dom/attributes';\nexport const TRACKING_GRID = {\n  CLASSES: {\n    TYPE: 'tracking-grid',\n    HEADER: 'tracking-grid-header',\n    WRAPPER: 'tracking-grid-wrapper'\n  },\n  PROPERTIES: {\n    CELL_ELEMENT: INTERACTIVE_ELEMENTS.BUTTON,\n    HEADER_TEXT: 'Enemy Territory',\n    ATTRIBUTES: {\n      CELL_STATUS_DATA: GENERAL_ATTRIBUTES.DATA('cell-status'),\n      CELL_STATUS_ACCESSOR: 'cellStatus'\n    }\n  },\n  SELECTORS: {\n    CELL: (coordinates) =>\n      createAttributeSelector({\n        elementType: TRACKING_GRID.PROPERTIES.CELL_ELEMENT,\n        attribute: INPUT_ATTRIBUTES.VALUE,\n        value: coordinates\n      })\n  }\n};\n","import { COMMON_ELEMENTS } from '../constants/dom/elements';\nimport { LETTER_AXES } from '../constants/common';\nimport { buildUIObj } from './uiBuilders';\nimport { convertIndexToLetter } from '../utils/stringUtils';\nimport { COMMON_GRID } from '../../Components/Grids/common/gridConstants';\n\nconst buildGridHeaderObj = ({ headerClass, headerText }) =>\n  buildUIObj(COMMON_ELEMENTS.DIV, {\n    attributes: {\n      class: headerClass\n    },\n    children: [\n      buildUIObj(COMMON_ELEMENTS.PARAGRAPH, {\n        text: headerText\n      })\n    ]\n  });\n\nconst getLabelTypes = (letterAxis) =>\n  letterAxis === LETTER_AXES.COL\n    ? { row: COMMON_GRID.LABEL_TYPES.NUMERIC, col: COMMON_GRID.LABEL_TYPES.LETTER }\n    : { row: COMMON_GRID.LABEL_TYPES.LETTER, col: COMMON_GRID.LABEL_TYPES.NUMERIC };\n\nconst generateLabels = ({ count, type, axisLabelClass }) =>\n  Array.from({ length: count }).map((_, i) =>\n    buildUIObj(COMMON_ELEMENTS.PARAGRAPH, {\n      text: type === COMMON_GRID.LABEL_TYPES.LETTER ? convertIndexToLetter(i) : `${i}`,\n      attributes: { class: axisLabelClass }\n    })\n  );\n\nconst wrapColLabels = ({ labels }) =>\n  buildUIObj(COMMON_ELEMENTS.DIV, {\n    attributes: { class: COMMON_GRID.CLASSES.LABELS.COL_CONTAINER },\n    children: labels\n  });\n\nconst buildGridCellObj = ({ elementType, attributes }) =>\n  buildUIObj(elementType, {\n    attributes: {\n      class: COMMON_GRID.CLASSES.CELL,\n      ...attributes\n    }\n  });\n\nconst buildGridRowObj = ({ rowLabelObj, cellObjs }) =>\n  buildUIObj(COMMON_ELEMENTS.DIV, {\n    attributes: { class: COMMON_GRID.CLASSES.ROW },\n    children: [rowLabelObj, ...cellObjs]\n  });\n\nexport {\n  generateLabels,\n  getLabelTypes,\n  buildGridHeaderObj,\n  buildGridCellObj,\n  buildGridRowObj,\n  wrapColLabels\n};\n","\n      import API from \"!../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../../node_modules/css-loader/dist/cjs.js!./tracking-grid-styles.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../../node_modules/css-loader/dist/cjs.js!./tracking-grid-styles.css\";\n       export default content && content.locals ? content.locals : undefined;\n","import { STATUSES } from '../../../../../Utility/constants/common';\nimport { TRACKING_GRID } from '../../common/trackingGridConstants';\nimport { COMMON_GRID } from '../../../common/gridConstants';\nimport { buildTrackingGridUIObj } from './buildTrackingGridUIObj';\nimport './tracking-grid-styles.css';\n\nexport const TrackingGridView = ({ numberOfRows, numberOfCols, letterAxis }) => {\n  const elements = {};\n  const buildAndSetElements = () => {\n    const { wrappedTrackingGridElement } = buildTrackingGridUIObj({\n      numberOfRows,\n      numberOfCols,\n      letterAxis\n    });\n    const grid = wrappedTrackingGridElement.querySelector(`.${TRACKING_GRID.CLASSES.TYPE}`);\n    const cells = grid.querySelectorAll(`.${COMMON_GRID.CLASSES.CELL}`);\n    Object.assign(elements, { wrappedTrackingGridElement, grid, cells });\n  };\n\n  const isCellUnexplored = (cell) =>\n    cell.dataset[TRACKING_GRID.PROPERTIES.ATTRIBUTES.CELL_STATUS_ACCESSOR] === STATUSES.UNEXPLORED;\n  const enable = () =>\n    [...elements.cells].forEach((cell) => {\n      if (isCellUnexplored(cell)) cell.disabled = false;\n    });\n  const disable = () => [...elements.cells].forEach((cell) => (cell.disabled = true));\n  const attachWithinWrapper = (element) => elements.wrappedTrackingGridElement.append(element);\n  const hide = () => (elements.wrappedTrackingGridElement.style.display = 'none');\n  const show = () => elements.wrappedTrackingGridElement.removeAttribute('style');\n  const getCell = (coordinates) =>\n    elements.grid.querySelector(TRACKING_GRID.SELECTORS.CELL(coordinates));\n  const setCellStatus = (cell, status) =>\n    cell.setAttribute(TRACKING_GRID.PROPERTIES.ATTRIBUTES.CELL_STATUS_DATA, status);\n  buildAndSetElements();\n  return {\n    attachTo: (container) => container.append(elements.wrappedTrackingGridElement),\n    attachWithinWrapper,\n    getCell,\n    setCellStatus,\n    hide,\n    show,\n    enable,\n    disable,\n    elements: {\n      getWrapper: () => elements.wrappedTrackingGridElement,\n      getGrid: () => elements.grid\n    },\n    reset: () => {\n      buildAndSetElements();\n    }\n  };\n};\n","import { COMMON_ELEMENTS } from '../../../../../Utility/constants/dom/elements';\nimport {\n  buildUIObj,\n  buildElementFromUIObj\n} from '../../../../../Utility/uiBuilderUtils/uiBuilders';\nimport {\n  buildGridCellObj,\n  buildGridHeaderObj,\n  buildGridRowObj,\n  generateLabels,\n  getLabelTypes,\n  wrapColLabels\n} from '../../../../../Utility/uiBuilderUtils/gridBuilderUtils';\n\nimport { TRACKING_GRID } from '../../common/trackingGridConstants';\nimport { COMMON_GRID } from '../../../common/gridConstants';\nimport { STATUSES } from '../../../../../Utility/constants/common';\n/**\n * Creates the specified grid's structured object.\n * Used to create the interface element.\n *\n * @param {number} rows Number of rows the grid should contain.\n * @param {number} cols Number of columns the grid should contain.\n * @param {string} letterAxis The axis to label with letters.\n * @param {string} gridType Type of grid to build.\n * @returns {Object} Complete structured grid object to be built into an HTML Element.\n */\n\nexport const buildTrackingGridUIObj = ({ numberOfRows, numberOfCols, letterAxis }) => {\n  const headerObj = buildGridHeaderObj({\n    headerClass: `${TRACKING_GRID.CLASSES.HEADER} ${COMMON_GRID.CLASSES.HEADER}`,\n    headerText: TRACKING_GRID.PROPERTIES.HEADER_TEXT\n  });\n  const labelTypes = getLabelTypes(letterAxis);\n  const colLabelObjs = generateLabels({\n    count: numberOfCols,\n    type: labelTypes.col,\n    axisLabelClass: COMMON_GRID.CLASSES.LABELS.COL\n  });\n  const rowLabelObjs = generateLabels({\n    count: numberOfRows,\n    type: labelTypes.row,\n    axisLabelClass: COMMON_GRID.CLASSES.LABELS.ROW\n  });\n\n  const buildTrackingGridCell = (coordinateAttribute) =>\n    buildGridCellObj({\n      elementType: TRACKING_GRID.PROPERTIES.CELL_ELEMENT,\n      attributes: {\n        value: `${coordinateAttribute}`,\n        [TRACKING_GRID.PROPERTIES.ATTRIBUTES.CELL_STATUS_DATA]: STATUSES.UNEXPLORED\n      }\n    });\n\n  const rowObjs = rowLabelObjs.map((rowLabelObj) =>\n    buildGridRowObj({\n      rowLabelObj,\n      cellObjs: colLabelObjs.map((colLabelObj) =>\n        buildTrackingGridCell(`${rowLabelObj.text}${colLabelObj.text}`)\n      )\n    })\n  );\n\n  const trackingGridUIObj = buildUIObj(COMMON_ELEMENTS.DIV, {\n    attributes: {\n      class: `${TRACKING_GRID.CLASSES.WRAPPER} ${COMMON_GRID.CLASSES.WRAPPER}`\n    },\n    children: [\n      buildUIObj(COMMON_ELEMENTS.DIV, {\n        attributes: { class: TRACKING_GRID.CLASSES.TYPE },\n        children: [headerObj, wrapColLabels({ labels: colLabelObjs }), ...rowObjs]\n      })\n    ]\n  });\n  return {\n    wrappedTrackingGridElement: buildElementFromUIObj(trackingGridUIObj)\n  };\n};\n","import { MOUSE_EVENTS } from '../../../../Utility/constants/dom/domEvents';\nimport { TrackingGridView } from '../../../Grids/TrackingGrid/main/view/TrackingGridView';\n\nconst AI_TRACKING_GRID = {\n  CLASSES: {\n    GRID: 'ai-display-tracking-grid',\n    HEADER: 'ai-display-header'\n  },\n  TEXTS: {\n    HEADER: (aiName) => `${aiName}`\n  }\n};\n\nexport const AITrackingGridView = (boardSettings, aiName) => {\n  const trackingGridView = TrackingGridView(boardSettings);\n  const trackingGridElement = trackingGridView.elements.getGrid();\n  trackingGridElement.classList.add(AI_TRACKING_GRID.CLASSES.GRID);\n  const header = trackingGridElement.querySelector('.tracking-grid-header');\n  const headerText = trackingGridElement.querySelector('.tracking-grid-header > p');\n  header.classList.add(AI_TRACKING_GRID.CLASSES.HEADER);\n  headerText.textContent = AI_TRACKING_GRID.TEXTS.HEADER(aiName);\n  trackingGridElement\n    .querySelectorAll('button.grid-cell')\n    .forEach((cell) => cell.setAttribute('disabled', true));\n  return trackingGridView;\n};\n","import { AIShipView } from './components/Ship/AIShipView';\nimport { AIFleetView } from './components/Fleet/AIFleetView';\nimport { AITrackingGridView } from './components/TrackingGrid/AITrackingGridView';\n\nconst buildAIFleet = (shipNames) => {\n  const fleetView = AIFleetView();\n  shipNames.forEach((name) => {\n    const shipView = AIShipView(name);\n    const id = name.toLowerCase().replace(' ', '-');\n    fleetView.addShipView(id, shipView);\n  });\n  fleetView.populateFleetShipLists();\n  return fleetView;\n};\nexport const AIView = (boardSettings, aiName, shipNames) => {\n  const trackingGrid = AITrackingGridView(boardSettings, aiName);\n  trackingGrid.displayResult = (coordinates, result) => {\n    const cell = trackingGrid.getCell(coordinates);\n    trackingGrid.setCellStatus(cell, result);\n  };\n  const fleet = buildAIFleet(shipNames);\n  return { trackingGrid, fleet };\n};\n","import { buildUIObj, buildElementFromUIObj } from '../../../../Utility/uiBuilderUtils/uiBuilders';\nimport { COMMON_ELEMENTS } from '../../../../Utility/constants/dom/elements';\nimport { TRACKING_FLEET } from '../../../Fleet/common/fleetConstants';\n\nconst buildFleetContainerObj = () =>\n  buildUIObj(COMMON_ELEMENTS.DIV, {\n    attributes: {\n      class: TRACKING_FLEET.TYPE\n    }\n  });\n\nconst buildShipListObj = () =>\n  buildUIObj(COMMON_ELEMENTS.DIV, {\n    attributes: {\n      class: TRACKING_FLEET.CLASSES.SHIP_LIST\n    }\n  });\n\nconst buildFleetHeaderObj = () =>\n  buildUIObj(COMMON_ELEMENTS.PARAGRAPH, {\n    text: TRACKING_FLEET.PROPERTIES.HEADER_TEXT,\n    attributes: {\n      class: TRACKING_FLEET.CLASSES.HEADER\n    }\n  });\n\nexport const AIFleetView = () => {\n  const fleetContainer = buildFleetContainerObj();\n  const header = buildFleetHeaderObj();\n  const shipList = buildShipListObj();\n  fleetContainer.children = [header, shipList];\n  const trackingFleetElement = buildElementFromUIObj(fleetContainer);\n  const shipListElement = trackingFleetElement.querySelector(\n    `.${TRACKING_FLEET.CLASSES.SHIP_LIST}`\n  );\n  const shipViews = new Map();\n\n  return {\n    getTrackingFleet: () => trackingFleetElement,\n    addShipView: (shipID, shipView) => shipViews.set(shipID, shipView),\n    setShipSunk: (shipID) => shipViews.get(shipID).setSunk(),\n    populateFleetShipLists: () =>\n      shipViews.forEach((shipView) => {\n        shipListElement.append(shipView.getShipElement());\n      })\n  };\n};\n","import { buildUIObj, buildElementFromUIObj } from '../../../../Utility/uiBuilderUtils/uiBuilders';\nimport { COMMON_ELEMENTS } from '../../../../Utility/constants/dom/elements';\nimport { SHIP_CLASSES, SHIP_DATA_ATTRIBUTES } from '../../../Ship/common/shipConstants';\nimport { BOOL } from '../../../../Utility/constants/dom/attributes';\nconst buildBaseShipUIObj = (name, id, type) =>\n  buildUIObj(type, {\n    attributes: {\n      class: `${id} ${SHIP_CLASSES.ENTRY}`,\n      ...{ [SHIP_DATA_ATTRIBUTES.SHIP_NAME]: id },\n      ...{ [SHIP_DATA_ATTRIBUTES.SHIP_SUNK]: 'false' }\n    },\n    children: [\n      buildUIObj(COMMON_ELEMENTS.PARAGRAPH, {\n        text: name,\n        attributes: { class: SHIP_CLASSES.NAME }\n      })\n    ]\n  });\n\nexport const AIShipView = (name) => {\n  const id = name.toLowerCase().replace(/ /g, '-');\n  const trackingShipBaseObj = buildBaseShipUIObj(name, id, COMMON_ELEMENTS.DIV);\n  const trackingShipElement = buildElementFromUIObj(trackingShipBaseObj);\n  return {\n    getShipElement: () => trackingShipElement,\n    setSunk: () => trackingShipElement.setAttribute(SHIP_DATA_ATTRIBUTES.SHIP_SUNK, BOOL.T)\n  };\n};\n","const Node = ({ data, next = null }) => {\n  const _data = data;\n  let _next = next;\n  return {\n    get data() {\n      return _data;\n    },\n    get next() {\n      return _next;\n    },\n    set next(nextNode) {\n      _next = nextNode;\n    }\n  };\n};\n\nexport default function Queue() {\n  let _head = null;\n  let _tail = null;\n  let _size = 0;\n\n  const enqueue = (data) => {\n    const node = Node({ data });\n    if (_size === 0) {\n      _head = node;\n      _tail = node;\n    } else {\n      _tail.next = node;\n      _tail = node;\n    }\n    _size++;\n  };\n\n  const dequeue = () => {\n    if (_size === 0) return undefined;\n    const output = _head.data;\n    _head = _head.next;\n    if (_size === 1) _tail = null;\n    _size--;\n    return output;\n  };\n\n  const peekHead = () => _head?.data.slice() ?? null;\n  const peekTail = () => _tail?.data.slice() ?? null;\n\n  const isEmpty = () => _size === 0;\n  const size = () => _size;\n\n  return {\n    enqueue,\n    dequeue,\n    peekHead,\n    peekTail,\n    isEmpty,\n    size,\n    copyToArray: () => {\n      if (!_head) return [];\n      let currentNode = _head;\n      const array = [];\n      while (currentNode !== null) {\n        array.push(currentNode.data.slice());\n        currentNode = currentNode.next;\n      }\n      return array;\n    }\n  };\n}\n","import { STATUSES, DIRECTIONS } from '../constants/common';\nimport { sumCoordinates } from './coordinatesUtils';\n/**\n * @module gridUtils\n * Provides a wide range of utilities for 2D grid-based operations.\n */\n\n/**\n * Creates a Row x Column grid 2D array.\n *\n * @param {number} rows Number of rows.\n * @param {number} cols Number of columns.\n * @param {*} fill Default value to set each cell's status to.\n * @returns {Object[]} Array of objects containing cell data.\n */\nconst createGrid = (rows, cols, fill = null) =>\n  Array.from({ length: rows }, () => Array.from({ length: cols }, () => ({ status: fill })));\n\n/**\n * Checks if a cell's coordinates are within the boundaries of a grid.\n *\n * @param {array[][]} grid The game grid.\n * @param {number[]} coordinates The cells coordinates.\n * @returns {boolean} True if the cell is within grid, false otherwise.\n */\nconst isWithinGrid = (grid, coordinates) => {\n  const bounds = [grid.length, grid[0].length];\n  return (\n    coordinates[0] >= 0 &&\n    coordinates[0] < bounds[0] &&\n    coordinates[1] >= 0 &&\n    coordinates[1] < bounds[1]\n  );\n};\n\n/**\n * Creates a deep copy of a 2-dimensional grid.\n *\n * @param {array[number[]]} grid The grid to copy\n * @returns {array[number[]]} A deep copy of the grid.\n */\nconst copyGrid = (grid) => grid.map((row) => [...row]);\n\n/**\n * Checks if coordinates are at the edge of a grid.\n *\n * @param {array[][]} grid The grid to evaluate.\n * @param {number[]} coordinates The cell's coordinates.\n * @returns {boolean} True if the cell is at edge of grid, false otherwise.\n */\nconst isAtEdge = (grid, coordinates) =>\n  coordinates[0] === 0 ||\n  coordinates[1] === 0 ||\n  coordinates[0] === grid.length - 1 ||\n  coordinates[1] === grid[0].length - 1;\n\n/**\n * Returns the stored value at given coordinates.\n *\n * @param {array[][]} grid The grid to evaluate.\n * @param {number[]} coordinates Location of cell within the grid.\n * @returns {null | integer | undefined} The known value at the provided cell.\n */\nconst getValueAt = (grid, coordinates) => {\n  if (isWithinGrid(grid, coordinates)) return grid[coordinates[0]][coordinates[1]];\n  return undefined;\n};\n\n/**\n * Returns the status property in the stored value at given coordinates.\n *\n * @param {array[][]} grid The grid to evaluate.\n * @param {number[]} coordinates Location of cell within the grid.\n * @returns {null | integer | undefined} The known value at the provided cell.\n */\nconst getCellStatusAt = (grid, coordinates) => {\n  const cellValue = getValueAt(grid, coordinates);\n  if (cellValue) return cellValue.status;\n  return undefined;\n};\n\n/**\n * Finds the adjacent cell in a specified direction if it's within grid bounds.\n *\n * @param {array[][]} grid The grid to navigate.\n * @param {number[]|string} direction The direction in which to follow in vector or string format.\n * @param {number[]} coordinates The starting cell's coordinates.\n * @returns {number[]|undefined} The adjacent cell's coordinates, if within grid bounds.\n */\nconst getCellInADirection = (grid, coordinates, direction) => {\n  let vector = direction;\n  if (typeof vector === 'string') vector = DIRECTIONS[vector.toUpperCase()];\n  const result = sumCoordinates(vector, coordinates);\n  return isWithinGrid(grid, result) ? result : undefined;\n};\n\n/**\n * Finds all adjacent cells within grid bounds.\n *\n * @param {array[][]} grid The grid to navigate.\n * @param {number[]} coordinates The central cell's coordinates.\n * @returns {array[number[]]} Coordinates of all adjacent cells within the grid.\n */\nconst getCellsInAllDirections = (grid, coordinates) => {\n  const cellsAround = [];\n  for (const direction of Object.keys(DIRECTIONS)) {\n    const cellInDirection = getCellInADirection(grid, coordinates, direction);\n    if (cellInDirection) cellsAround.push(cellInDirection);\n  }\n  return cellsAround;\n};\n\n/**\n * Finds adjacent cells marked as 'unexplored'.\n *\n * @param {array[][]} grid The grid to navigate.\n * @param {number[]} coordinates The central cell's coordinates.\n * @returns {array[number[]]} Coordinates of unexplored adjacent cells within the grid.\n */\nconst getOpenMovesAround = (grid, coordinates) =>\n  getCellsInAllDirections(grid, coordinates).filter(\n    (coordinates) => getCellStatusAt(grid, coordinates) === STATUSES.UNEXPLORED\n  );\n\n/**\n * Finds consecutive cells of a specified type in a direction.\n *\n * @param {array[][]} grid The grid to navigate.\n * @param {number[]} start Cell to start navigation at.\n * @param {number[]} direction Direction vector to follow.\n * @param {string} type Type of cell to account for.\n * @returns {array[number[]]} Array of adjacent coordinates of specified type.\n */\nconst getTypeOfCellInADirection = ({ grid, start, direction, type }) => {\n  const cellsOfType = [];\n  let nextCell = sumCoordinates(start, direction);\n  while (getCellStatusAt(grid, nextCell) === type) {\n    cellsOfType.push(nextCell);\n    nextCell = sumCoordinates(nextCell, direction);\n  }\n  return cellsOfType;\n};\n\nexport {\n  createGrid,\n  isWithinGrid,\n  copyGrid,\n  isAtEdge,\n  getValueAt,\n  getCellStatusAt,\n  getCellInADirection,\n  getCellsInAllDirections,\n  getOpenMovesAround,\n  getTypeOfCellInADirection\n};\n","import Queue from '../../../../../Utility/dataStructures/Queue';\nimport { getOpenMovesAround } from '../../../../../Utility/utils/gridUtils';\nimport { popRandom } from '../../../../../Utility/utils/arrayUtils';\nimport { STATUSES } from '../../../../../Utility/constants/common';\n\n/**\n * Provides AI intermediate move strategy.\n * Tracks last successful hit and targets surrounding area until a ship is sunk.\n *\n * @param {Object} detail Data for initializing strategy.\n * @param {number[]} trackingGrid 2D array for tracking attacks and results.\n * @param {function} popRandomMove Function for retrieving random move from availableMoves.\n * @param {function} popMove Function for retrieving specific move from availableMoves.\n * @returns {Object} Interface for AI to utilize intermediate strategy.\n */\nexport const IntermediateMoveStrategy = ({ trackingGrid, popRandomMove, popMove }) => {\n  let lastHit = null;\n  const hitChain = Queue();\n  const priorityMoves = [];\n\n  /**\n   * Randomly selects a priority move for a more strategic approach while remaining unpredictable.\n   *\n   * @returns {number[]|null} - Randomly selected priority move to execute or null if empty.\n   */\n  const getRandomPriorityMove = () => {\n    while (priorityMoves.length > 0) {\n      const move = popMove(popRandom(priorityMoves));\n      if (move) return move;\n    }\n    return null;\n  };\n\n  /**\n   * Empties the current hitChain to process and target surrounding moves.\n   */\n  const backTrack = () => {\n    lastHit = null;\n    priorityMoves.length = 0;\n    const hitsFromChain = [];\n    while (!hitChain.isEmpty()) hitsFromChain.push(hitChain.dequeue());\n    priorityMoves.push(...hitsFromChain.flatMap((hit) => getOpenMovesAround(trackingGrid, hit)));\n    const move = getRandomPriorityMove();\n    if (move) return move;\n    else return getNextMove();\n  };\n\n  /**\n   * Processes game and AI lastHit state to provide a strategic move.\n   * @returns {number[]} - Coordinates of move to execute.\n   */\n  const getNextMove = () => {\n    if (!lastHit) {\n      if (priorityMoves.length === 0) return popRandomMove();\n      else return getRandomPriorityMove();\n    }\n    if (lastHit) {\n      const movesAround = getOpenMovesAround(trackingGrid, lastHit);\n      if (movesAround.length > 0) return popMove(popRandom(movesAround));\n      else return backTrack();\n    }\n  };\n\n  /**\n   * Processed result of sent attack for strategic planning.\n   *\n   * @param {number[]} coordinates Coordinates of attack result.\n   * @param {string} result String representation of attack result.\n   */\n  const processMoveResult = (coordinates, result) => {\n    if (result === STATUSES.MISS);\n    else if (result === STATUSES.HIT) {\n      hitChain.enqueue(coordinates);\n      lastHit = coordinates;\n    } else if (result === STATUSES.SHIP_SUNK) reset();\n  };\n\n  const reset = () => {\n    lastHit = null;\n    priorityMoves.length = 0;\n    while (!hitChain.isEmpty()) hitChain.dequeue();\n  };\n\n  return {\n    getNextMove,\n    processMoveResult,\n    getLastHit: () => lastHit,\n    setLastHit: (hit) => {\n      hitChain.enqueue(hit);\n      lastHit = hit;\n    },\n    reset: () => {\n      lastHit = null;\n      priorityMoves.length = 0;\n      while (!hitChain.isEmpty()) hitChain.dequeue();\n    },\n    hasPriorityMoves: () => priorityMoves.length !== 0,\n    hasHitsInChain: () => !hitChain.isEmpty()\n  };\n};\n","const Node = ({ data, next = null, prev = null }) => {\n  const _data = data;\n  let _next = next;\n  let _prev = prev;\n  return {\n    get data() {\n      return _data;\n    },\n    get next() {\n      return _next;\n    },\n    set next(nextNode) {\n      _next = nextNode;\n    },\n    get prev() {\n      return _prev;\n    },\n    set prev(prevNode) {\n      _prev = prevNode;\n    }\n  };\n};\n\nexport default function Dequeue() {\n  let _head = null;\n  let _tail = null;\n  let _size = 0;\n\n  const pushFront = (data) => {\n    const node = Node({ data });\n    if (_size === 0) {\n      _head = node;\n      _tail = node;\n    } else {\n      node.next = _head;\n      _head.prev = node;\n      _head = node;\n    }\n    _size++;\n  };\n\n  const pushBack = (data) => {\n    const node = Node({ data });\n    if (_size === 0) {\n      _head = node;\n      _tail = node;\n    } else {\n      node.prev = _tail;\n      _tail.next = node;\n      _tail = node;\n    }\n    _size++;\n  };\n\n  const popFront = () => {\n    if (_size === 0) return undefined;\n    const output = _head.data;\n    _head = _head.next;\n    if (_size === 1) _tail = null;\n    else _head.prev = null;\n    _size--;\n    return output;\n  };\n\n  const popBack = () => {\n    if (_size === 0) return undefined;\n    const output = _tail.data;\n    _tail = _tail.prev;\n    if (_size === 1) _head = null;\n    else _tail.next = null;\n    _size--;\n    return output;\n  };\n\n  const peekHead = () => _head?.data.slice() ?? null;\n  const peekTail = () => _tail?.data.slice() ?? null;\n  const peekBeforeTail = () => _tail?.prev?.data.slice() ?? null;\n  const isEmpty = () => _size === 0;\n  const size = () => _size;\n\n  return {\n    pushFront,\n    pushBack,\n    popFront,\n    popBack,\n    peekHead,\n    peekTail,\n    peekBeforeTail,\n    isEmpty,\n    size,\n    copyToArray: () => {\n      if (!_head) return [];\n      let currentNode = _head;\n      const array = [];\n      while (currentNode !== null) {\n        array.push(currentNode.data.slice());\n        currentNode = currentNode.next;\n      }\n      return array;\n    }\n  };\n}\n","import Dequeue from '../../../../../../Utility/dataStructures/Dequeue';\nimport { validateCoordinates } from '../../../../../../Utility/utils/validationUtils';\nimport {\n  getDelta,\n  isAdjacent,\n  getRelativeOrientation,\n  doCoordinatesMatchOrientation,\n  getOrientationDirections\n} from '../../../../../../Utility/utils/coordinatesUtils';\n\n/**\n * Initializes a Chain data structure which tracks and manages information\n * related to consecutive and adjacent coordinates in a 2D grid.\n *\n * @param {Object} [detail=null] Initialization details.\n * @returns {Object} Interface for interacting with Chain structure.\n */\nexport default function Chain({ coordinates = null, startingOrientation = null } = {}) {\n  let chain = Dequeue();\n  let orientation = startingOrientation;\n  let afterHeadDirection = null;\n  let afterTailDirection = null;\n  let currentDirection = null;\n\n  const isAdjacentToTail = (coordinates) => isAdjacent(coordinates, chain.peekTail());\n  const isAdjacentToHead = (coordinates) => isAdjacent(coordinates, chain.peekHead());\n\n  /**\n   * Tests if a given coordinate pair meets the criteria for extending the current chain.\n   * The coordinates much align with the current orientation and extend at the head or tail of the chain.\n   *\n   * @param {number[]} coordinates Coordinates to test against current chain state.\n   * @param {string} inOrientation Orientation cell should follow.\n   * @returns {boolean} True if coordinates can extend chain, false otherwise.\n   */\n  const canExtendChain = (coordinates, inOrientation = orientation) =>\n    doCoordinatesMatchOrientation(inOrientation, coordinates, chain.peekTail()) &&\n    (isAdjacentToTail(coordinates) || isAdjacentToHead(coordinates));\n\n  /**\n   * Sets the chain's direction state and provides the relative directions for extending at the head or tail end.\n   * Provides easy-access to a consistent method of extending the chain in either direction.\n   *\n   * @param {Object} detail Contains coordinate pair and direction to set.\n   */\n  const setDirections = ({ coordinates = null, initialDirection = null }) => {\n    currentDirection = initialDirection ?? getDelta(chain.peekHead(), coordinates);\n    afterTailDirection = currentDirection;\n    afterHeadDirection = [-currentDirection[0], -currentDirection[1]];\n  };\n\n  /**\n   * Sets the first coordinate pair in the chain.\n   * Creates the root coordinates to establish a chain upon.\n   *\n   * @param {number[]} coordinates Coordinate pair to set as the first in a chain.\n   * @returns {boolean} True if set, false otherwise.\n   */\n  const setFirstInChain = (coordinates) => {\n    chain.pushFront(coordinates);\n    if (chain.size() === 1) return true;\n    return false;\n  };\n\n  /**\n   * Initializes the chain by extending from the first set coordinates and setting the direction of the chain.\n   * The coordinates are always set as the tail of the chain providing a consistent approach calculating direction.\n   *\n   * @param {number[]} coordinates Coordinates to initialize chain with.\n   * @returns {boolean} True if initialization successful, false otherwise.\n   */\n  const initializeChain = (coordinates) => {\n    const relativeOrientation = getRelativeOrientation(chain.peekHead(), coordinates);\n    if (canExtendChain(coordinates, relativeOrientation)) {\n      setDirections({ coordinates });\n      orientation = relativeOrientation;\n      chain.pushBack(coordinates);\n      return true;\n    }\n    return false;\n  };\n\n  /**\n   * Extends the chain at the head or tail and updates the current direction accordingly.\n   *\n   * @param {number[]} coordinates Coordinates to extend chain with.\n   * @returns {boolean} True if extension is successful, false otherwise.\n   */\n  const updateChain = (coordinates) => {\n    if (isAdjacentToTail(coordinates)) {\n      currentDirection = getDelta(chain.peekTail(), coordinates);\n      chain.pushBack(coordinates);\n    } else {\n      currentDirection = getDelta(chain.peekHead(), coordinates);\n      chain.pushFront(coordinates);\n    }\n    return true;\n  };\n\n  /**\n   * Adds coordinates to the chain based on chain state and coordinate pair validity.\n   *\n   * @param {number[]} coordinates Coordinates to add to chain.\n   * @returns {boolean} True if coordinates added, false otherwise.\n   */\n  const addCoordinates = (coordinates) => {\n    try {\n      validateCoordinates(coordinates);\n    } catch (error) {\n      console.error(error);\n      return false;\n    }\n    if (chain.isEmpty()) return setFirstInChain(coordinates);\n    if (chain.size() === 1) return initializeChain(coordinates);\n    if (canExtendChain(coordinates)) return updateChain(coordinates);\n  };\n\n  if (coordinates) addCoordinates(coordinates);\n  if (startingOrientation) {\n    const directions = getOrientationDirections(startingOrientation);\n    const orientationDirectionVectors = Object.values(directions);\n    const initialDirection =\n      orientationDirectionVectors[Math.floor(orientationDirectionVectors.length * Math.random())];\n    setDirections({ initialDirection });\n  }\n  return {\n    addCoordinates,\n    size: () => chain.size(),\n    peekHead: () => chain.peekHead(),\n    peekTail: () => chain.peekTail(),\n    getOrientation: () => orientation,\n    isEmpty: () => chain.isEmpty(),\n    getCurrentDirection: () => currentDirection,\n    getAfterHeadDirection: () => afterHeadDirection,\n    getAfterTailDirection: () => afterTailDirection,\n    popTail: () => chain.popBack(),\n    popHead: () => chain.popFront(),\n    copyChainToArray: () => chain.copyToArray(),\n    reset: () => {\n      chain = Dequeue();\n      orientation = null;\n      currentDirection = null;\n    },\n    isInitialized: () =>\n      chain.size() > 0 &&\n      orientation !== null &&\n      currentDirection !== null &&\n      afterHeadDirection !== null &&\n      afterTailDirection !== null\n  };\n}\n","import { ORIENTATIONS } from '../../../../../../../Utility/constants/common';\nimport Queue from '../../../../../../../Utility/dataStructures/Queue';\nimport { areCoordinatesEqual } from '../../../../../../../Utility/utils/coordinatesUtils';\nimport Chain from '../Chain';\n\n/**\n * Initializes a ChainManager for strategically processing and utilizing the Chain structure.\n *\n * @param {Object} detail Initialization dependencies.\n * @returns {Object} Interface for strategically utilizing the Chain.\n */\nexport const ChainManager = ({\n  validateFn,\n  sumCoordinates,\n  getOpenMovesAround,\n  getHighestProbabilityFromMoves,\n  hitsManager\n}) => {\n  const currentChain = { chain: Chain() };\n\n  const startNewChainAt = Queue();\n\n  const startNewEmptyChain = () => (currentChain.chain = Chain());\n\n  const startNewChainFromUnresolved = () => (currentChain.chain = Chain(startNewChainAt.dequeue()));\n\n  const getOppositeOrientation = (orientation) =>\n    orientation === ORIENTATIONS.VERTICAL ? ORIENTATIONS.HORIZONTAL : ORIENTATIONS.VERTICAL;\n\n  const getAfterTail = () =>\n    sumCoordinates(currentChain.chain.peekTail(), currentChain.chain.getAfterTailDirection());\n\n  const getAfterHead = () =>\n    sumCoordinates(currentChain.chain.peekHead(), currentChain.chain.getAfterHeadDirection());\n\n  /**\n   * Utilizes known unresolved hits to ensure they're resolved.\n   * Takes unresolved hits from the current chain and initializes a new chain at each hit with a flipped orientation.\n   *\n   * @param {Array} unresolvedHits Array of coordinates that represent unresolved hits.\n   */\n  const handleUnresolvedChain = (unresolvedHits) => {\n    if (!unresolvedHits || unresolvedHits.length === 0) return null;\n    const oppositeOrientation = getOppositeOrientation(currentChain.chain.getOrientation());\n    unresolvedHits.forEach((hit) => {\n      hitsManager.addUnresolvedHit(hit);\n      startNewChainAt.enqueue({ coordinates: hit, startingOrientation: oppositeOrientation });\n    });\n    startNewChainFromUnresolved();\n  };\n\n  /**\n   * Resolves hits within the chain and passes the rest to handleUnresolvedChain.\n   *\n   * @param {number[]} lastHit Last successful hit in the chain.\n   * @param {number} numberOfHitsToResolve\n   */\n  const resolvePartOfChain = (lastHit, numberOfHitsToResolve) => {\n    const unresolvedHits = [];\n    if (areCoordinatesEqual(lastHit, currentChain.chain.peekTail())) {\n      for (let i = 0; i < numberOfHitsToResolve; i++) {\n        hitsManager.resolveHit(currentChain.chain.popTail());\n      }\n    } else if (areCoordinatesEqual(lastHit, currentChain.chain.peekHead())) {\n      for (let i = 0; i < numberOfHitsToResolve; i++) {\n        hitsManager.resolveHit(currentChain.chain.popHead());\n      }\n    } else throw new Error(`lastHit: ${lastHit} is not equal to head or tail end of chain.`);\n    while (!currentChain.chain.isEmpty()) unresolvedHits.push(currentChain.chain.popTail());\n    handleUnresolvedChain(unresolvedHits);\n  };\n\n  /**\n   * Resolves the entire current chain.\n   */\n  const resolveCurrentChain = () => {\n    while (!currentChain.chain.isEmpty()) hitsManager.resolveHit(currentChain.chain.popTail());\n    if (!startNewChainAt.isEmpty()) startNewChainFromUnresolved();\n    else startNewEmptyChain();\n  };\n\n  /**\n   * Provides coordinates to continue the chain linearly.\n   *\n   * @returns {number[]|null} Coordinates after head or tail of chain or null if none are valid.\n   */\n  const tryLinearContinuation = () => {\n    const afterTail = getAfterTail();\n    if (validateFn(afterTail)) return afterTail;\n    const afterHead = getAfterHead();\n    if (validateFn(afterHead)) return afterHead;\n    return null;\n  };\n\n  /**\n   * Processes cells around the only coordinate-pair in the chain.\n   * Tests the found moves and returns the pair with the highest probability score.\n   *\n   * @returns {number[]|null} Coordinate pair to attack.\n   */\n  const tryAroundFirstInChain = () => {\n    const openAroundHead = getOpenMovesAround(currentChain.chain.peekHead());\n    if (openAroundHead && openAroundHead.length > 0) {\n      return getHighestProbabilityFromMoves(openAroundHead);\n    } else return null;\n  };\n\n  /**\n   * Analyzes the current Chain and returns the cell most-likely to result in a successful hit.\n   *\n   * @returns {number[]} Coordinates to send attack to.\n   */\n  const getNextInChain = () => {\n    if (currentChain.chain.isEmpty()) {\n      if (!startNewChainAt.isEmpty()) startNewChainFromUnresolved();\n      else return null;\n    }\n    if (currentChain.chain.size() === 1) {\n      if (currentChain.chain.isInitialized()) return tryLinearContinuation();\n      const bestAroundHead = tryAroundFirstInChain();\n      if (bestAroundHead) return bestAroundHead;\n    }\n    const nextMove = tryLinearContinuation();\n    if (!nextMove) handleUnresolvedChain(currentChain.chain.copyChainToArray());\n    return tryLinearContinuation();\n  };\n\n  return {\n    getNextInChain,\n    resolvePartOfChain,\n    getChainSize: () => currentChain.chain.size(),\n    getChainOrientation: () => currentChain.chain.getOrientation(),\n    pushToCurrentChain: (coordinates) => currentChain.chain.addCoordinates(coordinates),\n    peekTail: () => currentChain.chain.peekTail(),\n    peekHead: () => currentChain.chain.peekHead(),\n    getCurrentChainArray: () => currentChain.chain.copyChainToArray(),\n    resolveCurrentChain,\n    resolveAllChains: () => {\n      startNewEmptyChain();\n      while (!startNewChainAt.isEmpty()) startNewChainAt.dequeue();\n    },\n    handleUnresolvedChain\n  };\n};\n","import { weightedCanShipFit } from './Core/weightedCanShipFit';\nimport { calculateAdjacencyScore } from './Core/calculateAdjacencyScore';\nexport const ProbabilityMap = ({\n  initialGrid,\n  gridHelpers,\n  getOrientationDirections,\n  isHitResolved,\n  getSmallestShipLength,\n  validateFn\n}) => {\n  const ILLOGICAL_CELL_VALUE = -1;\n  const CAN_FIT_VALUE = 0.25;\n\n  const probabilityMap = initialGrid.map((row) => row.map(() => 0));\n  let smallestShipLength = getSmallestShipLength();\n\n  const { getCellStatusAt, getCellInADirection, getCellsInAllDirections, getOpenMovesAround } =\n    gridHelpers;\n\n  const round = (score) => Math.round(score * 100) / 100;\n\n  const getFitScore = (move) =>\n    weightedCanShipFit({\n      getCellStatusAt,\n      getCellInADirection,\n      getOrientationDirections,\n      isHitResolved,\n      start: move,\n      smallestShipLength\n    });\n\n  const getAdjacencyScore = (move) =>\n    calculateAdjacencyScore(move, {\n      getCellsInAllDirections,\n      getCellStatusAt,\n      isHitResolved\n    });\n\n  const calculateProbabilityScore = (coordinates) => {\n    if (!validateFn(coordinates)) return ILLOGICAL_CELL_VALUE;\n    let score = CAN_FIT_VALUE;\n    score += getFitScore(coordinates);\n    score += getAdjacencyScore(coordinates);\n    score = round(score);\n    return score;\n  };\n\n  const assessCellProbabilities = (grid) => {\n    grid.forEach((row, rowIndex) => {\n      row.forEach((col, colIndex) => {\n        const coordinates = [rowIndex, colIndex];\n        const score = calculateProbabilityScore(coordinates);\n        probabilityMap[rowIndex][colIndex] = score;\n      });\n    });\n  };\n\n  const getCellWithHighestProbability = () => {\n    let highestScore = -Infinity;\n    const highestScoringCells = [];\n    probabilityMap.forEach((row, rowIndex) => {\n      row.forEach((score, colIndex) => {\n        const coordinates = [rowIndex, colIndex];\n        if (score !== ILLOGICAL_CELL_VALUE && score > highestScore) {\n          highestScore = score;\n          highestScoringCells.length = 0;\n          highestScoringCells.push(coordinates);\n        } else if (score === highestScore) highestScoringCells.push(coordinates);\n      });\n    });\n    if (highestScoringCells.length > 1) {\n      return highestScoringCells[Math.floor(Math.random() * highestScoringCells.length)];\n    }\n    return highestScoringCells.length > 0 ? highestScoringCells[0] : null;\n  };\n\n  const getHighestProbabilityFromMoves = (moves) =>\n    moves\n      .map((move) => ({\n        move,\n        score: calculateProbabilityScore(move)\n      }))\n      .filter((result) => result.score >= 0)\n      .sort((a, b) => b.score - a.score)[0].move;\n\n  const getHitWithHighestSurroundingProbability = (hits) => {\n    const hitsAndOpen = [];\n    hits.forEach((hit) => {\n      const openAround = getOpenMovesAround(hit);\n      const score = openAround.reduce(\n        (acc, openCell) => acc + calculateProbabilityScore(openCell),\n        0\n      );\n      hitsAndOpen.push({ cell: hit, score });\n    });\n    hitsAndOpen.sort((a, b) => b.score - a.score);\n    return hitsAndOpen[0].cell;\n  };\n\n  return {\n    getCellWithHighestProbability,\n    calculateProbabilityScore,\n    getHighestProbabilityFromMoves,\n    getHitWithHighestSurroundingProbability,\n    updateState: (grid, shipSunk = false) => {\n      if (shipSunk) smallestShipLength = getSmallestShipLength();\n      assessCellProbabilities(grid);\n    }\n  };\n};\n","import { STATUSES, ORIENTATIONS } from '../../../../../../../../../Utility/constants/common';\nconst MAX_ORIENTATIONS = 2;\n\n/**\n * Calculates the 'fitScore' at a target coordinate pair.\n * Score increases for each orientation that the opponents smallest ship can fit in.\n *\n * @param {Object} dependencies\n * @returns\n */\nexport const weightedCanShipFit = ({\n  getCellStatusAt,\n  getCellInADirection,\n  getOrientationDirections,\n  isHitResolved,\n  start,\n  smallestShipLength\n}) => {\n  if (getCellStatusAt(start) !== STATUSES.UNEXPLORED) return false;\n  let orientationScore = 0;\n  const orientations = Object.values(ORIENTATIONS);\n  for (const orientation of orientations) {\n    let canFit = false;\n    const directions = Object.values(getOrientationDirections(orientation));\n    for (const direction of directions) {\n      let totalSpace = 1; // 1 to account for starting cell.\n      let nextCell = getCellInADirection(start, direction);\n      while (\n        nextCell &&\n        getCellStatusAt(nextCell) !== STATUSES.MISS &&\n        !(getCellStatusAt(nextCell) === STATUSES.HIT && isHitResolved(nextCell))\n      ) {\n        totalSpace += 1;\n        if (totalSpace >= smallestShipLength) {\n          canFit = true;\n          break;\n        }\n        nextCell = getCellInADirection(nextCell, direction);\n      }\n    }\n    if (canFit) orientationScore += 1;\n  }\n  return orientationScore / MAX_ORIENTATIONS;\n};\n","import {\n  sumCoordinates,\n  getDelta\n} from '../../../../../../../../../Utility/utils/coordinatesUtils';\nimport { STATUSES } from '../../../../../../../../../Utility/constants/common';\n\nconst MISS_VALUE = 0.2;\nconst UNRESOLVED_HIT_VALUE = 2;\nconst BASE_VALUE = 0.33;\nconst NUMBER_OF_ADJACENT_DIRECTIONS = 4;\n\n/**\n * Calculates the likeliness that a move is to result in a hit based on known adjacent cell data.\n *\n * @param {number[]} move Coordinates to analyze around.\n * @param {Object} dependencies Functions to analyze around the move.\n * @returns {number} Adjacency score of the move.\n */\nexport const calculateAdjacencyScore = (\n  move,\n  { getCellsInAllDirections, getCellStatusAt, isHitResolved }\n) => {\n  let score = 0;\n\n  /**\n   * Calculates score based on consecutive unresolved hits in a direction.\n   *\n   * @param {number[]} cell Coordinates of first unresolved hit.\n   * @returns {number} Score based on consecutive unresolved hits.\n   */\n  const getUnresolvedHitsScore = (cell) => {\n    let unresolvedHitsScore = 0;\n    const direction = getDelta(move, cell);\n    let currentCell = cell;\n    let currentCellStatus = getCellStatusAt(currentCell);\n    while (currentCellStatus && currentCellStatus === STATUSES.HIT && !isHitResolved(currentCell)) {\n      unresolvedHitsScore += UNRESOLVED_HIT_VALUE;\n      currentCell = sumCoordinates(currentCell, direction);\n      currentCellStatus = getCellStatusAt(currentCell);\n    }\n    return unresolvedHitsScore;\n  };\n  const adjacentCells = getCellsInAllDirections(move);\n  score = (NUMBER_OF_ADJACENT_DIRECTIONS - adjacentCells.length) * BASE_VALUE;\n  adjacentCells.forEach((cell) => {\n    const cellStatus = getCellStatusAt(cell);\n    if (cellStatus === STATUSES.MISS) score -= MISS_VALUE;\n    else if (cellStatus === STATUSES.HIT && !isHitResolved(cell)) {\n      score += getUnresolvedHitsScore(cell);\n    } else score += BASE_VALUE;\n  });\n  return score / NUMBER_OF_ADJACENT_DIRECTIONS;\n};\n","import {\n  getCellInADirection,\n  getCellsInAllDirections,\n  getCellStatusAt,\n  getOpenMovesAround,\n  getTypeOfCellInADirection,\n  copyGrid,\n  isAtEdge\n} from '../../../../../../../Utility/utils/gridUtils.js';\nimport {\n  sumCoordinates,\n  getPerpendicularCoordinates,\n  getOrientationDirections\n} from '../../../../../../../Utility/utils/coordinatesUtils.js';\n\nimport { STATUSES } from '../../../../../../../Utility/constants/common.js';\nimport { canShipFit as checkCanShipFit } from './canShipFit.js';\nimport { HitsManager } from '../Managers/HitsManager.js';\nimport { OpponentFleetManager } from '../Managers/OpponentFleetManager.js';\nimport { ChainManager } from '../Managers/ChainManager.js';\n\nimport { ProbabilityMap } from './Probability/ProbabilityMap';\n\nimport { processMoveResult } from '../processMoveResult';\n\nconst initializeGridHelpers = (trackingGrid) => {\n  const inGrid =\n    (fn) =>\n    (...args) =>\n      fn(trackingGrid, ...args);\n\n  const inGridOfType =\n    (fn, type) =>\n    (...args) =>\n      fn({ grid: trackingGrid, ...args, type });\n  return {\n    getCellStatusAt: inGrid(getCellStatusAt),\n    getCellInADirection: inGrid(getCellInADirection),\n    getOpenMovesAround: inGrid(getOpenMovesAround),\n    getCellsInAllDirections: inGrid(getCellsInAllDirections),\n    getOpenMovesInADirection: inGridOfType(getTypeOfCellInADirection, STATUSES.UNEXPLORED),\n    getConsecutiveHitsInADirection: inGridOfType(getTypeOfCellInADirection, STATUSES.HIT),\n    copyGrid: inGrid(copyGrid),\n    isAtEdge: inGrid(isAtEdge)\n  };\n};\n\nexport const initializeHelpers = ({ trackingGrid, fleetData }) => {\n  const fleetManager = OpponentFleetManager(fleetData);\n  const hitsManager = HitsManager();\n  const gridHelpers = initializeGridHelpers(trackingGrid, hitsManager.isHitResolved);\n  const validateMove = (move) =>\n    move && gridHelpers.getCellStatusAt(move) === STATUSES.UNEXPLORED && canShipFit(move);\n\n  const canShipFit = (move) =>\n    checkCanShipFit({\n      getCellStatusAt: gridHelpers.getCellStatusAt,\n      getCellInADirection: gridHelpers.getCellInADirection,\n      getOrientationDirections,\n      isHitResolved: hitsManager.isHitResolved,\n      start: move,\n      smallestShipLength: fleetManager.getSmallestAliveOpponentShipLength()\n    });\n\n  const probabilityMap = ProbabilityMap({\n    initialGrid: trackingGrid,\n    canShipFit,\n    gridHelpers,\n    getOrientationDirections,\n    isHitResolved: hitsManager.isHitResolved,\n    getLiveOpponentShipLengths: fleetManager.getLiveOpponentShipLengths,\n    getSmallestShipLength: fleetManager.getSmallestAliveOpponentShipLength,\n    validateFn: validateMove\n  });\n  const chainManager = ChainManager({\n    validateFn: validateMove,\n    sumCoordinates,\n    getPerpendicularCoordinates,\n    getOpenMovesAround: gridHelpers.getOpenMovesAround,\n    getHighestProbabilityFromMoves: probabilityMap.getHighestProbabilityFromMoves,\n    getHitWithHighestSurroundingProbability: probabilityMap.getHitWithHighestSurroundingProbability,\n    hitsManager\n  });\n\n  return {\n    fleetManager,\n    gridHelpers,\n    hitsManager,\n    chainManager,\n    probabilityMap,\n    validateMove\n  };\n};\nexport const initializeProcessMoveResult = (initData) => {\n  const {\n    hitsManager,\n    chainManager,\n    copyGrid,\n    updateProbabilityMap,\n    opponentShipSunk,\n    getLastSunkLength,\n    areAllOpponentShipsSunk\n  } = initData;\n  const {\n    setLastHit,\n    addHit,\n    addUnresolvedHit,\n    addSunk,\n    areHitsEqualToSunk,\n    resolveAllUnresolved,\n    resolveHit\n  } = hitsManager;\n  const {\n    resolvePartOfChain,\n    getChainSize,\n    pushToCurrentChain,\n    resolveCurrentChain,\n    resolveAllChains,\n    handleUnresolvedChain\n  } = chainManager;\n  return processMoveResult({\n    setLastHit,\n    addHit,\n    pushToCurrentChain,\n    addUnresolvedHit,\n    addSunk,\n    getLastSunkLength,\n    areHitsEqualToSunk,\n    resolveAllUnresolved,\n    resolveHit,\n    updateProbabilityMap,\n    copyGrid,\n    opponentShipSunk,\n    resolveCurrentChain,\n    resolvePartOfChain,\n    resolveAllChains,\n    getChainSize,\n    handleUnresolvedChain,\n    areAllOpponentShipsSunk\n  });\n};\n","export const OpponentFleetManager = (gameFleet) => {\n  const getFleetMap = (fleet) => new Map(fleet.map((ship) => [ship.id, ship.length]));\n  const opponentFleetTracker = getFleetMap(gameFleet);\n  const lastShipSunk = { id: null, length: null };\n  return {\n    opponentShipSunk: (sunkShipID) => {\n      const sunkShipLength = opponentFleetTracker.get(sunkShipID);\n      if (sunkShipLength) {\n        lastShipSunk.id = sunkShipID;\n        lastShipSunk.length = sunkShipLength;\n      }\n      opponentFleetTracker.delete(sunkShipID);\n    },\n    getLastSunkLength: () => lastShipSunk.length,\n    getSmallestAliveOpponentShipLength: () =>\n      [...opponentFleetTracker.values()].reduce(\n        (acc, value) => (value < acc ? value : acc),\n        Number.MAX_SAFE_INTEGER\n      ),\n    getLiveOpponentShipLengths: () => [...opponentFleetTracker.values()],\n    getNumberOfOpponentShipsLeft: () => opponentFleetTracker.size,\n    areAllOpponentShipsSunk: () => opponentFleetTracker.size === 0,\n    reset: () => {\n      opponentFleetTracker.clear();\n      lastShipSunk.id = null;\n      lastShipSunk.length = null;\n    }\n  };\n};\n","import { validateCoordinates } from '../../../../../../../Utility/utils/validationUtils';\n/**\n * Initializes a HitsManagerFactory for managing hit data in a game of Battleship.\n * Tracks hits and sunken ships, providing methods to record, resolve, and query this data.\n *\n * @returns {object} Object encapsulating hit management functionality.\n */\nexport const HitsManager = () => {\n  let lastHit = null;\n  let totalHits = 0;\n  let totalSunk = 0;\n  const unresolvedHits = new Set();\n  const resolvedHits = new Set();\n\n  /**\n   * Converts a coordinate pair [x,y] into a string key 'x,y' to be used as unique identifiers.\n   * Used to efficiently store and retrieve coordinates in Sets.\n   *\n   * @param {array[integer]} hit Coordinate pair ([x,y] format) to be converted.\n   * @returns {string|null} String key or null if coordinates are invalid.\n   */\n  const hitKey = (hit) => {\n    try {\n      validateCoordinates(hit);\n      return `${hit[0]},${hit[1]}`;\n    } catch (error) {\n      console.error(`Invalid Hit Coordinates In HitsManager: ${error.message}`);\n      return null;\n    }\n  };\n  /**\n   * Transforms a Set of coordinate keys into an array of coordinate pairs [x,y] for processing.\n   *\n   * @param {Set} set Set Object to convert.\n   * @returns {array[array[integer]]} Array of coordinates.\n   */\n  const setToArray = (set) => [...set].map((key) => key.split(',').map(Number));\n\n  /**\n   * Determines whether a given hit has been resolved (associated with a sunken ship).\n   *\n   * @param {array[integer]} hit Coordinate pair to check.\n   * @returns {boolean} True if hit is resolved, false otherwise.\n   */\n  const isHitResolved = (hit) => resolvedHits.has(hitKey(hit));\n\n  /**\n   * Stores the coordinates of an unresolved hit (not associated with a sunken ship).\n   *\n   * @param {array[integer]} hit Coordinate pair representing hit cell.\n   * @returns {void}\n   */\n  const addUnresolvedHit = (hit) => {\n    const key = hitKey(hit);\n    if (key && !unresolvedHits.has(key) && !resolvedHits.has(key)) unresolvedHits.add(key);\n  };\n\n  /**\n   * Marks a hit as resolved (linked to a sunken ship) and removes it from the unresolved set.\n   * Can process either a new hit (array) or an existing unresolved hit (string key).\n   *\n   * @param {array[integer]} hit Coordinate pair representing hit cell.\n   * @returns {void}\n   */\n  const resolveHit = (hit) => {\n    const matchKey = /^\\d+,\\d+$/;\n    let key;\n    if (typeof hit === 'string' && matchKey.test(hit)) key = hit;\n    else if (Array.isArray(hit)) key = hitKey(hit);\n    if (key && unresolvedHits.has(key)) {\n      unresolvedHits.delete(key);\n      resolvedHits.add(key);\n    }\n  };\n\n  /**\n   * Evaluates if the total number of hits equals the total length of sunken ships.\n   * Indicates whether all current hits have been resolved.\n   *\n   * @returns {boolean} True if hits are equal to sunk, false otherwise.\n   */\n  const areHitsEqualToSunk = () => totalHits === totalSunk;\n\n  const resolveAllUnresolved = () => [...unresolvedHits].forEach(resolveHit);\n  const getUnresolvedHits = () => setToArray(unresolvedHits);\n  const getResolvedHits = () => setToArray(resolvedHits);\n\n  const setLastHit = (hit) => (lastHit = hit);\n  const getLastHit = () => lastHit;\n\n  const addHit = () => totalHits++;\n  const getHits = () => totalHits;\n\n  const addSunk = (sunkShipLength) => (totalSunk += sunkShipLength);\n  const getSunk = () => totalSunk;\n\n  return {\n    resolveHit,\n    resolveAllUnresolved,\n    isHitResolved,\n    addUnresolvedHit,\n    setLastHit,\n    getLastHit,\n    addHit,\n    addSunk,\n    getHits,\n    getSunk,\n    areHitsEqualToSunk,\n    getResolvedHits,\n    getUnresolvedHits,\n    hasUnresolvedHits: () => unresolvedHits.size > 0\n  };\n};\n","import { STATUSES, ORIENTATIONS } from '../../../../../../../Utility/constants/common';\n\nexport const canShipFit = ({\n  getCellStatusAt,\n  getCellInADirection,\n  getOrientationDirections,\n  isHitResolved,\n  start,\n  smallestShipLength\n}) => {\n  if (getCellStatusAt(start) !== STATUSES.UNEXPLORED) return false;\n  const orientations = Object.values(ORIENTATIONS);\n  for (const orientation of orientations) {\n    let totalSpace = 1; // 1 to account for starting cell.\n    const directions = Object.values(getOrientationDirections(orientation));\n    for (const direction of directions) {\n      let nextCell = getCellInADirection(start, direction);\n      while (\n        nextCell &&\n        getCellStatusAt(nextCell) !== STATUSES.MISS &&\n        !(getCellStatusAt(nextCell) === STATUSES.HIT && isHitResolved(nextCell))\n      ) {\n        totalSpace += 1;\n        if (totalSpace >= smallestShipLength) return true;\n        nextCell = getCellInADirection(nextCell, direction);\n      }\n    }\n  }\n  return false;\n};\n","import { STATUSES } from '../../../../../../Utility/constants/common';\n\nexport const processMoveResult = ({\n  setLastHit,\n  addHit,\n  pushToCurrentChain,\n  addUnresolvedHit,\n  addSunk,\n  getLastSunkLength,\n  areHitsEqualToSunk,\n  resolveAllUnresolved,\n  updateProbabilityMap,\n  copyGrid,\n  opponentShipSunk,\n  areAllOpponentShipsSunk,\n  resolveCurrentChain,\n  resolvePartOfChain,\n  resolveAllChains,\n  getChainSize,\n  handleUnresolvedChain\n}) =>\n  function processMoveResult(resultData) {\n    const { coordinates, result } = resultData;\n    if (result === STATUSES.MISS) updateProbabilityMap(copyGrid(), false);\n    else if (result === STATUSES.HIT || result === STATUSES.SHIP_SUNK) {\n      setLastHit(coordinates);\n      addHit();\n      pushToCurrentChain(coordinates);\n      addUnresolvedHit(coordinates);\n      if (result === STATUSES.SHIP_SUNK) {\n        opponentShipSunk(resultData.id);\n        const sunkLength = getLastSunkLength();\n        const chainSize = getChainSize();\n        addSunk(sunkLength);\n        if (areHitsEqualToSunk()) {\n          resolveAllUnresolved();\n          resolveAllChains();\n        } else if (areAllOpponentShipsSunk()) return;\n        else if (chainSize === sunkLength) resolveCurrentChain();\n        else if (chainSize > sunkLength) resolvePartOfChain(coordinates, sunkLength);\n        else handleUnresolvedChain();\n        updateProbabilityMap(copyGrid(), true);\n      } else updateProbabilityMap(copyGrid(), false);\n    }\n  };\n","import { STATUSES } from '../../../../Utility/constants/common';\nimport { convertToDisplayFormat } from '../../../../Utility/utils/coordinatesUtils';\nimport { IntermediateMoveStrategy } from './Strategies/IntermediateMoveStrategy';\nimport AdvancedMoveStrategy from './Strategies/AdvancedMoveStrategy';\nexport const AiCombatManager = ({ model, view, letterAxis, attackDelay }) => {\n  const id = model.properties.id;\n  const isAllShipsSunk = () => model.fleet.isAllShipsSunk();\n  const processIncomingAttack = (coordinates) => model.mainGrid.processIncomingAttack(coordinates);\n\n  const popRandomMove = model.moves.popRandomMove;\n  const popMove = model.moves.popMove;\n  const trackingGrid = model.trackingGrid.get();\n  const setTrackingGridCellStatus = model.trackingGrid.setCellStatus;\n\n  const baseProcessResult = (coordinates, result) => {\n    setTrackingGridCellStatus(coordinates, result);\n    const [row, col] = coordinates;\n    const displayCoordinates = convertToDisplayFormat(row, col, letterAxis);\n    view.trackingGrid.displayResult(displayCoordinates, result);\n  };\n\n  const getAttackStrategy = (difficulty) => {\n    switch (+difficulty) {\n      case 0:\n        return {\n          getNextMove: popRandomMove,\n          processResult: ({ data }) => {\n            baseProcessResult(data.coordinates, data.result);\n            send.endTurn();\n          }\n        };\n      case 1: {\n        const { getNextMove, processMoveResult } = IntermediateMoveStrategy({\n          trackingGrid,\n          popMove,\n          popRandomMove\n        });\n        return {\n          getNextMove,\n          processResult: ({ data }) => {\n            const { coordinates, result } = data;\n            baseProcessResult(coordinates, result);\n            processMoveResult(coordinates, result);\n            send.endTurn();\n          }\n        };\n      }\n      case 2: {\n        const { getNextMove, processMoveResult } = AdvancedMoveStrategy({\n          trackingGrid,\n          popRandomMove,\n          fleetData: model.fleet.getData()\n        });\n        return {\n          getNextMove,\n          processResult: ({ data }) => {\n            const { coordinates, result } = data;\n            baseProcessResult(coordinates, result);\n            processMoveResult(data);\n            send.endTurn();\n          }\n        };\n      }\n    }\n  };\n\n  const send = {\n    attack: () => {},\n    result: () => {},\n    lost: () => {},\n    endTurn: () => {},\n    reset: () => {\n      send.attack = () => {};\n      send.result = () => {};\n      send.lost = () => {};\n      send.endTurn = () => {};\n    }\n  };\n  const incomingAttack = {\n    handleShipSunk: (shipId) => {\n      view.fleet.setShipSunk(shipId);\n      if (isAllShipsSunk()) send.lost({ id });\n    },\n    processResultFromGrid: (cell) => {\n      const ship = model.fleet.getShip(cell.id);\n      ship.hit();\n      if (ship.isSunk()) incomingAttack.handleShipSunk(ship.id);\n    },\n    handleRequest: ({ data }) => {\n      const result = processIncomingAttack(data);\n      const { coordinates, cell } = result;\n      if (cell.status === STATUSES.HIT) incomingAttack.processResultFromGrid(cell);\n      send.result({ coordinates, result: cell.status });\n    }\n  };\n  const outgoingAttack = {\n    getNextMove: () => {},\n    processIncomingResult: () => {},\n    send: (move) => () => setTimeout(() => send.attack(move), attackDelay),\n    init: (strategy) => {\n      outgoingAttack.getNextMove = strategy.getNextMove;\n      outgoingAttack.processIncomingResult = strategy.processResult;\n      if (strategy.onShipSunk) outgoingAttack.onShipSunk = strategy.onShipSunk;\n    },\n    sendRequest: () => {\n      if (isAllShipsSunk()) return;\n      const move = outgoingAttack.getNextMove();\n      setTimeout(() => send.attack(move), attackDelay);\n    },\n    handleIncomingResultRequest: (data) => outgoingAttack.processIncomingResult(data)\n  };\n\n  const getHandlers = () => ({\n    incomingAttackHandler: incomingAttack.handleRequest,\n    incomingResultHandler: outgoingAttack.handleIncomingResultRequest\n  });\n  const initializeCombat = (initData) => {\n    const { sendAttack, sendResult, sendLost, endTurnMethod } = initData;\n    send.attack = sendAttack;\n    send.result = sendResult;\n    send.lost = sendLost;\n    send.endTurn = endTurnMethod;\n    model.moves.initialize();\n    outgoingAttack.init(getAttackStrategy(model.properties.getDifficulty()));\n  };\n\n  const startTurn = () => outgoingAttack.sendRequest();\n  const reset = () => {\n    send.reset();\n    model.moves.reset();\n  };\n\n  return { initializeCombat, startTurn, getHandlers, reset };\n};\n","import { MoveStrategy } from './AdvancedCore/MoveStrategy.js';\nimport {\n  initializeHelpers,\n  initializeProcessMoveResult\n} from './AdvancedCore/Utils/initializers.js';\n\n/**\n * Provides AI with an advanced attack and result processing strategy.\n * Utilizes two primary methods for strategic game play:\n *  - Probability map for finding most cell that's most likely to result in a hit.\n *  - Chain for tracking consecutive hits to ensure found ships are sunk efficiently.\n *\n * @param {Object} detail External initialization dependencies.\n * @param {number[]} trackingGrid 2D array for tracking attacks and results.\n * @param {function} popRandomMove Function for retrieving random move from availableMoves.\n * @param {Object[]} fleetData Array of objects containing ship data.\n * @returns {Object} Interface for AI to utilize advanced strategy.\n */\nexport default function AdvancedMoveStrategy({ trackingGrid, popRandomMove, fleetData }) {\n  const helpers = initializeHelpers({ trackingGrid, fleetData });\n  const { fleetManager, gridHelpers, hitsManager, chainManager, probabilityMap, validateMove } =\n    helpers;\n\n  const findBestMove = MoveStrategy(validateMove);\n\n  const processMoveResult = initializeProcessMoveResult({\n    hitsManager,\n    chainManager,\n    copyGrid: gridHelpers.copyGrid,\n    updateProbabilityMap: probabilityMap.updateState,\n    opponentShipSunk: fleetManager.opponentShipSunk,\n    getLastSunkLength: fleetManager.getLastSunkLength,\n    areAllOpponentShipsSunk: fleetManager.areAllOpponentShipsSunk\n  });\n\n  const getNextMove = () =>\n    findBestMove(helpers.chainManager.getNextInChain, probabilityMap, popRandomMove);\n\n  return { getNextMove, processMoveResult };\n}\n","export const MoveStrategy = (validateFn) => {\n  const determineMoveStrategy = (getNextInChain, probabilityMap) => {\n    const nextInChain = getNextInChain();\n    if (nextInChain && nextInChain.length > 0) {\n      if (Array.isArray(nextInChain[0]))\n        return probabilityMap.getHighestProbabilityFromMoves(nextInChain);\n      else return nextInChain;\n    }\n    return probabilityMap.getCellWithHighestProbability();\n  };\n\n  const findBestMove = (getNextInChain, probabilityMap, getRandomMove) => {\n    const move = determineMoveStrategy(getNextInChain, probabilityMap);\n    if (move && validateFn(move)) return move;\n    return getRandomMove();\n  };\n\n  return findBestMove;\n};\n","import { AIModel } from './model/AIModel';\nimport { AIMainGridModel } from './components/MainGrid/AIMainGridModel';\nimport { AITrackingGridModel } from './components/TrackingGrid/AITrackingGridModel';\nimport { AIFleetModel } from './components/Fleet/AIFleetModel';\nimport { AIShipModel } from './components/Ship/AIShipModel';\nimport { AI_NAMES } from '../../Utility/constants/common';\n\nimport { AIView } from './AIView';\nimport { PlacementCoordinatesGenerator } from './Managers/Placement/PlacementCoordinatesGenerator';\n\nimport { AiCombatManager } from './Managers/Combat/AiCombatManager';\n\nexport const AIController = ({ id, difficulty, attackDelay, boardSettings, fleetData }) => {\n  const mainGridModel = AIMainGridModel(boardSettings.numberOfRows, boardSettings.numberOfCols);\n  const trackingGridModel = AITrackingGridModel(\n    boardSettings.numberOfRows,\n    boardSettings.numberOfCols\n  );\n  const letterAxis = boardSettings.letterAxis;\n  const fleetModel = AIFleetModel();\n  const shipNames = [];\n  fleetData.forEach((ship) => {\n    const shipModel = AIShipModel(ship.length, ship.name);\n    fleetModel.addMainShip(shipModel);\n    shipNames.push(shipModel.getName());\n  });\n  const model = AIModel({\n    aiName: AI_NAMES[difficulty],\n    id,\n    difficulty,\n    fleetModel,\n    mainGridModel,\n    trackingGridModel\n  });\n  const view = AIView(boardSettings, model.properties.getName(), shipNames);\n\n  const getAttackStrategy = () => model.moves.getRandomMove;\n  const sendAttack = getAttackStrategy();\n\n  const placeShips = () => {\n    const placementGenerator = PlacementCoordinatesGenerator(model.mainGrid.get());\n    const placements = placementGenerator.calculateRandomShipPlacements(model.fleet.getData());\n    placements.forEach(({ id, placement }) => {\n      model.mainGrid.place(id, placement[0], placement[placement.length - 1]);\n      model.fleet.setShipPlacementCoordinates(id, placement);\n    });\n  };\n\n  const board = {\n    id: model.properties.id,\n    name: model.properties.getName(),\n    provideTrackingGrid: () => view.trackingGrid.elements.getGrid(),\n    provideTrackingFleet: () => view.fleet.getTrackingFleet(),\n    placement: {\n      start: (handleFinalize) => {\n        placeShips();\n        if (!model.fleet.isAllShipsPlaced()) throw new Error('AI Error: Not all ships placed.');\n        else handleFinalize();\n      },\n      end: () => {}\n    },\n    combat: {\n      manager: null,\n      init: () => {\n        if (board.combat.manager) return;\n        board.combat.manager = AiCombatManager({ model, view, letterAxis, attackDelay });\n      },\n      start: ({ sendAttack, sendResult, sendLost, endTurnMethod }) => {\n        if (!board.combat.manager) throw new Error(`Ai Combat Manager Not initialized`);\n        board.combat.manager.initializeCombat({\n          sendAttack,\n          sendResult,\n          sendLost,\n          endTurnMethod\n        });\n      },\n      getHandlers: () => board.combat.manager.getHandlers(),\n      startTurn: () => board.combat.manager.startTurn(),\n      end: () => {\n        if (!board.combat.manager) return;\n        board.combat.manager.reset();\n        board.combat.manager = null;\n      }\n    },\n    reset: () => {\n      board.combat.end();\n      model.reset();\n    }\n  };\n\n  return {\n    getPlayerModel: () => model.properties,\n    isAllShipsSunk: () => model.fleet.isAllShipsSunk(),\n    sendAttack,\n    board\n  };\n};\n","import { STATUSES } from '../../../../Utility/constants/common';\n\nexport const AIMainGridModel = (numberOfRows = 10, numberOfCols = 10) => {\n  const createGrid = (rows, cols) =>\n    Array.from({ length: rows }, () =>\n      Array.from({ length: cols }, () => ({ status: STATUSES.EMPTY }))\n    );\n\n  let mainGrid = createGrid(numberOfRows, numberOfCols);\n\n  const isInBounds = (row, col) => row >= 0 && row < numberOfRows && col >= 0 && col < numberOfCols;\n\n  const getCell = (row, col) => (isInBounds(row, col) ? mainGrid[row][col] : null);\n\n  const setCellStatus = (row, col, status) => (mainGrid[row][col].status = status);\n\n  const isPlacementValid = (start, end) => {\n    for (let row = start[0]; row <= end[0]; ++row) {\n      for (let col = start[1]; col <= end[1]; ++col) {\n        if (!isInBounds(row, col) || getCell(row, col).status !== STATUSES.EMPTY) {\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n\n  const placeShip = (id, start, end) => {\n    if (isPlacementValid(start, end)) {\n      for (let row = start[0]; row <= end[0]; ++row) {\n        for (let col = start[1]; col <= end[1]; ++col) {\n          mainGrid[row][col] = { status: STATUSES.OCCUPIED, id };\n        }\n      }\n      return true;\n    }\n    return false;\n  };\n\n  const processIncomingAttack = (coordinates) => {\n    const [row, col] = coordinates;\n    const cell = getCell(row, col);\n    if (cell.status === STATUSES.OCCUPIED) setCellStatus(row, col, STATUSES.HIT);\n    else if (cell.status === STATUSES.EMPTY) setCellStatus(row, col, STATUSES.MISS);\n    return { coordinates, cell: getCell(row, col) };\n  };\n\n  const reset = () => (mainGrid = createGrid(numberOfRows, numberOfCols));\n\n  return {\n    placeShip,\n    processIncomingAttack,\n    reset,\n    getMainGrid: () => mainGrid\n  };\n};\n","import { STATUSES } from '../../../../Utility/constants/common';\n\nexport const AITrackingGridModel = (numberOfRows = 10, numberOfCols = 10) => {\n  const createGrid = (rows, cols) =>\n    Array.from({ length: rows }, () =>\n      Array.from({ length: cols }, () => ({ status: STATUSES.UNEXPLORED }))\n    );\n  let trackingGrid = createGrid(numberOfRows, numberOfCols);\n\n  const setCellStatus = (coordinates, status) => {\n    const [row, col] = coordinates;\n    trackingGrid[row][col].status = status;\n  };\n\n  return {\n    getTrackingGrid: () => trackingGrid,\n    setCellStatus,\n    reset: () => (trackingGrid = createGrid(numberOfRows, numberOfCols))\n  };\n};\n","export const AIFleetModel = () => {\n  const aiFleet = new Map();\n\n  return {\n    isAllShipsSunk: () => [...aiFleet.values()].every((ship) => ship.isSunk()),\n    isAllShipsPlaced: () => [...aiFleet.values()].every((ship) => ship.isPlaced()),\n    addMainShip: (shipModel) => aiFleet.set(shipModel.id, shipModel),\n    getShipFromAIFleet: (shipID) => aiFleet.get(shipID),\n    getAIFleetData: () =>\n      [...aiFleet.values()].map((shipModel) => ({\n        id: shipModel.id,\n        length: shipModel.length\n      })),\n    getTotalFleetLength: () =>\n      [...aiFleet.values()]\n        .map((shipModel) => shipModel.length)\n        .reduce((acc, value) => acc + value, 0),\n    setShipPlacementCoordinates: (id, placement) => {\n      const ship = aiFleet.get(id);\n      ship.setPlacedCoordinates(placement);\n    },\n    reset: () => aiFleet.clear()\n  };\n};\n","import { STATUSES } from '../../../../Utility/constants/common';\nimport { createSlug } from '../../../../Utility/utils/stringUtils';\n\nexport const AIShipModel = (shipLength, shipName) => {\n  const length = shipLength;\n  const id = createSlug(shipName);\n  const name = shipName;\n  const placedCoordinates = [];\n  let health = length;\n\n  return {\n    id,\n    length,\n    isShip: () => true,\n    isSunk: () => health <= 0,\n    isPlaced: () => placedCoordinates.length === length,\n    getName: () => name,\n    getHealth: () => health,\n    setPlacedCoordinates: (coordinates) => {\n      placedCoordinates.length = 0;\n      placedCoordinates.push(...coordinates);\n    },\n    hit: () => {\n      if (health > 0) health--;\n      return health > 0 ? STATUSES.HIT : STATUSES.SHIP_SUNK;\n    },\n    reset: () => {\n      placedCoordinates.length = 0;\n      health = length;\n    }\n  };\n};\n","import { AvailableMovesManager } from './AvailableMovesManager';\n\nexport const AIModel = ({\n  id,\n  aiName,\n  difficulty,\n  fleetModel,\n  mainGridModel,\n  trackingGridModel\n}) => {\n  const name = aiName;\n  const type = 'ai';\n  const mainGrid = mainGridModel;\n  const trackingGrid = trackingGridModel;\n  const fleet = fleetModel;\n  const movesManager = AvailableMovesManager();\n\n  return {\n    properties: {\n      id,\n      getType: () => type,\n      getName: () => name,\n      isAI: () => true,\n      getDifficulty: () => difficulty\n    },\n    mainGrid: {\n      get: () => mainGrid.getMainGrid(),\n      place: (id, start, end) => mainGrid.placeShip(id, start, end),\n      processIncomingAttack: (coordinates) => mainGrid.processIncomingAttack(coordinates)\n    },\n    trackingGrid: {\n      get: () => trackingGrid.getTrackingGrid(),\n      setCellStatus: (coordinates, result) => trackingGrid.setCellStatus(coordinates, result)\n    },\n    fleet: {\n      getData: () => fleet.getAIFleetData(),\n      getShip: (id) => fleet.getShipFromAIFleet(id),\n      setShipPlacementCoordinates: (id, coordinates) =>\n        fleet.setShipPlacementCoordinates(id, coordinates),\n      isAllShipsSunk: () => fleet.isAllShipsSunk(),\n      isAllShipsPlaced: () => fleet.isAllShipsPlaced()\n    },\n    moves: {\n      initialize: () => movesManager.initializeAvailableMoves(trackingGrid.getTrackingGrid()),\n      getAllAvailable: () => movesManager.getAvailableMoves(),\n      getMove: (coordinates) => movesManager.getMove(coordinates),\n      getTotalAvailable: () => movesManager.getTotalAvailableMoves(),\n      getRandomMove: () => movesManager.getRandomMove(),\n      popMove: (coordinates) => movesManager.popMove(coordinates),\n      popRandomMove: () => movesManager.popRandomMove(),\n      reset: () => movesManager.reset()\n    },\n    reset: () => {\n      trackingGrid.reset();\n      mainGrid.reset();\n      fleet.reset();\n      movesManager.reset();\n    }\n  };\n};\n","import { STATUSES } from '../../../Utility/constants/common';\nimport { popRandom, popFrom, getRandom, getFrom } from '../../../Utility/utils/arrayUtils';\nimport { areCoordinatesEqual } from '../../../Utility/utils/coordinatesUtils';\n\n/**\n * @module AvailableMovesManager\n * Module to manage AI's available moves for Battleship. It abstracts move-related logic,\n * facilitating maintainability and enhancement of the AI's decision-making processes.\n */\n\n/**\n * Factory function to create a manager for the AI's available moves.\n * This isolates move management for easy integration and upgrades in AI logic.\n * @function\n * @returns {object} An interface for managing and retrieving AI's available moves.\n */\nexport const AvailableMovesManager = () => {\n  const availableMoves = [];\n\n  /**\n   * Initializes the manager with coordinates of moves based on the game's current state.\n   * Identifies UNEXPLORED cells to populate the availableMoves storage array.\n   * @param {number[][]} grid - The game board matrix to scan for initial moves.\n   */\n  const initializeAvailableMoves = (grid) => {\n    availableMoves.length = 0;\n    grid.forEach((row, rowIndex) => {\n      row.forEach((col, colIndex) => {\n        if (col.status === STATUSES.UNEXPLORED) availableMoves.push([rowIndex, colIndex]);\n      });\n    });\n  };\n\n  const popRandomMove = () => popRandom(availableMoves);\n  const getRandomMove = () => getRandom(availableMoves);\n  const getIndex = (coordinates) =>\n    availableMoves.findIndex((move) => areCoordinatesEqual(move, coordinates));\n\n  /**\n   * Retrieves and removes a specific move.\n   * @param {number[]} coordinates - Move to retrieve [x, y].\n   * @returns {number[]|null} Requested move, or null if unavailable.\n   */\n  const popMove = (coordinates) => {\n    const index = getIndex(coordinates);\n    return index !== -1 ? popFrom(availableMoves, index) : null;\n  };\n\n  /**\n   * Retrieves a copy of a specific move.\n   * @param {number[]} coordinates - Move to retrieve [x, y].\n   * @returns {number[]|null} Requested move, or null if unavailable.\n   */\n  const getMove = (coordinates) => {\n    const index = getIndex(coordinates);\n    return index !== -1 ? getFrom(availableMoves, index) : null;\n  };\n\n  return {\n    initializeAvailableMoves,\n    getRandomMove,\n    getMove,\n    popRandomMove,\n    popMove,\n    getTotalAvailableMoves: () => availableMoves.length,\n    getAvailableMoves: () => availableMoves.map((move) => move.slice()),\n    reset: () => (availableMoves.length = 0)\n  };\n};\n","import { ORIENTATIONS, STATUSES } from '../../../../Utility/constants/common';\n/**\n * Provides the AI with a random set of coordinates to place ships at.\n *\n * @param {array[number]} gridArray 2D array representing a grid structure.\n * @returns {Object} Methods to generate coordinates and set the grid.\n */\nexport const PlacementCoordinatesGenerator = (gridArray) => {\n  const copyGrid = (grid) =>\n    grid.map((row) => Array.from({ length: row.length }).fill(STATUSES.EMPTY));\n  let grid = copyGrid(gridArray);\n  let rows = grid.length;\n  let cols = grid[0].length;\n  const refreshGrid = () => (grid = grid.map((row) => row.map(() => STATUSES.EMPTY)));\n\n  const getRandomOrientation = () => {\n    const orientationChoices = [ORIENTATIONS.VERTICAL, ORIENTATIONS.HORIZONTAL];\n    return orientationChoices[Math.floor(Math.random() * orientationChoices.length)];\n  };\n\n  const isPlacementValid = (coordinates) =>\n    coordinates.every(([x, y]) => x < rows && y < cols && grid[x][y] === STATUSES.EMPTY);\n\n  /**\n   * Calculates placement cells in the vertical orientation\n   *\n   * @param {number[]} startingCell Coordinates to start placement at.\n   * @param {number[]} endingCoordinate Coordinates to end placement at.\n   * @returns {array[number[]]} Array of coordinates.\n   */\n  const getVerticalPlacementCells = (startingCell, endingCoordinate) => {\n    const constant = startingCell[1];\n    const cells = [];\n    for (let i = startingCell[0]; i <= endingCoordinate; i++) cells.push([i, constant]);\n    return cells;\n  };\n  /**\n   * Calculates placement cells in the horizontal orientation\n   *\n   * @param {number[]} startingCell Coordinates to start placement at.\n   * @param {number[]} endingCoordinate Coordinates to end placement at.\n   * @returns {array[number[]]} Array of coordinates.\n   */\n  const getHorizontalPlacementCells = (startingCell, endingCoordinate) => {\n    const constant = startingCell[0];\n    const cells = [];\n    for (let i = startingCell[1]; i <= endingCoordinate; i++) cells.push([constant, i]);\n    return cells;\n  };\n\n  const getAllPlacementCells = (startingCell, orientation, shipLength) => {\n    if (orientation === ORIENTATIONS.VERTICAL)\n      return getVerticalPlacementCells(startingCell, startingCell[0] + shipLength - 1);\n    else return getHorizontalPlacementCells(startingCell, startingCell[1] + shipLength - 1);\n  };\n\n  const getRandomStartingCoordinates = () => {\n    const coordinates = [Math.floor(Math.random() * rows), Math.floor(Math.random() * cols)];\n    if (!(grid[coordinates[0]][coordinates[1]] === STATUSES.EMPTY))\n      return getRandomStartingCoordinates();\n    return coordinates;\n  };\n\n  const occupyCells = (cells) => {\n    cells.forEach((cell) => (grid[cell[0]][cell[1]] = STATUSES.OCCUPIED));\n  };\n\n  const getRandomShipPlacement = (shipLength) => {\n    let attempts = 0;\n    while (attempts < 250) {\n      const orientation = getRandomOrientation();\n      const startingCell = getRandomStartingCoordinates();\n      const cells = getAllPlacementCells(startingCell, orientation, shipLength);\n      if (isPlacementValid(cells)) {\n        occupyCells(cells);\n        return cells;\n      }\n      attempts++;\n    }\n    throw new Error(`Failed to place ship after ${attempts} attempts`);\n  };\n\n  /**\n   * Calculates a random placement coordinates for each ship within the fleet.\n   *\n   * @param {Object[]} fleet Array of ship data objects.\n   * @returns {array[Object[]]} Array of Ship id's and placement coordinates.\n   */\n  const calculateRandomShipPlacements = (fleet) => {\n    const placements = [];\n    fleet.forEach((ship) => {\n      const placement = getRandomShipPlacement(ship.length);\n      placements.push({ id: ship.id, placement });\n    });\n    refreshGrid();\n    return placements;\n  };\n\n  return {\n    calculateRandomShipPlacements,\n    updateGrid: (newGridArray) => {\n      grid = copyGrid(newGridArray);\n      rows = grid.length;\n      cols = grid[0].length;\n    }\n  };\n};\n","\n      import API from \"!../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../node_modules/css-loader/dist/cjs.js!./fleet-style.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../node_modules/css-loader/dist/cjs.js!./fleet-style.css\";\n       export default content && content.locals ? content.locals : undefined;\n","/**\n * Initializes a ManagerFactor for lazy-loading and accessing component managers.\n *\n * @param {Object} detail Manager details.\n * @param {Object} ManagerBuilder Function to initialize Manager.\n * @param {Object} initialDetails Data required to build the manager passed as arguments to the builder.\n * @param {Object} validateDetails Function to validate details for manager initialization.\n * @returns {Object} Interface for loading and accessing manager.\n */\nexport const ManagerFactory = ({ ManagerBuilder, initialDetails, validateDetails }) => {\n  let details = initialDetails;\n  let manager = null;\n  const setDetails = (newDetails) => {\n    if (manager) manager.end();\n    details = newDetails;\n    manager = ManagerBuilder(details);\n  };\n  const initialize = () => {\n    if (!validateDetails(details)) {\n      throw new Error(`Cannot initialize manager with invalid details.`);\n    }\n    if (manager) manager.end();\n    manager = ManagerBuilder(details);\n  };\n  const getManager = () => {\n    if (!manager) initialize();\n    return manager;\n  };\n  const reset = () => {\n    manager.end();\n    details = null;\n    manager = null;\n  };\n  return { getManager, setDetails, reset };\n};\n","import { ManagerFactory } from '../../../Utility/ManagerFactory';\nimport { FLEET_PLACEMENT_EVENTS } from '../common/fleetEvents';\n\n/**\n * Manages the placement of a fleet by coordinating individual ship placement managers.\n * Allows for the selection and placement of ships within a fleet, tracking the overall fleet placement state,\n * and emitting events related to fleet placement activities.\n *\n * @param {Object} detail Initialization detail.\n * @param {Array} detail.shipPlacementManagers Array of ShipPlacementManager instances.\n * @param {function} detail.createHandler Method for creating an EventHandler instance.\n * @param {function} detail.isAllShipsPlaced Method to determine if all ships have been placed.\n * @returns {Object} Interface providing fleet placement management capabilities.\n */\nconst FleetPlacementManager = ({ shipPlacementManagers, createHandler, isAllShipsPlaced }) => {\n  const selected = { ship: null, data: null };\n  /**\n   * Encapsulates orientation toggling event communication.\n   */\n  const orientation = {\n    on: (callback) =>\n      shipPlacementManagers.forEach((manager) => manager.onOrientationToggled(callback)),\n    off: (callback) =>\n      shipPlacementManagers.forEach((manager) => manager.offOrientationToggled(callback))\n  };\n\n  /**\n   * Encapsulates ship selection logic and event communication.\n   */\n  const select = {\n    handler: null,\n    getData: () => ({\n      ...selected.data,\n      rotateButton: selected.ship.getRotateButton()\n    }),\n    emitData: () => select.handler.emit(select.getData()),\n    execute: ({ data }) => {\n      allShipsPlaced.emitFalse();\n      const { id } = data;\n      shipPlacementManagers.forEach((manager, key) => {\n        if (key === id) {\n          manager.select();\n          selected.ship = manager;\n          selected.data = data;\n        } else if (manager.isSelected()) manager.deselect();\n      });\n      select.emitData();\n    },\n    on: (callback) => select.handler.on(callback),\n    off: (callback) => select.handler.off(callback),\n    start: () => (select.handler = createHandler(FLEET_PLACEMENT_EVENTS.SELECTED)),\n    end: () => select.handler.reset()\n  };\n\n  /**\n   * Executes placement logic on the selected ship.\n   *\n   * @param {Object} data Placement coordinates [x,y]\n   */\n  const place = ({ data }) => {\n    if (!selected.ship) throw new Error('Cannot placed unselected ship.');\n    selected.ship.place(data);\n    selected.ship = null;\n    selected.data = null;\n    if (isAllShipsPlaced()) allShipsPlaced.emitTrue();\n  };\n\n  /**\n   * Encapsulates event communication for all ships being placed.\n   */\n  const allShipsPlaced = {\n    handler: null,\n    emitTrue: () => allShipsPlaced.handler.emit(true),\n    emitFalse: () => allShipsPlaced.handler.emit(false),\n    start: () => (allShipsPlaced.handler = createHandler(FLEET_PLACEMENT_EVENTS.ALL_SHIPS_PLACED)),\n    on: (callback) => allShipsPlaced.handler.on(callback),\n    off: (callback) => allShipsPlaced.handler.off(callback),\n    end: () => allShipsPlaced.handler.reset()\n  };\n\n  /**\n   * Initializes all ship's placement managers and own event handlers.\n   */\n  const start = () => {\n    shipPlacementManagers.forEach((manager) => {\n      manager.start();\n      manager.onSelected(select.execute);\n    });\n    select.start();\n    allShipsPlaced.start();\n  };\n\n  /**\n   * Resets all ship's placement managers and own event handlers.\n   */\n  const end = () => {\n    shipPlacementManagers.forEach((manager) => manager.end());\n    select.end();\n    allShipsPlaced.end();\n  };\n  return {\n    isAllShipsPlaced,\n    start,\n    end,\n    select: () => select.execute(),\n    place: (coordinates) => place(coordinates),\n    onOrientationToggled: (callback) => orientation.on(callback),\n    offOrientationToggled: (callback) => orientation.off(callback),\n    onSelected: (callback) => select.on(callback),\n    offSelected: (callback) => select.off(callback),\n    onAllShipsPlaced: (callback) => allShipsPlaced.on(callback),\n    offAllShipsPlaced: (callback) => allShipsPlaced.off(callback)\n  };\n};\n\nexport const PlacementManagerFactory = ({\n  shipPlacementManagers,\n  createHandler,\n  isAllShipsPlaced\n}) =>\n  ManagerFactory({\n    ManagerBuilder: FleetPlacementManager,\n    initialDetails: { shipPlacementManagers, createHandler, isAllShipsPlaced },\n    validateDetails: (details) =>\n      details.shipPlacementManagers && details.createHandler && details.isAllShipsPlaced\n  });\n","export const FLEET_PLACEMENT_EVENTS = {\n  // Requests\n  INITIALIZE: 'initializeFleetPlacementRequested',\n  SELECT: 'selectShipFromFleetRequested',\n  SET_COORDINATES: 'setShipPlacementCoordinates',\n  PLACE: 'placeShipRequested',\n  END: 'fleetPlacementEndRequested',\n\n  // Subscription Requests\n  SUB_SELECTED: 'fleetShipSelectedSubscribe',\n  UNSUB_SELECTED: 'fleetShipSelectedUnsubscribe',\n  SUB_ORIENTATION_TOGGLED: 'fleetShipOrientationToggleSubscribe',\n  UNSUB_ORIENTATION_TOGGLED: 'fleetShipOrientationToggleUnsubscribe',\n  SUB_ALL_SHIPS_PLACED: 'allShipsInFleetPlacedSubscribe',\n  UNSUB_ALL_SHIPS_PLACED: 'allShipsInFleetPlacedUnsubscribe',\n  SUB_SHIP_NO_LONGER_PLACED: 'shipNoLongerPlacedSubscribe',\n  UNSUB_SHIP_NO_LONGER_PLACED: 'shipNoLongerPlacedUnsubscribe',\n\n  // Declarations\n  SELECTED: 'shipSelectedFromFleet',\n  SHIP_PLACED: 'shipPlaced',\n  ALL_SHIPS_PLACED: 'allShipsInFleetPlaced',\n  SHIP_NO_LONGER_PLACED: 'shipNoLongerPlaced'\n};\n\nexport const FLEET_COMBAT_EVENTS = {\n  // Requests\n  INITIALIZE: 'initializeFleetCombat',\n  HIT_SHIP: 'hitShipInFleetRequested',\n  END: 'endFleetCombatRequested',\n\n  // Subscription Requests\n  SUB_SHIP_HIT: 'fleetShipHitSubscribe',\n  UNSUB_SHIP_HIT: 'fleetShipHitUnsubscribe',\n  SUB_SHIP_SUNK: 'fleetShipSunkSubscribe',\n  UNSUB_SHIP_SUNK: 'fleetShipSunkUnsubscribe',\n  SUB_ALL_SHIPS_SUNK: 'fleetAllShipsSunkSubscribe',\n  UNSUB_ALL_SHIPS_SUNK: 'fleetAllShipsSunkUnsubscribe',\n\n  // Declarations\n  SHIP_HIT: 'shipInFleetHit',\n  SHIP_SUNK: 'shipInFleetSunk',\n  ALL_SHIPS_SUNK: 'allShipsInFleetSunk'\n};\n","import { ManagerFactory } from '../../../Utility/ManagerFactory';\nimport { FLEET_COMBAT_EVENTS } from '../common/fleetEvents';\n\n/**\n * Manages the combat between players by coordinating individual ship combat managers.\n * Provides a central method for finding and executing hit logic on a ship within the fleet.\n * Tracks overall state and emits events related to combat interactions.\n *\n * @param {Object} detail Initialization detail.\n * @param {Array} detail.shipCombatManagers Array of shipCombatManager instances.\n * @param {function} detail.createHandler Method for creating an EventHandler instance.\n * @param {function} detail.isAllShipsSunk Method to determine if all ships have been sunk.\n * @returns {Object} Interface providing fleet combat management capabilities.\n */\nconst FleetCombatManager = ({ shipCombatManagers, createHandler, isAllShipsSunk }) => {\n  const hit = (id) => {\n    const ship = shipCombatManagers.get(id);\n    if (ship) ship.hit();\n  };\n\n  /**\n   * Manages subscriptions to the hit event on all ships in the fleet.\n   */\n  const shipHit = {\n    on: (callback) => shipCombatManagers.forEach((manager) => manager.onHit(callback)),\n    off: (callback) => shipCombatManagers.forEach((manager) => manager.offHit(callback))\n  };\n\n  /**\n   * Manages the all ships sunk event and state notifying subscribers when necessary.\n   */\n  const allShipsSunk = {\n    handler: null,\n    check: () => {\n      if (isAllShipsSunk()) allShipsSunk.handler.emit();\n    },\n    init: () => {\n      if (!allShipsSunk.handler)\n        allShipsSunk.handler = createHandler(FLEET_COMBAT_EVENTS.ALL_SHIPS_SUNK);\n    },\n    on: (callback) => allShipsSunk.handler.on(callback),\n    off: (callback) => allShipsSunk.handler.off(callback),\n    reset: () => allShipsSunk.handler.reset()\n  };\n\n  /**\n   * Manages subscriptions to the sunk event on all ships in the fleet.\n   */\n  const shipSunk = {\n    on: (callback) => shipCombatManagers.forEach((manager) => manager.onSunk(callback)),\n    off: (callback) => shipCombatManagers.forEach((manager) => manager.offSunk(callback))\n  };\n\n  /**\n   * Initializes all ship combat managers and own handlers.\n   */\n  const start = () => {\n    allShipsSunk.init();\n    shipCombatManagers.forEach((manager) => {\n      manager.start();\n      manager.onSunk(allShipsSunk.check);\n    });\n  };\n  /**\n   * Resets all ship combat managers and own handlers.\n   */\n  const end = () => {\n    shipCombatManagers.forEach((manager) => manager.end());\n    allShipsSunk.reset();\n  };\n\n  return {\n    start,\n    end,\n    hit,\n    onShipHit: shipHit.on,\n    offShipHit: shipHit.off,\n    onShipSunk: shipSunk.on,\n    offShipSunk: shipSunk.off,\n    onAllShipsSunk: allShipsSunk.on,\n    offAllShipsSunk: allShipsSunk.off\n  };\n};\n\nexport const CombatManagerFactory = ({ shipCombatManagers, createHandler, isAllShipsSunk }) =>\n  ManagerFactory({\n    ManagerBuilder: FleetCombatManager,\n    initialDetails: { shipCombatManagers, createHandler, isAllShipsSunk },\n    validateDetails: (details) =>\n      details.shipCombatManagers && details.createHandler && details.isAllShipsSunk\n  });\n","/**\n * Initializes an EventEmitter to facilitate event-driven communication within the application.\n *\n * @returns {Object} Interface for pub/sub communication.\n */\nexport const EventEmitter = () => {\n  const subscribers = {};\n  const hasEventSubscription = (event) => !!subscribers[event];\n\n  /**\n   * Assigns a function to execute when the specified event occurs.\n   *\n   * @param {string} event\n   * @param {function} callback\n   */\n  const subscribe = (event, callback) => {\n    if (!hasEventSubscription(event)) subscribers[event] = [];\n    subscribers[event].push(callback);\n  };\n\n  /**\n   * Subscribes multiple callbacks to events in the provided detail.\n   *\n   * @param {Object[]} subscriptions Array of Objects containing event and callback properties.\n   */\n  const subscribeMany = (subscriptions) =>\n    subscriptions.forEach(({ event, callback }) => subscribe(event, callback));\n\n  /**\n   * Unsubscribes multiple callbacks from events in provided detail.\n   *\n   * @param {Object[]} subscriptions Array of Objects containing event and callback properties.\n   */\n  const unsubscribeMany = (subscriptions) =>\n    subscriptions.forEach(({ event, callback }) => unsubscribe(event, callback));\n\n  /**\n   * Stops the function from executing when the specified event occurs.\n   *\n   * @param {string} event Name of event.\n   * @param {function} callback Function to remove from event.\n   */\n  const unsubscribe = (event, callback) => {\n    if (!hasEventSubscription(event)) return;\n    subscribers[event] = subscribers[event].filter((subscriber) => subscriber !== callback);\n  };\n\n  /**\n   * Declares an event has occurred triggering subscribers callbacks to execute.\n   *\n   * @param {string} event Name of event to publish.\n   * @param {*} incomingData Data to be passed to subscribers.\n   */\n  const publish = (event, incomingData) => {\n    if (!hasEventSubscription(event)) return;\n    const eventData = incomingData?.data ? incomingData : { data: incomingData };\n    subscribers[event].forEach((callback) => {\n      callback(eventData);\n    });\n  };\n\n  const reset = () => Object.keys(subscribers).forEach((event) => delete subscribers[event]);\n\n  return { subscribe, subscribeMany, unsubscribe, unsubscribeMany, publish, reset };\n};\n","/**\n * Initializes an EventHandler for managing interactions with a specified event in a pub/sub system.\n * Handles subscriptions and emissions related to an event\n * @param {Object} emitter Core Pub/sub system to manage event for.\n * @param {string} eventName Name of event to handle interactions for.\n * @param {function} preEmitCallback Function to execute pre-emission for providing payload.\n * @returns {Object} Interface for managing the event.\n */\nexport const EventHandler = (emitter, eventName, preEmitCallback = (args) => args) => {\n  const { publish, subscribe, unsubscribe } = emitter;\n  const validateCallback = (fn, at = '') => {\n    if (!(fn && typeof fn === 'function'))\n      throw new Error(`${eventName} passed invalid function at ${at}`);\n    return true;\n  };\n  validateCallback(preEmitCallback, EventHandler.name);\n  let callbacks = [];\n  let callback = preEmitCallback;\n  /**\n   * Executes pre-emit callback and publishes payload detail.\n   *\n   * @param {*} args Passed to pre-emit callback.\n   */\n  const emit = (args) => {\n    const payload = callback(args);\n    publish(eventName, payload);\n  };\n\n  /**\n   * Subscribes and stores the callback to the event.\n   *\n   * @param {function} callback Function to execute on event.\n   */\n  const on = (callback) => {\n    validateCallback(callback, on.name);\n    if (!callbacks.includes(callback)) {\n      callbacks.push(callback);\n      subscribe(eventName, callback);\n    }\n  };\n  /**\n   * Unsubscribes and removes the callback from the event.\n   *\n   * @param {function} callback Function to remove from event.\n   */\n  const off = (callback) => {\n    callbacks = callbacks.filter((fn) => fn !== callback);\n    unsubscribe(eventName, callback);\n  };\n  /**\n   * Sets the pre-emit callback function.\n   *\n   * @param {function} newCallback Function to execute pre-event emissions.\n   */\n  const setPreEmitCallback = (newCallback) => {\n    validateCallback(newCallback, setPreEmitCallback.name);\n    callback = newCallback;\n  };\n\n  const reset = () => {\n    callbacks.forEach((callback) => unsubscribe(eventName, callback));\n    callbacks = [];\n    callback = (args) => args;\n  };\n\n  return {\n    emit,\n    on,\n    off,\n    setPreEmitCallback,\n    reset\n  };\n};\n","import { FleetModel } from './main/model/FleetModel';\nimport { FleetView } from './main/view/FleetView';\nimport { PlacementManagerFactory } from './Managers/FleetPlacementManager';\nimport { CombatManagerFactory } from './Managers/FleetCombatManager';\nimport { EventEmitter } from '../../Events/core/EventEmitter';\nimport { EventHandler } from '../../Events/management/EventHandler';\n\n/**\n * Provides a central controller for managing an aggregated collection of ship controllers.\n * Facilitates selection, placement, and combat logic and communication.\n *\n * @param {Object[]} fleetShipControllers Array of ship controller instances.\n * @returns {Object} An interface for managing fleet operations.\n */\nexport const FleetController = (fleetShipControllers) => {\n  const model = FleetModel();\n  const view = FleetView();\n  const shipControllers = new Map();\n  const emitter = EventEmitter();\n  const createHandler = (eventName, callback = (args) => args) =>\n    EventHandler(emitter, eventName, callback);\n\n  /**\n   * Encapsulates the fleet's placement manager's initialization and management.\n   */\n  const placement = {\n    manager: null,\n    shipPlacementManagers: new Map(),\n    addShipPlacementManager: (id, manager) => placement.shipPlacementManagers.set(id, manager),\n    setManager: () => {\n      if (placement.manager) placement.manager.getManager().end();\n      placement.manager = PlacementManagerFactory({\n        shipPlacementManagers: placement.shipPlacementManagers,\n        createHandler,\n        isAllShipsPlaced: model.isAllShipsPlaced\n      });\n    },\n    getPlacementManager: () => {\n      if (!placement.manager) placement.setManager();\n      return placement.manager.getManager();\n    }\n  };\n  /**\n   * Encapsulates the fleet's combat manager's initialization and management.\n   */\n  const combat = {\n    manager: null,\n    shipCombatManagers: new Map(),\n    addShipCombatManager: (id, manager) => combat.shipCombatManagers.set(id, manager),\n    setManger: () => {\n      if (combat.manager) combat.manager.getManager().end();\n      combat.manager = CombatManagerFactory({\n        shipCombatManagers: combat.shipCombatManagers,\n        createHandler,\n        isAllShipsSunk: model.isAllShipsSunk\n      });\n    },\n    getCombatManager: () => {\n      if (!combat.manager) combat.setManger();\n      return combat.manager.getManager();\n    }\n  };\n  /**\n   * Processes the assignment of a ship controller into the fleet.\n   *\n   * @param {Object} shipController Ship controller instance.\n   */\n  const assignShipToFleet = (shipController) => {\n    const shipModel = shipController.getModel();\n    const shipId = shipModel.id;\n    model.addMainShip(shipId, shipModel);\n    shipControllers.set(shipId, shipController);\n    view.addShipView(shipId, shipController.getView());\n    view.populateFleetShipLists();\n    placement.addShipPlacementManager(shipId, shipController.getPlacementManager());\n    combat.addShipCombatManager(shipId, shipController.getCombatManager());\n  };\n\n  if (fleetShipControllers) fleetShipControllers.forEach(assignShipToFleet);\n  return {\n    getPlacementManager: () => placement.getPlacementManager(),\n    getCombatManager: () => combat.getCombatManager(),\n    view,\n    getModel: () => model,\n    getTrackingFleet: () => view.getTrackingFleet(),\n    assignShipToFleet\n  };\n};\n","export const FleetModel = () => {\n  const mainFleet = new Map();\n  const trackingFleet = new Map();\n\n  return {\n    isAllShipsPlaced: () => [...mainFleet.values()].every((ship) => ship.isPlaced()),\n    isAllShipsSunk: () => [...mainFleet.values()].every((ship) => ship.isSunk()),\n    addMainShip: (shipID, shipModel) => mainFleet.set(shipID, shipModel),\n    addTrackingShip: (ship) => trackingFleet.set(ship.id, ship),\n    getFleet: () => [...mainFleet.values()],\n    getTrackingFleet: () => [...trackingFleet.values()],\n    getShipFromMainFleet: (shipID) => mainFleet.get(shipID)\n  };\n};\n","import { MAIN_FLEET, TRACKING_FLEET } from '../../common/fleetConstants';\nimport { buildFleetUIObj } from './buildFleetUIObj';\nimport './fleet-style.css';\n\nexport const FleetView = () => {\n  const { mainFleetElement, trackingFleetElement } = buildFleetUIObj();\n  const shipViews = new Map();\n\n  const mainFleetShipList = mainFleetElement.querySelector(`.${MAIN_FLEET.CLASSES.SHIP_LIST}`);\n  const trackingFleetShipList = trackingFleetElement.querySelector(\n    `.${TRACKING_FLEET.CLASSES.SHIP_LIST}`\n  );\n\n  return {\n    attachMainFleetTo: (container) => container.append(mainFleetElement),\n    attachTrackingFleetTo: (container) => container.append(trackingFleetElement),\n    addShipView: (shipID, shipView) => shipViews.set(shipID, shipView),\n    populateFleetShipLists: () =>\n      shipViews.forEach((shipView) => {\n        mainFleetShipList.append(shipView.elements.getMainShip());\n        trackingFleetShipList.append(shipView.elements.getTrackingShip());\n      }),\n    getRotateShipButton: (shipID) => shipViews.get(shipID)?.elements.getRotateButton(),\n    getMainFleet: () => mainFleetElement,\n    getTrackingFleet: () => trackingFleetElement\n  };\n};\n","import { buildUIObj, buildElementFromUIObj } from '../../../../Utility/uiBuilderUtils/uiBuilders';\nimport { COMMON_ELEMENTS } from '../../../../Utility/constants/dom/elements';\nimport { MAIN_FLEET, TRACKING_FLEET } from '../../common/fleetConstants';\n/**\n * @module fleetListObjs.js\n * Provides the structured object for the provided grid's fleet list to create an HTML Element.\n *\n * Expected gridType parameter includes 'main-grid' or 'tracking-grid'.\n */\n\n/**\n * Creates top-level container for the grid's fleet list.\n *\n * @returns {Object} Contains details for grid container.\n */\nconst buildFleetContainerObj = () => ({\n  mainFleetContainer: buildUIObj(COMMON_ELEMENTS.DIV, {\n    attributes: {\n      class: MAIN_FLEET.TYPE\n    }\n  }),\n  trackingFleetContainer: buildUIObj(COMMON_ELEMENTS.DIV, {\n    attributes: {\n      class: TRACKING_FLEET.TYPE\n    }\n  })\n});\n\n/**\n * Creates container for the list of ships in the current game.\n *\n * @returns {Object} Contains details for list of ships.\n */\nconst buildShipListObj = () => ({\n  mainShipList: buildUIObj(COMMON_ELEMENTS.DIV, {\n    attributes: {\n      class: MAIN_FLEET.CLASSES.SHIP_LIST\n    }\n  }),\n  trackingShipList: buildUIObj(COMMON_ELEMENTS.DIV, {\n    attributes: {\n      class: TRACKING_FLEET.CLASSES.SHIP_LIST\n    }\n  })\n});\n\n/**\n * Creates the header for the grid's fleet list.\n *\n * @param {string} gridType Grid to create header for.\n * @returns {Object} Contains details for the header of the ship list.\n */\nconst buildFleetHeaderObj = () => ({\n  mainFleetHeader: buildUIObj(COMMON_ELEMENTS.PARAGRAPH, {\n    text: MAIN_FLEET.PROPERTIES.HEADER_TEXT,\n    attributes: {\n      class: MAIN_FLEET.CLASSES.HEADER\n    }\n  }),\n  trackingFleetHeader: buildUIObj(COMMON_ELEMENTS.PARAGRAPH, {\n    text: TRACKING_FLEET.PROPERTIES.HEADER_TEXT,\n    attributes: {\n      class: TRACKING_FLEET.CLASSES.HEADER\n    }\n  })\n});\n\n/**\n * Creates the grid's fleet list structure and components.\n *\n * @param {string} gridType Grid to build a fleet list for.\n * @returns {Object} Contains details and structure for the grid's fleet list.\n */\nexport const buildFleetUIObj = () => {\n  const { mainFleetContainer, trackingFleetContainer } = buildFleetContainerObj();\n  const { mainFleetHeader, trackingFleetHeader } = buildFleetHeaderObj();\n  const { mainShipList, trackingShipList } = buildShipListObj();\n  mainFleetContainer.children = [mainFleetHeader, mainShipList];\n  trackingFleetContainer.children = [trackingFleetHeader, trackingShipList];\n  const mainFleetElement = buildElementFromUIObj(mainFleetContainer);\n  const trackingFleetElement = buildElementFromUIObj(trackingFleetContainer);\n\n  return {\n    mainFleetElement,\n    trackingFleetElement\n  };\n};\n","const BASE_CLASSES = {\n  BUTTON: 'base-button',\n  HEADER: 'base-header'\n};\n\nexport { BASE_CLASSES };\n","import { SHIP_CLASSES, SHIP_DATA_ATTRIBUTES, SHIP_ROTATE_BUTTON } from '../../common/shipConstants';\nimport { ORIENTATIONS } from '../../../../Utility/constants/common';\nimport { BOOL } from '../../../../Utility/constants/dom/attributes';\nimport { COMMON_ELEMENTS } from '../../../../Utility/constants/dom/elements';\nimport { buildUIObj, buildElementFromUIObj } from '../../../../Utility/uiBuilderUtils/uiBuilders';\nimport { BASE_CLASSES } from '../../../../Utility/constants/dom/baseStyles';\nconst buildBaseShipUIObj = (name, id, type) =>\n  buildUIObj(type, {\n    attributes: {\n      class: `${id} ${SHIP_CLASSES.ENTRY}`,\n      ...{ [SHIP_DATA_ATTRIBUTES.SHIP_NAME]: id },\n      ...{ [SHIP_DATA_ATTRIBUTES.SHIP_SUNK]: 'false' }\n    },\n    children: [\n      buildUIObj(COMMON_ELEMENTS.PARAGRAPH, {\n        text: name,\n        attributes: { class: SHIP_CLASSES.NAME }\n      })\n    ]\n  });\n\nconst extendBaseForInteractivity = (baseObj, length) => {\n  baseObj.attributes[SHIP_DATA_ATTRIBUTES.SHIP_LENGTH] = length;\n  baseObj.attributes[SHIP_DATA_ATTRIBUTES.SHIP_ORIENTATION] = ORIENTATIONS.VERTICAL;\n  baseObj.attributes[SHIP_DATA_ATTRIBUTES.SHIP_PLACED] = BOOL.F;\n  baseObj.children.push(buildUIObj(COMMON_ELEMENTS.PARAGRAPH, { text: length }));\n  return baseObj;\n};\nconst buildRotateButtonUIObj = () =>\n  buildUIObj(COMMON_ELEMENTS.BUTTON, {\n    text: SHIP_ROTATE_BUTTON.TEXT,\n    attributes: { class: `${SHIP_ROTATE_BUTTON.CLASS} ${BASE_CLASSES.BUTTON}` }\n  });\n\nexport const buildShipUIObj = ({ name, length }) => {\n  const id = name.toLowerCase().replace(/ /g, '-');\n  const interactiveShipBaseObj = buildBaseShipUIObj(name, id, COMMON_ELEMENTS.BUTTON);\n  const trackingShipBaseObj = buildBaseShipUIObj(name, id, COMMON_ELEMENTS.DIV);\n  const interactiveShipExtendedObj = extendBaseForInteractivity(interactiveShipBaseObj, length);\n  const interactiveShipElement = buildElementFromUIObj(interactiveShipExtendedObj);\n  const trackingShipElement = buildElementFromUIObj(trackingShipBaseObj);\n  const rotateButtonElement = buildElementFromUIObj(buildRotateButtonUIObj());\n  return {\n    mainShipElement: interactiveShipElement,\n    trackingShipElement,\n    rotateButtonElement\n  };\n};\n","\n      import API from \"!../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../node_modules/css-loader/dist/cjs.js!./ship-styles.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../node_modules/css-loader/dist/cjs.js!./ship-styles.css\";\n       export default content && content.locals ? content.locals : undefined;\n","/**\n * Validates createEventController parameters.\n *\n * @param {Object} parameters Contains parameters for createEventController.\n */\nconst validateControllerParameters = (parameters) => {\n  const { element, event, callback, key } = parameters;\n  if (!(element === document || (element && element instanceof HTMLElement)))\n    throw new Error(`Invalid Element: ${element}`);\n  if (!(event && typeof event === 'string')) throw new Error(`Invalid Event String: ${event}`);\n  if (!(callback && typeof callback === 'function'))\n    throw new Error(`Invalid Callback Function: ${callback}`);\n  if (!(key && typeof key === 'string')) throw new Error(`Invalid key string: ${key}`);\n};\n\n/**\n * Creates an event controller for managing a DOM event listener.\n *\n * @param {Object} params The parameters for creating an event controller.\n * @param {HTMLElement} params.element The DOM element to attach the event listener to.\n * @param {string} params.event The event type (e.g., 'click', 'change').\n * @param {Function} params.callback The callback function to execute when the event is triggered.\n * @param {string} params.key A unique key for the event controller.\n * @returns {Object} An object with methods to enable, disable the event listener, and check its active state.\n */\nconst createEventController = ({ element, event, callback, key }) => {\n  validateControllerParameters({ element, event, callback, key });\n  let isActive = false;\n  const controller = {\n    /**\n     * Enables listener if not active.\n     *\n     * @returns {Object} This controller object to enable chaining.\n     */\n    enable: () => {\n      if (isActive) return;\n      element.addEventListener(event, callback);\n      if (element.tagName === 'BUTTON') element.disabled = false;\n      isActive = true;\n      return controller;\n    },\n    /**\n     * Disables listener if active.\n     *\n     * @returns {Object} This controller object to enable chaining.\n     */\n    disable: () => {\n      if (!isActive) return;\n      element.removeEventListener(event, callback);\n      if (element.tagName === 'BUTTON') element.disabled = true;\n      isActive = false;\n      return controller;\n    },\n    isActive: () => isActive,\n    getKey: () => key\n  };\n  return controller;\n};\n\n/**\n * Creates a manager for handling multiple event controllers.\n *\n * @returns {Object} The listener manager with methods to add, enable, disable, and remove event listeners.\n */\nexport const ListenerManager = () => {\n  const activeControllers = new Map();\n  const inactiveControllers = new Map();\n\n  /**\n   * Ensures efficient and consistent updates when enabling and disabling listeners.\n   *\n   * @param {Object} controller Event controller object.\n   */\n  const updateControllers = (controller) => {\n    if (controller.isActive()) {\n      activeControllers.set(controller.getKey(), controller);\n      inactiveControllers.delete(controller.getKey());\n    } else {\n      inactiveControllers.set(controller.getKey(), controller);\n      activeControllers.delete(controller.getKey());\n    }\n  };\n\n  /**\n   * Adds a new event controller to the manager.\n   *\n   * @param {Object} config Configuration object for the event controller.\n   * @param {HTMLElement} config.element The DOM element to attach the event listener to.\n   * @param {string} config.event The event type.\n   * @param {Function} config.callback The callback function for the event.\n   * @param {string} config.key A unique keyfor the controller.\n   * @param {boolean} [config.enable=false] Whether to enable the event listener immediately upon adding.\n   */\n  const addController = ({ element, event, callback, key, enable = false }) => {\n    const controller = createEventController({\n      element,\n      event,\n      callback,\n      key\n    });\n    if (enable) {\n      controller.enable();\n      activeControllers.set(key, controller);\n    } else inactiveControllers.set(key, controller);\n  };\n\n  /**\n   * Returned manager Object containing utilities for interacting with event controller.\n   * All methods consistently update the active/inactive Maps and ensure listeners are disabled before deletion.\n   */\n  const manager = {\n    addController,\n    enableListener: (key) => {\n      const enabledListener = inactiveControllers.get(key)?.enable();\n      if (enabledListener) updateControllers(enabledListener);\n    },\n    disableListener: (key) => {\n      const disabledListener = activeControllers.get(key)?.disable();\n      if (disabledListener) updateControllers(disabledListener);\n    },\n    enableAllListeners: () =>\n      inactiveControllers.forEach((controller, key) => manager.enableListener(key)),\n    disableAllListeners: () =>\n      activeControllers.forEach((controller, key) => manager.disableListener(key)),\n    removeListener: (key) => {\n      manager.disableListener(key);\n      inactiveControllers.delete(key);\n    },\n    reset: () => {\n      manager.disableAllListeners();\n      inactiveControllers.clear();\n    }\n  };\n  return manager;\n};\n","import { MOUSE_EVENTS, KEY_EVENTS } from '../../../../../Utility/constants/dom/domEvents';\nimport { ListenerManager } from '../../../../../Utility/uiBuilderUtils/ListenerManager';\nimport { SHIP_CLASSES } from '../../../common/shipConstants';\n\nconst LISTENER_MANAGER_KEYS = {\n  MAIN_SHIP_SELECT: 'mainShipSelect',\n  MOUSE_TOGGLE_ORIENTATION: 'mouseToggleOrientation',\n  KEY_TOGGLE_ORIENTATION: 'keyToggleOrientation',\n  BUTTON_TOGGLE_ORIENTATION: 'buttonToggleOrientation'\n};\n\n/**\n * Manages the selection user interface and DOM-level events.\n *\n * @param {Object} detail Initialization detail.\n * @param {HTMLElement} mainShipElement Ship DOM Element.\n * @param {HTMLElement} rotateButtonElement Rotate ship button DOM Element.\n * @returns {Object} Interface for managing the ship's selection view.\n */\nexport const ShipSelectionView = ({ mainShipElement, rotateButtonElement }) => {\n  const listenerManager = ListenerManager();\n  const { addController, enableListener, disableListener, removeListener } = listenerManager;\n  let isInitialized = false;\n\n  /**\n   * Assigns callbacks to user interface DOM-level interactions and event listeners.\n   *\n   * @param {Object} detail Contains callbacks for UI.\n   * @param {Object} detail.requestSelectionCallback Function to execute when user selects ship in interface.\n   * @param {Object} detail.toggleOrientationCallback Function to execute when user toggles ship orientation in interface.\n   */\n  const initializeSelection = ({ requestSelectionCallback, toggleOrientationCallback }) => {\n    if (isInitialized) return;\n    addController({\n      element: mainShipElement,\n      event: MOUSE_EVENTS.CLICK,\n      callback: requestSelectionCallback,\n      key: LISTENER_MANAGER_KEYS.MAIN_SHIP_SELECT,\n      enable: true\n    });\n    addController({\n      element: document,\n      event: MOUSE_EVENTS.DOWN,\n      callback: toggleOrientationCallback,\n      key: LISTENER_MANAGER_KEYS.MOUSE_TOGGLE_ORIENTATION,\n      enable: false\n    });\n    addController({\n      element: document,\n      event: KEY_EVENTS.DOWN,\n      callback: toggleOrientationCallback,\n      key: LISTENER_MANAGER_KEYS.KEY_TOGGLE_ORIENTATION,\n      enable: false\n    });\n    addController({\n      element: rotateButtonElement,\n      event: MOUSE_EVENTS.CLICK,\n      callback: toggleOrientationCallback,\n      key: LISTENER_MANAGER_KEYS.BUTTON_TOGGLE_ORIENTATION,\n      enable: true\n    });\n    isInitialized = true;\n  };\n\n  const enableSelect = () => enableListener(LISTENER_MANAGER_KEYS.MAIN_SHIP_SELECT);\n\n  const disableSelect = () => disableListener(LISTENER_MANAGER_KEYS.MAIN_SHIP_SELECT);\n\n  const enableOrientationToggle = () => {\n    enableListener(LISTENER_MANAGER_KEYS.BUTTON_TOGGLE_ORIENTATION);\n    enableListener(LISTENER_MANAGER_KEYS.MOUSE_TOGGLE_ORIENTATION);\n    enableListener(LISTENER_MANAGER_KEYS.KEY_TOGGLE_ORIENTATION);\n  };\n  const disableOrientationToggle = () => {\n    disableListener(LISTENER_MANAGER_KEYS.BUTTON_TOGGLE_ORIENTATION);\n    disableListener(LISTENER_MANAGER_KEYS.MOUSE_TOGGLE_ORIENTATION);\n    disableListener(LISTENER_MANAGER_KEYS.KEY_TOGGLE_ORIENTATION);\n  };\n\n  const reset = () => {\n    removeListener(LISTENER_MANAGER_KEYS.MAIN_SHIP_SELECT);\n    removeListener(LISTENER_MANAGER_KEYS.BUTTON_TOGGLE_ORIENTATION);\n    removeListener(LISTENER_MANAGER_KEYS.MOUSE_TOGGLE_ORIENTATION);\n    removeListener(LISTENER_MANAGER_KEYS.KEY_TOGGLE_ORIENTATION);\n    rotateButtonElement.remove();\n    listenerManager.reset();\n    isInitialized = false;\n  };\n\n  return {\n    initialize: ({ requestSelectionCallback, toggleOrientationCallback }) =>\n      initializeSelection({ requestSelectionCallback, toggleOrientationCallback }),\n    enable: {\n      select: () => enableSelect(),\n      orientationToggle: () => enableOrientationToggle(),\n      all: () => {\n        enableSelect();\n        enableOrientationToggle();\n      }\n    },\n    disable: {\n      select: () => disableSelect(),\n      orientationToggle: () => disableOrientationToggle(),\n      all: () => {\n        disableSelect();\n        disableOrientationToggle();\n      }\n    },\n    update: {\n      orientation: (newOrientation) => (mainShipElement.dataset.orientation = newOrientation),\n      selectedStatus: (isSelected) =>\n        mainShipElement.classList.toggle(SHIP_CLASSES.SELECTED, isSelected)\n    },\n    reset\n  };\n};\n","import { ShipSelectionController } from './selection/ShipSelectionController';\nimport { ShipPlacementController } from './placement/ShipPlacementController';\nimport { ManagerFactory } from '../../../../Utility/ManagerFactory';\n\nconst SHIP_SELECTION_EVENTS = {\n  SELECTED: 'shipSelected',\n  ORIENTATION_TOGGLED: 'shipOrientationToggled'\n};\nconst SHIP_PLACEMENT_EVENTS = {\n  PLACED: 'shipPlaced'\n};\n\n/**\n * Handles ship selection and placement related cross-component, event-drive communication.\n *\n * @param {Object} detail Initialization detail.\n * @param {Object} detail.model Ship data model.\n * @param {Object} detail.view Ship view interface.\n * @param {function} detail.createHandler Method for creating an EventHandler instance.\n * @returns {Object} Interface providing ship selection and placement capabilities.\n */\nconst ShipSelectionAndPlacementManager = ({ model, view, createHandler }) => {\n  const selectionController = ShipSelectionController({\n    model,\n    view\n  });\n  const placementController = ShipPlacementController({\n    model,\n    view\n  });\n\n  const isSelected = () => model.isSelected();\n  const isPlaced = () => model.isPlaced();\n  const getRotateButton = () => view.elements.getRotateButton();\n\n  /**\n   * Encapsulates the ship's placement logic and event communications.\n   */\n  const place = {\n    handler: null,\n    execute: (coordinates) => {\n      placementController.place(coordinates);\n      select.deselect();\n      place.handler.emit();\n    },\n    on: (callback) => place.handler.on(callback),\n    off: (callback) => place.handler.off(callback),\n    init: () => (place.handler = createHandler(SHIP_PLACEMENT_EVENTS.PLACED)),\n    reset: () => place.handler.reset()\n  };\n\n  /**\n   * Encapsulates the ship's selection logic and event communication.\n   */\n  const select = {\n    handler: null,\n    execute: () => {\n      if (isPlaced()) placementController.pickup();\n      selectionController.select();\n    },\n    request: () => select.handler.emit(),\n    deselect: () => selectionController.deselect(),\n    getData: () => ({\n      id: model.id,\n      length: model.length,\n      orientation: model.getOrientation()\n    }),\n    on: (callback) => select.handler.on(callback),\n    off: (callback) => select.handler.off(callback),\n    init: () => (select.handler = createHandler(SHIP_SELECTION_EVENTS.SELECTED, select.getData)),\n    reset: () => select.handler.reset()\n  };\n\n  /**\n   * Encapsulates the ship's orientation logic and event communication.\n   */\n  const orientation = {\n    handler: null,\n    request: () => orientation.handler.emit(),\n    on: (callback) => orientation.handler.on(callback),\n    off: (callback) => orientation.handler.off(callback),\n    init: () =>\n      (orientation.handler = createHandler(\n        SHIP_SELECTION_EVENTS.ORIENTATION_TOGGLED,\n        model.getOrientation\n      )),\n    reset: () => orientation.handler.reset()\n  };\n\n  /** Initializes the ship's placement and selection handlers. Assigns the orientation request emit function to the user interface.  */\n  const start = () => {\n    select.init();\n    orientation.init();\n    place.init();\n    selectionController.initialize(select.request, orientation.request);\n  };\n\n  /** Resets the ship's selection and placement logic and event handlers. */\n  const end = () => {\n    select.reset();\n    orientation.reset();\n    place.reset();\n    selectionController.reset();\n  };\n\n  return {\n    isSelected,\n    isPlaced,\n    getRotateButton,\n    start,\n    end,\n    place: (coordinates) => place.execute(coordinates),\n    select: () => select.execute(),\n    deselect: () => select.deselect(),\n    onSelected: (callback) => select.on(callback),\n    offSelected: (callback) => select.off(callback),\n    onPlaced: (callback) => place.on(callback),\n    offPlaced: (callback) => place.off(callback),\n    onOrientationToggled: (callback) => orientation.on(callback),\n    offOrientationToggled: (callback) => orientation.off(callback)\n  };\n};\n\nexport const SelectionAndPlacementManagerFactory = ({ model, view, createHandler }) =>\n  ManagerFactory({\n    ManagerBuilder: ShipSelectionAndPlacementManager,\n    initialDetails: { model, view, createHandler },\n    validateDetails: (details) => details.model && details.view && details.createHandler\n  });\n","import { KEY_EVENTS } from '../../../../../Utility/constants/dom/domEvents';\nimport { ShipSelectionView } from './ShipSelectionView';\n\n/**\n * Provides a cohesive interface for updating a ship's selected state and corresponding interface view.\n *\n * @param {Object} detail Contains ship model and view.\n * @returns {Object} Interface for manipulating ship's selection data and view.\n */\nexport const ShipSelectionController = ({ model, view }) => {\n  let isInitialized = false;\n  let isEnabled = false;\n\n  const selectionView = ShipSelectionView({\n    mainShipElement: view.elements.getMainShip(),\n    rotateButtonElement: view.elements.getRotateButton()\n  });\n\n  /**\n   * Sets the ship's selected status and updates the view.\n   */\n  const select = () => {\n    if (model.isSelected()) return;\n    selectionView.update.selectedStatus(true);\n    selectionView.enable.orientationToggle();\n    model.setIsSelected(true);\n  };\n  /**\n   * Removes the ship's selected status and updates the view.\n   */\n  const deselect = () => {\n    if (!model.isSelected()) return;\n    selectionView.disable.orientationToggle();\n    selectionView.update.selectedStatus(false);\n    model.setIsSelected(false);\n  };\n\n  /**\n   * Updates the ship's orientation state and view.\n   *\n   * @param {Event} e DOM-level event detail.\n   */\n  const toggleOrientation = (e) => {\n    const isRotateRequest = (e) =>\n      e.code === KEY_EVENTS.CODES.SPACE ||\n      e.code === KEY_EVENTS.CODES.R ||\n      e.button === 1 ||\n      (e.target.classList.contains('rotate-ship-button') && e instanceof PointerEvent);\n    if (!isRotateRequest(e)) return;\n    e.preventDefault();\n    model.toggleOrientation();\n    const orientation = model.getOrientation();\n    selectionView.update.orientation(orientation);\n    return true;\n  };\n\n  const initialize = (requestSelectionCallback, requestOrientationToggleCallback) => {\n    if (isInitialized) return;\n    const toggleOrientationCallback = (e) => {\n      if (toggleOrientation(e)) requestOrientationToggleCallback();\n    };\n    selectionView.initialize({\n      requestSelectionCallback,\n      toggleOrientationCallback\n    });\n    enable();\n    isInitialized = true;\n  };\n\n  /**\n   * Enables ship selection logic.\n   */\n  const enable = () => {\n    if (isEnabled) return;\n    selectionView.enable.select();\n    isEnabled = true;\n  };\n  /**\n   * Disables ship selection logic.\n   */\n  const disable = () => {\n    if (!isEnabled) return;\n    selectionView.disable.all();\n    isEnabled = false;\n  };\n  /**\n   * Disables selection logic and resets the view.\n   */\n  const reset = () => {\n    if (!isInitialized) return;\n    disable();\n    selectionView.reset();\n    isInitialized = false;\n  };\n  return {\n    initialize,\n    reset,\n    select,\n    deselect,\n    toggleOrientation,\n    enable,\n    disable\n  };\n};\n","import { BOOL } from '../../../../../Utility/constants/dom/attributes';\n\n/**\n * Handles ship placement logic.\n *\n * @param {Object} detail Contains ship model and view interface.\n * @returns {Object} Methods to manage ship's placement state.\n */\nexport const ShipPlacementController = ({ model, view }) => {\n  /**\n   * Sets the ships placed status, placed coordinates and updates the view.\n   *\n   * @param {Array[number[]]} coordinates Coordinates ship is placed at.\n   */\n  const place = (coordinates) => {\n    model.setPlacedCoordinates(coordinates);\n    model.setIsPlaced(true);\n    view.elements.getMainShip().dataset.placed = BOOL.T;\n  };\n  /**\n   * Removes the ship's placed status, placed coordinates, and updates the view.\n   */\n  const pickup = () => {\n    model.clearPlacedCoordinates();\n    model.setIsPlaced(false);\n    view.elements.getMainShip().dataset.placed = BOOL.F;\n  };\n\n  return {\n    place,\n    pickup\n  };\n};\n","import { STATUSES } from '../../../Utility/constants/common';\nimport { BOOL } from '../../../Utility/constants/dom/attributes';\nimport { SHIP_DATA_ATTRIBUTES } from '../common/shipConstants';\nimport { ManagerFactory } from '../../../Utility/ManagerFactory';\n\nconst SHIP_COMBAT_EVENTS = {\n  SUNK: 'shipSunk',\n  HIT: 'shipHit'\n};\n\n/**\n * Handles event-driven combat communications for a ship, managing hits and sink events.\n *\n * @param {Object} detail Initialization detail.\n * @param {Object} detail.model Ship data model.\n * @param {Object} detail.view Ship view interface.\n * @param {function} detail.createHandler Method for creating an EventHandler instance.\n * @returns {Object} Interface providing ship combat functionality.\n */\nconst ShipCombatManager = ({ model, view, createHandler }) => {\n  /**\n   * Encapsulates all hit related logic and event communication.\n   */\n  const hit = {\n    handler: null,\n    getData: () => ({\n      id: model.id,\n      isSunk: model.isSunk()\n    }),\n    emitData: () => hit.handler.emit(hit.getData()),\n    execute: () => {\n      const result = model.hit();\n      if (result === STATUSES.SHIP_SUNK) sink.execute();\n      hit.emitData();\n    },\n    on: (callback) => hit.handler.on(callback),\n    off: (callback) => hit.handler.off(callback),\n    init: () => (hit.handler = createHandler(SHIP_COMBAT_EVENTS.HIT)),\n    reset: () => hit.handler.reset()\n  };\n\n  /**\n   * Encapsulates all ship sinking related logic and event communication.\n   */\n  const sink = {\n    handler: null,\n    execute: () => {\n      view.elements.getMainShip().setAttribute(SHIP_DATA_ATTRIBUTES.SHIP_SUNK, BOOL.T);\n      view.elements.getTrackingShip().setAttribute(SHIP_DATA_ATTRIBUTES.SHIP_SUNK, BOOL.T);\n      sink.handler.emit(model.id);\n    },\n    on: (callback) => sink.handler.on(callback),\n    off: (callback) => sink.handler.off(callback),\n    init: () => (sink.handler = createHandler(SHIP_COMBAT_EVENTS.SUNK)),\n    reset: () => sink.handler.reset()\n  };\n\n  /**\n   * Resets ship combat event handlers.\n   */\n  const end = () => {\n    hit.reset();\n    sink.reset();\n  };\n\n  /**\n   * Initializes ship combat event handlers.\n   */\n  const start = () => {\n    hit.init();\n    sink.init();\n  };\n\n  return {\n    start,\n    end,\n    hit: hit.execute,\n    onHit: (callback) => hit.on(callback),\n    offHit: (callback) => hit.off(callback),\n    onSunk: (callback) => sink.on(callback),\n    offSunk: (callback) => sink.off(callback)\n  };\n};\n\nexport const CombatManagerFactory = ({ model, view, createHandler }) =>\n  ManagerFactory({\n    ManagerBuilder: ShipCombatManager,\n    initialDetails: { model, view, createHandler },\n    validateDetails: (details) => details.model && details.view && details.createHandler\n  });\n","import { ShipModel } from './main/model/ShipModel';\nimport { ShipView } from './main/view/ShipView';\nimport { SelectionAndPlacementManagerFactory } from './Managers/SelectionAndPlacement/SelectionAndPlacementManager';\nimport { CombatManagerFactory } from './Managers/ShipCombatManager';\nimport { EventEmitter } from '../../Events/core/EventEmitter';\nimport { EventHandler } from '../../Events/management/EventHandler';\n\n/**\n * Interface to manage all ship component interactions.\n * Utilizes selection, placement, and combat managers for core functionality.\n *\n * @param {Object} shipData Object containing name and length properties.\n * @returns {Object} Interface for interacting with Ship component.\n */\nexport const ShipController = (shipData) => {\n  const { name, length } = shipData;\n  const model = ShipModel({ shipName: name, shipLength: length });\n  const view = ShipView({ name, length });\n  const id = model.id;\n\n  const emitter = EventEmitter();\n  const createHandler = (eventName, callback = (args) => args) =>\n    EventHandler(emitter, eventName, callback);\n\n  const getMainShipElement = () => view.elements.getMainShip();\n  const getTrackingShipElement = () => view.elements.getTrackingShip();\n\n  const placementManager = SelectionAndPlacementManagerFactory({ model, view, createHandler });\n  const getPlacementManager = () => placementManager.getManager();\n\n  const combatManager = CombatManagerFactory({ model, view, createHandler });\n  const getCombatManager = () => combatManager.getManager();\n\n  return {\n    id,\n    name,\n    getPlacementManager,\n    getCombatManager,\n    view: {\n      getMainShipElement,\n      getTrackingShipElement\n    },\n    getModel: () => model,\n    getView: () => view\n  };\n};\n","import { ORIENTATIONS, STATUSES } from '../../../../Utility/constants/common';\nexport const ShipModel = ({ shipLength, shipName }) => {\n  const length = shipLength;\n  const placedCoordinates = [];\n  const name = shipName;\n  const id = shipName.toLowerCase().replace(/ /g, '-');\n  let isPlaced = false;\n  let isSelected = false;\n  let health = length;\n  let orientation = ORIENTATIONS.VERTICAL;\n\n  return {\n    id,\n    length,\n    name,\n    isShip: () => true,\n    isSunk: () => health <= 0,\n    isSelected: () => isSelected,\n    isPlaced: () => isPlaced,\n    getHealth: () => health,\n    getOrientation: () => orientation,\n    getPlacedCoordinates: () => placedCoordinates.map((coordinates) => [...coordinates]),\n    setIsPlaced: (value) => (isPlaced = value),\n    setIsSelected: (value) => (isSelected = value),\n    setPlacedCoordinates: (coordinates) => {\n      placedCoordinates.length = 0;\n      placedCoordinates.push(...coordinates);\n    },\n    clearPlacedCoordinates: () => (placedCoordinates.length = 0),\n    toggleOrientation: () =>\n      (orientation =\n        orientation === ORIENTATIONS.VERTICAL ? ORIENTATIONS.HORIZONTAL : ORIENTATIONS.VERTICAL),\n    hit: () => {\n      if (health > 0) health--;\n      return health > 0 ? STATUSES.HIT : STATUSES.SHIP_SUNK;\n    },\n    reset: () => {\n      placedCoordinates.length = 0;\n      health = length;\n      isSelected = false;\n    }\n  };\n};\n","import { buildShipUIObj } from './buildShipUIObj';\nimport './ship-styles.css';\n\nexport const ShipView = ({ name, length }) => {\n  const { mainShipElement, trackingShipElement, rotateButtonElement } = buildShipUIObj({\n    name,\n    length\n  });\n  return {\n    elements: {\n      getMainShip: () => mainShipElement,\n      getTrackingShip: () => trackingShipElement,\n      getRotateButton: () => rotateButtonElement\n    }\n  };\n};\n","import { COMMON_ELEMENTS } from '../../../../Utility/constants/dom/elements';\nimport { GENERAL_ATTRIBUTES } from '../../../../Utility/constants/dom/attributes';\nimport { createAttributeSelector } from '../../common/gridConstants';\n\nexport const MAIN_GRID = {\n  TYPE: 'main-grid',\n  CLASSES: {\n    HEADER: 'main-grid-header',\n    WRAPPER: 'main-grid-wrapper',\n    HIT_MARKER: 'main-grid-hit-marker',\n    VALID_PLACEMENT: 'valid-placement',\n    INVALID_PLACEMENT: 'invalid-placement',\n    PLACED_ENTITY: 'placed-ship'\n  },\n  PROPERTIES: {\n    CELL_ELEMENT: COMMON_ELEMENTS.DIV,\n    HEADER_TEXT: 'Home Territory',\n    ATTRIBUTES: {\n      CELL_COORDINATES_DATA: GENERAL_ATTRIBUTES.DATA('coordinates'),\n      PLACED_ENTITY_NAME: GENERAL_ATTRIBUTES.DATA('placed-ship-name')\n    }\n  },\n  get INVALID_PLACEMENT_SELECTOR() {\n    return `${MAIN_GRID.PROPERTIES.CELL_ELEMENT}.${MAIN_GRID.CLASSES.INVALID_PLACEMENT}`;\n  },\n  get VALID_PLACEMENT_SELECTOR() {\n    return `${MAIN_GRID.PROPERTIES.CELL_ELEMENT}.${MAIN_GRID.CLASSES.VALID_PLACEMENT}`;\n  },\n  CELL_SELECTOR: (coordinates) =>\n    createAttributeSelector({\n      elementType: MAIN_GRID.PROPERTIES.CELL_ELEMENT,\n      attribute: MAIN_GRID.PROPERTIES.ATTRIBUTES.CELL_COORDINATES_DATA,\n      value: coordinates\n    }),\n  PLACED_ENTITY_SELECTOR: (id) =>\n    createAttributeSelector({\n      elementType: MAIN_GRID.PROPERTIES.CELL_ELEMENT,\n      attribute: MAIN_GRID.PROPERTIES.ATTRIBUTES.PLACED_ENTITY_NAME,\n      value: id\n    })\n};\n","\n      import API from \"!../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../../node_modules/css-loader/dist/cjs.js!./main-grid-styles.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../../node_modules/css-loader/dist/cjs.js!./main-grid-styles.css\";\n       export default content && content.locals ? content.locals : undefined;\n","import { ORIENTATIONS } from '../../../../../../Utility/constants/common';\nimport { COMMON_GRID } from '../../../../common/gridConstants';\nimport { MOUSE_EVENTS } from '../../../../../../Utility/constants/dom/domEvents';\nimport {\n  convertToInternalFormat,\n  convertToDisplayFormat\n} from '../../../../../../Utility/utils/coordinatesUtils';\n\nconst CLASSES = {\n  PLACED_SHIP: 'placed-ship',\n  INVALID_PLACEMENT: 'invalid-placement',\n  VALID_PLACEMENT: 'valid-placement'\n};\n\n/**\n * Initializes a PreviewManager which provides the interface with a real-time preview depicting a ships potential placement at a given location within the grid.\n *\n * @param {Object} detail Initialization detail.\n * @param {HTMLElement} gridElement HTML element representing the placement grid interface.\n * @param {number} maxVertical The maximum vertical value of the grid interface.\n * @param {number} maxHorizontal The maximum horizontal value of the grid interface.\n * @param {string} letterAxis Defines the grid axis which is labeled using letters.\n * @param {function} getCell Function to retrieve specific cell within the provided grid element.\n * @returns {Object} Interface for managing the preview display.\n */\nexport const PreviewManager = ({\n  gridElement = null,\n  maxVertical = null,\n  maxHorizontal = null,\n  letterAxis = null,\n  getCell = null\n} = {}) => {\n  const currentTarget = { coordinates: null };\n  const grid = {\n    element: gridElement,\n    maxVertical,\n    maxHorizontal,\n    letterAxis,\n    getCell\n  };\n  const currentShip = { orientation: null, length: null };\n\n  /**\n   * Calculates and returns a list of cells for placement preview based on the starting cell and ship orientation.\n   * It considers the ship's orientation (vertical/horizontal) and length to determine which cells will be occupied.\n   * @param {string} startingCoordinates String representation of the cell coordinates where the preview starts.\n   * @returns {array} Array of valid cells for preview.\n   */\n  const calculateCells = (startingCoordinates) => {\n    /**\n     * Dynamically calculates the valid cells a ship can occupy.\n     * Keeps all placement cells within the bounds of the grid.\n     *\n     * @param {number} start Starting cell row or column.\n     * @param {number} length Selected Ship's length.\n     * @param {number} max Grid's maximum row or column.\n     * @returns {object} Starting and Ending row or column.\n     */\n    const getStartEnd = (start, length, max) => {\n      const end = Math.min(start + length - 1, max);\n      return {\n        start: Math.max(end - length + 1, 0),\n        end\n      };\n    };\n    const isVertical = currentShip.orientation === ORIENTATIONS.VERTICAL;\n    const verticalStrategy = (index, coordinates) =>\n      convertToDisplayFormat(index, coordinates[1], grid.letterAxis);\n    const horizontalStrategy = (index, coordinates) =>\n      convertToDisplayFormat(coordinates[0], index, grid.letterAxis);\n    const cells = [];\n    const coordinates = convertToInternalFormat(startingCoordinates);\n    const startMax = isVertical\n      ? { max: grid.maxVertical, startCoordinate: coordinates[0] }\n      : { max: grid.maxHorizontal, startCoordinate: coordinates[1] };\n    const { start, end } = getStartEnd(startMax.startCoordinate, currentShip.length, startMax.max);\n    const strategy = isVertical ? verticalStrategy : horizontalStrategy;\n    for (let i = start; i <= end; i++) {\n      cells.push(strategy(i, coordinates));\n    }\n    return cells;\n  };\n\n  /**\n   * Dynamically displays the placement preview in provided grid interface.\n   *\n   * @param {string[]} cells Array of display-formatted coordinates.\n   */\n  const displayPlacementPreview = (cells) => {\n    const isAtopAnotherShip = (cell) => cell.classList.contains(CLASSES.PLACED_SHIP);\n    clearPlacementPreview(grid.element);\n    cells.forEach((coordinates) => {\n      const cell = grid.getCell(coordinates);\n      if (isAtopAnotherShip(cell)) cell.classList.add(CLASSES.INVALID_PLACEMENT);\n      else cell.classList.add(CLASSES.VALID_PLACEMENT);\n    });\n  };\n\n  /**\n   * Clears all placement preview stylings from the grid interface.\n   */\n  const clearPlacementPreview = () => {\n    grid.element\n      .querySelectorAll(`.${CLASSES.VALID_PLACEMENT}, .${CLASSES.INVALID_PLACEMENT}`)\n      .forEach((cell) => {\n        cell.classList.remove(CLASSES.VALID_PLACEMENT, CLASSES.INVALID_PLACEMENT);\n      });\n  };\n\n  /**\n   * Calculates and displays the placement preview cells.\n   *\n   * @param {string} targetCoordinates Display-formatted coordinates of target cell.\n   */\n  const processPreview = (targetCoordinates) => {\n    const cells = calculateCells(targetCoordinates);\n    displayPlacementPreview(cells);\n  };\n\n  /**\n   * Listens for mouse-over events within the given grid interface to update an display the preview in real-time.\n   *\n   * @param {Event} e DOM-level mouse-over event.\n   */\n  const handleMouseOver = (e) => {\n    if (!currentShip.orientation) return;\n    const target = e.target;\n    if (!target.classList.contains(COMMON_GRID.CLASSES.CELL)) {\n      currentTarget.coordinates = null;\n      clearPlacementPreview();\n    }\n    const targetCell = e.target.closest(COMMON_GRID.CELL_SELECTOR);\n    if (!targetCell) return;\n    currentTarget.coordinates = targetCell.dataset.coordinates;\n    if (!currentTarget.coordinates) return;\n    processPreview(currentTarget.coordinates);\n  };\n\n  return {\n    enable: () => {\n      grid.element.addEventListener(MOUSE_EVENTS.OVER, handleMouseOver);\n    },\n    disable: () => {\n      clearPlacementPreview();\n      grid.element.removeEventListener(MOUSE_EVENTS.OVER, handleMouseOver);\n    },\n    updateOrientation: (newOrientation) => {\n      clearPlacementPreview();\n      currentShip.orientation = newOrientation;\n      if (!currentTarget.coordinates) return;\n      processPreview(currentTarget.coordinates);\n    },\n    setCurrentEntity: ({ length, orientation }) => {\n      clearPlacementPreview();\n      currentShip.length = length;\n      currentShip.orientation = orientation;\n    },\n    initializeGrid: ({ element, maxVertical, maxHorizontal, letterAxis, getCell }) => {\n      grid.element = element;\n      grid.maxVertical = maxVertical;\n      grid.maxHorizontal = maxHorizontal;\n      grid.letterAxis = letterAxis;\n      grid.getCell = getCell;\n    },\n    reset: () => {\n      grid.element?.removeEventListener(MOUSE_EVENTS.OVER, handleMouseOver);\n      grid.element = null;\n      grid.maxVertical = null;\n      grid.maxHorizontal = null;\n      grid.letterAxis = null;\n      grid.getCell = null;\n      currentShip.length = null;\n      currentShip.orientation = null;\n    }\n  };\n};\n","import { MAIN_GRID } from '../../../common/mainGridConstants';\nimport { ListenerManager } from '../../../../../../Utility/uiBuilderUtils/ListenerManager';\nimport { PreviewManager } from './PreviewManager';\nimport { MOUSE_EVENTS } from '../../../../../../Utility/constants/dom/domEvents';\n\nconst LISTENER_MANAGER_KEYS = {\n  SUBMIT_PLACEMENTS: 'submitPlacements',\n  REQUEST_PLACEMENT: 'entityRequestPlacement'\n};\n\n/**\n * Facilitates interaction with the Main Grid UI for entity placement, leveraging a preview and listener managers.\n */\nexport const MainGridPlacementView = ({\n  mainGridElement,\n  submitPlacementsButtonElement,\n  previewConfig\n}) => {\n  let isInitialized = false;\n  const listenerManager = ListenerManager();\n  const previewManager = PreviewManager(previewConfig);\n\n  /**\n   * Checks if the specified entity is already placed on the grid.\n   */\n  const isEntityPlaced = (entityID) =>\n    mainGridElement.querySelector(MAIN_GRID.PLACED_ENTITY_SELECTOR(entityID)) !== null;\n\n  /**\n   * Determines if the proposed placement is valid within grid constraints and absence of overlaps.\n   */\n  const isValidPlacement = () =>\n    mainGridElement.querySelector(MAIN_GRID.INVALID_PLACEMENT_SELECTOR) === null &&\n    mainGridElement.querySelector(MAIN_GRID.VALID_PLACEMENT_SELECTOR) !== null;\n\n  /**\n   * Retrieves cells occupied by a placed entity.\n   */\n  const getEntityPlacementCells = (entityID) =>\n    mainGridElement.querySelectorAll(MAIN_GRID.PLACED_ENTITY_SELECTOR(entityID));\n\n  /**\n   * Updates the UI to reflect an entity's placement and disables preview functionality.\n   */\n  const displayPlacedEntity = (placementCells, id) => {\n    placementCells.forEach((cell) => {\n      cell.classList.replace(MAIN_GRID.CLASSES.VALID_PLACEMENT, MAIN_GRID.CLASSES.PLACED_ENTITY);\n      cell.setAttribute(MAIN_GRID.PROPERTIES.ATTRIBUTES.PLACED_ENTITY_NAME, id);\n      cell.textContent = id.charAt(0).toUpperCase();\n    });\n    previewManager.disable();\n  };\n\n  /**\n   * Clears the display of a previously placed entity from the grid.\n   */\n  const clearPlacedEntity = (entityID) => {\n    const entityCells = getEntityPlacementCells(entityID);\n    entityCells.forEach((cell) => {\n      cell.classList.remove(MAIN_GRID.CLASSES.PLACED_ENTITY);\n      cell.removeAttribute(MAIN_GRID.PROPERTIES.ATTRIBUTES.PLACED_ENTITY_NAME);\n      cell.textContent = '';\n    });\n  };\n\n  /**\n   * Processes and validates a placement request, updating the UI if successful.\n   */\n  const processPlacementRequest = (id) => {\n    if (!isValidPlacement()) return;\n    const placementCells = [\n      ...mainGridElement.querySelectorAll(MAIN_GRID.VALID_PLACEMENT_SELECTOR)\n    ];\n    displayPlacedEntity(placementCells, id);\n    const placedCoordinates = placementCells.map((cell) => cell.dataset.coordinates);\n    return placedCoordinates;\n  };\n\n  /**\n   * Sets up event listeners for placement and submission actions, enabling interaction with the grid.\n   *\n   * @param {function} submitPlacementsCallback Function to handle placement submissions.\n   * @param {function} requestPlacementCallback Function for handle individual placement requests.\n   */\n  const initialize = (submitPlacementsCallback, requestPlacementCallback) => {\n    if (isInitialized) return;\n    listenerManager.addController({\n      key: LISTENER_MANAGER_KEYS.SUBMIT_PLACEMENTS,\n      element: submitPlacementsButtonElement,\n      event: MOUSE_EVENTS.CLICK,\n      callback: submitPlacementsCallback,\n      enable: false\n    });\n    listenerManager.addController({\n      element: mainGridElement,\n      event: MOUSE_EVENTS.CLICK,\n      callback: requestPlacementCallback,\n      key: LISTENER_MANAGER_KEYS.REQUEST_PLACEMENT,\n      enable: false\n    });\n    previewManager.enable();\n    isInitialized = true;\n  };\n\n  const enableSubmitPlacements = () =>\n    listenerManager.enableListener(LISTENER_MANAGER_KEYS.SUBMIT_PLACEMENTS);\n  const disableSubmitPlacements = () =>\n    listenerManager.disableListener(LISTENER_MANAGER_KEYS.SUBMIT_PLACEMENTS);\n\n  const enableRequestPlacements = () => {\n    previewManager.enable();\n    listenerManager.enableListener(LISTENER_MANAGER_KEYS.REQUEST_PLACEMENT);\n  };\n  const disableRequestPlacements = () => {\n    previewManager.disable();\n    listenerManager.disableListener(LISTENER_MANAGER_KEYS.REQUEST_PLACEMENT);\n  };\n\n  return {\n    initialize,\n    processPlacementRequest,\n    enable: {\n      placementRequest: () => enableRequestPlacements(),\n      submitPlacements: () => enableSubmitPlacements(),\n      all: () => {\n        enableRequestPlacements();\n        enableSubmitPlacements();\n      }\n    },\n    disable: {\n      placementRequest: () => disableRequestPlacements(),\n      submitPlacements: () => disableSubmitPlacements(),\n      all: () => {\n        disableRequestPlacements();\n        disableSubmitPlacements();\n      }\n    },\n    update: {\n      preview: {\n        selectedEntity: ({ id, length, orientation }) => {\n          if (isEntityPlaced(id)) clearPlacedEntity(id);\n          previewManager.setCurrentEntity({ length, orientation });\n          previewManager.enable();\n        },\n        orientation: (orientation) => previewManager.updateOrientation(orientation)\n      },\n      submitPlacementsButtonContainer: (container) => {\n        submitPlacementsButtonElement.remove();\n        container.append(submitPlacementsButtonElement);\n      }\n    },\n    reset: () => {\n      previewManager.reset();\n      listenerManager.reset();\n      submitPlacementsButtonElement.remove();\n      isInitialized = false;\n    }\n  };\n};\n","import { MainGridPlacementController } from './core/MainGridPlacementController';\nimport { ManagerFactory } from '../../../../../Utility/ManagerFactory';\n\nconst MAIN_GRID_PLACEMENT_EVENTS = {\n  PROCESSED_PLACEMENT: 'gridPlacementProcessed',\n  SUBMIT: 'gridPlacementsFinalizationRequested'\n};\n\n/**\n * Facilitates cross-component, event-driven placement related communication.\n *\n * @param {Object} detail Initialization detail.\n * @param {Object} detail.model Main grid data model.\n * @param {Object} detail.view Main grid view interface.\n * @param {function} detail.createHandler Function to create event handler instance.\n * @returns {Object} Interface for the main grid's placement functionality.\n */\nconst MainGridPlacementManager = ({ model, view, createHandler }) => {\n  const controller = MainGridPlacementController({ model, view });\n\n  /**\n   * Encapsulates entity placement logic and event communication.\n   */\n  const place = {\n    handler: null,\n    execute: (coordinates) => {\n      if (!coordinates) return;\n      place.handler.emit(coordinates);\n    },\n    on: (callback) => place.handler.on(callback),\n    off: (callback) => place.handler.off(callback),\n    init: () => (place.handler = createHandler(MAIN_GRID_PLACEMENT_EVENTS.PROCESSED_PLACEMENT)),\n    reset: () => place.handler.reset()\n  };\n\n  /**\n   * Encapsulates placement submission logic and event communication.\n   */\n  const submit = {\n    handler: null,\n    execute: () => {\n      controller.reset();\n      submit.handler.emit();\n    },\n    toggle: ({ data }) => controller.toggleSubmission(data),\n    on: (callback) => submit.handler.on(callback),\n    off: (callback) => submit.handler.off(callback),\n    init: () => (submit.handler = createHandler(MAIN_GRID_PLACEMENT_EVENTS.SUBMIT)),\n    reset: () => submit.handler.reset()\n  };\n\n  /**\n   * Initializes placement and placement submission event handlers. Assigns callbacks to interface.\n   */\n  const start = () => {\n    place.init();\n    submit.init();\n    controller.initialize(submit.execute, place.execute);\n  };\n  /**\n   * Resets event handlers and the placement controller.\n   */\n  const end = () => {\n    submit.reset();\n    place.reset();\n    controller.reset();\n  };\n\n  return {\n    start,\n    end,\n    updateOrientation: ({ data }) => controller.updateOrientation(data),\n    updateSelectedEntity: ({ data }) => {\n      const { id, length, orientation } = data;\n      controller.updateSelectedEntity(id, length, orientation);\n    },\n    toggleSubmit: (isReady) => submit.toggle(isReady),\n    onPlace: (callback) => place.on(callback),\n    offPlace: (callback) => place.off(callback),\n    onSubmit: (callback) => submit.on(callback),\n    offSubmit: (callback) => submit.off(callback)\n  };\n};\n\nexport const PlacementManagerFactory = ({ model, view, createHandler }) =>\n  ManagerFactory({\n    ManagerBuilder: MainGridPlacementManager,\n    initialDetails: { model, view, createHandler },\n    validateDetails: (details) => details.model && details.view && details.createHandler\n  });\n","import { MainGridPlacementView } from './MainGridPlacementView';\nimport { convertToInternalFormat } from '../../../../../../Utility/utils/coordinatesUtils';\n\n/**\n * Manages the main grid's placement logic, state, and interaction with the user interface.\n *\n * @param {Object} detail Contains initialization data including the data model and view.\n * @returns {Object} Provides methods to control the grid placement process.\n */\nexport const MainGridPlacementController = ({ model, view }) => {\n  let isInitialized = false;\n  let selectedEntityID = null;\n  const previewConfig = {\n    gridElement: view.elements.getWrapper(),\n    getCell: view.getCell,\n    maxVertical: model.getMaxVertical(),\n    maxHorizontal: model.getMaxHorizontal(),\n    letterAxis: model.getLetterAxis()\n  };\n  const placementView = MainGridPlacementView({\n    mainGridElement: view.elements.getGrid(),\n    submitPlacementsButtonElement: view.elements.getSubmitPlacementsButton(),\n    previewConfig\n  });\n\n  /**\n   * Initializes the controller, setting up callbacks for UI interactions related to placement submission and requests.\n   *\n   * @param {function} submitPlacementsCallback Invoked when placements are submitted.\n   * @param {function} handleRequestCallback Invoked with coordinates upon a placement request.\n   */\n  const initialize = (submitPlacementsCallback, handleRequestCallback) => {\n    if (isInitialized) return;\n    const requestPlacementCallback = (e) => {\n      const coordinates = requestPlacement(e);\n      if (coordinates) handleRequestCallback(coordinates);\n    };\n    placementView.initialize(submitPlacementsCallback, requestPlacementCallback);\n    isInitialized = true;\n  };\n\n  /**\n   * Processes placement requests from the UI, updating the model and view accordingly.\n   * Throws an error if no entity is selected for placement.\n   *\n   * @param {Event} e The DOM event triggered by the placement request.\n   * @returns {array[number[]]} The coordinates where the entity is placed, if successful.\n   */\n  const requestPlacement = (e) => {\n    if (e.button !== 0) return;\n    if (!selectedEntityID) throw new Error(`Entity must be selected for placement.`);\n    const placedCoordinates = placementView\n      .processPlacementRequest(selectedEntityID)\n      ?.map(convertToInternalFormat);\n    if (!placedCoordinates) return false;\n    model.place(placedCoordinates, selectedEntityID);\n    placementView.disable.placementRequest();\n    selectedEntityID = null;\n    return placedCoordinates;\n  };\n\n  /**\n   * Updates the view to reflect the selection of an entity, preparing for its placement.\n   *\n   * @param {string} id The unique identifier of the selected entity.\n   * @param {number} length The length of the selected entity.\n   * @param {string} orientation The orientation of the selected entity.\n   */\n  const updateSelectedEntity = (id, length, orientation) => {\n    if (model.isEntityPlaced(id)) model.removePlacedEntity(id);\n    placementView.update.preview.selectedEntity({ id, length, orientation });\n    placementView.enable.placementRequest();\n    selectedEntityID = id;\n  };\n\n  /**\n   * Updates the orientation preview for the currently selected entity.\n   *\n   * @param {string} orientation The new orientation value.\n   */\n  const updateOrientation = (orientation) => placementView.update.preview.orientation(orientation);\n\n  /**\n   * Toggles the ability to submit placements based on the current state.\n   *\n   * @param {boolean} isReady Indicates whether submission should be enabled or disabled.\n   */\n  const toggleSubmission = (isReady) => {\n    if (isReady) placementView.enable.submitPlacements();\n    else placementView.disable.submitPlacements();\n  };\n\n  /**\n   * Resets the controller to its initial state, preparing for a new placement process.\n   */\n  const reset = () => {\n    if (!isInitialized) return;\n    placementView.reset();\n    isInitialized = false;\n  };\n\n  return {\n    initialize,\n    reset,\n    toggleSubmission,\n    updateOrientation,\n    updateSelectedEntity\n  };\n};\n","import { STATUSES } from '../../../../Utility/constants/common';\nimport { convertToDisplayFormat } from '../../../../Utility/utils/coordinatesUtils';\nimport { ManagerFactory } from '../../../../Utility/ManagerFactory';\n\nconst INCOMING_ATTACK_PROCESSED = 'incomingAttackProcessed';\n\n/**\n * Provides event-driven communication for the Main Grid's combat functionality.\n *\n * @param {Object} detail Contains the Main Grid's data model, view, and create handler function.\n * @returns {Object} Methods to interact with main grid's combat capabilities.\n */\nconst MainGridCombatManager = ({ model, view, createHandler }) => {\n  /**\n   * Encapsulates incoming attack logic and event-communication.\n   */\n  const incomingAttack = {\n    handler: null,\n    process: ({ data }) => {\n      const { coordinates, cellValue } = model.processIncomingAttack(data);\n      const [x, y] = data;\n      const displayCoordinates = convertToDisplayFormat(x, y, model.getLetterAxis());\n      if (cellValue.status === STATUSES.HIT) view.displayShipHit(displayCoordinates);\n      incomingAttack.handler.emit({ coordinates, cellValue });\n    },\n    init: () => {\n      if (incomingAttack.handler) return;\n      incomingAttack.handler = createHandler(INCOMING_ATTACK_PROCESSED);\n    },\n    on: (callback) => incomingAttack.handler.on(callback),\n    off: (callback) => incomingAttack.handler.off(callback),\n    reset: () => incomingAttack.handler.reset()\n  };\n  return {\n    processIncomingAttack: incomingAttack.process,\n    start: incomingAttack.init,\n    end: incomingAttack.reset,\n    onIncomingAttackProcessed: incomingAttack.on,\n    offIncomingAttackProcessed: incomingAttack.off\n  };\n};\nexport const CombatManagerFactory = ({ model, view, createHandler }) =>\n  ManagerFactory({\n    ManagerBuilder: MainGridCombatManager,\n    initialDetails: { model, view, createHandler },\n    validateDetails: (details) => details.model && details.view && details.createHandler\n  });\n","import { MainGridModel } from './main/model/MainGridModel';\nimport { MainGridView } from './main/view/MainGridView';\nimport { EventEmitter } from '../../../Events/core/EventEmitter';\nimport { PlacementManagerFactory } from './Managers/placement/MainGridPlacementManager';\nimport { EventHandler } from '../../../Events/management/EventHandler';\nimport { CombatManagerFactory } from './Managers/MainGridCombatManager';\n\n/**\n * Initializes a MainGridController to manage main grid interactions.\n * The main grid is responsible for processing incoming attacks and managing ship placements.\n *\n * @param {Object} boardConfig Contains board configuration data\n * @returns {Object} Interface for interacting with Main Grid component.\n */\nexport const MainGridController = (boardConfig) => {\n  const { numberOfRows, numberOfCols, letterAxis } = boardConfig;\n  const model = MainGridModel({ numberOfRows, numberOfCols, letterAxis });\n  const view = MainGridView({ numberOfRows, numberOfCols, letterAxis });\n  const emitter = EventEmitter();\n  const createHandler = (eventName, callback = (args) => args) =>\n    EventHandler(emitter, eventName, callback);\n\n  const placementManager = PlacementManagerFactory({ model, view, createHandler });\n  const getPlacementManager = () => placementManager.getManager();\n\n  const combatManager = CombatManagerFactory({ model, view, createHandler });\n  const getCombatManager = () => combatManager.getManager();\n\n  return {\n    getPlacementManager,\n    getCombatManager,\n    view: {\n      attachTo: (container) => view.attachTo(container),\n      attachWithinWrapper: (element) => view.attachWithinWrapper(element),\n      getGrid: () => view.elements.getGrid(),\n      getWrapper: () => view.elements.getWrapper(),\n      getSubmitButton: () => view.elements.getSubmitPlacementsButton(),\n      hide: () => view.hide(),\n      show: () => view.show(),\n      enable: () => view.enable(),\n      disable: () => view.disable()\n    }\n  };\n};\n","import {\n  copyGrid,\n  isWithinGrid,\n  getValueAt,\n  createGrid\n} from '../../../../../Utility/utils/gridUtils';\nimport { LETTER_AXES, STATUSES } from '../../../../../Utility/constants/common';\nimport { EntityPlacementManager } from './EntityPlacementManager';\n\nexport const MainGridModel = ({\n  numberOfRows = 10,\n  numberOfCols = 10,\n  letterAxis = LETTER_AXES.ROW\n} = {}) => {\n  if (numberOfRows > 26 || numberOfCols > 26)\n    throw new Error('Board cannot have more than 26 rows or columns.');\n  const mainGrid = createGrid(numberOfRows, numberOfCols, { status: STATUSES.EMPTY, id: null });\n  const maxVertical = mainGrid.length - 1;\n  const maxHorizontal = mainGrid[0].length - 1;\n\n  const isInBounds = (coordinates) => isWithinGrid(mainGrid, coordinates);\n  const valueAt = (coordinates) => getValueAt(mainGrid, coordinates);\n\n  const setCellStatus = (coordinates, status) => {\n    const [row, col] = coordinates;\n    mainGrid[row][col].status = status;\n  };\n\n  const entityPlacementManager = EntityPlacementManager({\n    mainGrid,\n    valueAt,\n    setCellStatus,\n    isInBounds\n  });\n\n  const processIncomingAttack = (coordinates) => {\n    const cellValue = valueAt(coordinates);\n    if (cellValue.status === STATUSES.OCCUPIED) setCellStatus(coordinates, STATUSES.HIT);\n    else setCellStatus(coordinates, STATUSES.MISS);\n    return { coordinates, cellValue };\n  };\n\n  return {\n    place: (coordinates, id) => entityPlacementManager.placeEntity(coordinates, id),\n    removePlacedEntity: (id) => entityPlacementManager.removePlacedEntity(id),\n    isEntityPlaced: (id) => entityPlacementManager.isEntityPlaced(id),\n    getEntityPlacements: () => entityPlacementManager.getPlacedEntityMap(),\n    processIncomingAttack,\n    isInBounds,\n    setCellStatus,\n    getMainGrid: () => copyGrid(mainGrid),\n    getLetterAxis: () => letterAxis,\n    getMaxVertical: () => maxVertical,\n    getMaxHorizontal: () => maxHorizontal,\n    getDimensions: () => ({ width: mainGrid[0].length, height: mainGrid.length }),\n    reset() {\n      mainGrid.length = 0;\n      entityPlacementManager.reset();\n      mainGrid.push(...createGrid(numberOfRows, numberOfCols));\n    }\n  };\n};\n","import { STATUSES } from '../../../../../Utility/constants/common';\n\n/**\n * Provides placement management within a 2D Grid array structure.\n * The grid should be structured as an array of rows, with each row being an array of cell objects.\n * Each cell object should at least contain a 'status' property.\n *\n * @param {Object} detail Includes the main grid and a function to check if coordinates are within bounds.\n * @param {array[array[Object]]} mainGrid 2D array representing the grid, where each cell is an object with at least a 'status' property.\n * @param {function} isInBounds Function to check if a given coordinate pair is within the grid bounds.\n * @returns {Object} Methods to manage entity placement within the grid.\n */\nexport const EntityPlacementManager = ({ mainGrid, isInBounds }) => {\n  const placedEntityCoordinates = new Map();\n  const isEntityPlaced = (id) => placedEntityCoordinates.has(id);\n\n  /**\n   * Determines if a placement is valid or not, based on the specified start and end coordinates.\n   * Checks each cell within the rectangular area defined by these coordinates for emptiness.\n   *\n   * @param {number[]} start Coordinate pair where placement starts ([row, col]).\n   * @param {number[]} end Coordinate pair where placement ends ([row, col]).\n   * @returns {boolean} True if the placement area is within bounds and all cells are empty, false otherwise.\n   */\n  const isPlacementValid = (start, end) => {\n    if (!isInBounds(start) || !isInBounds(end)) return false;\n    for (let row = start[0]; row <= end[0]; ++row) {\n      for (let col = start[1]; col <= end[1]; ++col) {\n        if (!mainGrid[row][col].status === STATUSES.EMPTY) return false;\n      }\n    }\n    return true;\n  };\n  /**\n   * Removes a placed entity from the grid array.\n   *\n   * @param {string} entityID Entity identifier.\n   */\n  const removePlacedEntity = (entityID) => {\n    const coordinates = placedEntityCoordinates.get(entityID);\n    if (coordinates) {\n      coordinates.forEach(([row, col]) => (mainGrid[row][col] = { status: STATUSES.EMPTY }));\n      placedEntityCoordinates.delete(entityID);\n    }\n  };\n\n  /**\n   * Places an entity within the specified area of the grid, defined by an array of coordinate pairs.\n   * Each cell covered by the area from start to end coordinates is updated to an OCCUPIED status.\n   *\n   * @param {array[number[]]} coordinates Array of coordinate pairs defining the placement area.\n   * @param {string} entityID Unique identifier for the entity being placed.\n   * @returns {boolean} True if the entity was successfully placed, false if the placement was invalid.\n   */\n  const placeEntity = (coordinates, entityID) => {\n    const start = coordinates[0];\n    const end = coordinates[coordinates.length - 1];\n    const entityPlacementCoordinates = [];\n    if (isPlacementValid(start, end)) {\n      for (let row = start[0]; row <= end[0]; ++row) {\n        for (let col = start[1]; col <= end[1]; ++col) {\n          const placement = [row, col];\n          entityPlacementCoordinates.push(placement);\n          mainGrid[row][col] = { status: STATUSES.OCCUPIED, id: entityID };\n        }\n      }\n      placedEntityCoordinates.set(entityID, entityPlacementCoordinates);\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  return {\n    getPlacedEntityMap: () => placedEntityCoordinates,\n    placeEntity,\n    removePlacedEntity,\n    isEntityPlaced,\n    reset: () => placedEntityCoordinates.clear()\n  };\n};\n","import { MAIN_GRID } from '../../common/mainGridConstants';\nimport { buildMainGridUIObj } from './buildMainGridUIObj';\nimport './main-grid-styles.css';\n\nexport const MainGridView = ({ numberOfRows, numberOfCols, letterAxis }) => {\n  const elements = {};\n  const buildAndSetElements = () => {\n    const { wrappedMainGridElement, submitPlacementsButtonElement } = buildMainGridUIObj({\n      numberOfRows,\n      numberOfCols,\n      letterAxis\n    });\n    const grid = wrappedMainGridElement.querySelector(`.${MAIN_GRID.TYPE}`);\n    Object.assign(elements, { wrappedMainGridElement, submitPlacementsButtonElement, grid });\n  };\n\n  const getCell = (coordinates) =>\n    elements.grid.querySelector(MAIN_GRID.CELL_SELECTOR(coordinates));\n\n  buildAndSetElements();\n  return {\n    getCell,\n    attachTo: (container) => container.append(elements.wrappedMainGridElement),\n    attachWithinWrapper: (element) => elements.wrappedMainGridElement.append(element),\n    displayShipHit: (coordinates) => {\n      const cell = getCell(coordinates);\n      cell.classList.add(MAIN_GRID.CLASSES.HIT_MARKER);\n    },\n    elements: {\n      getWrapper: () => elements.wrappedMainGridElement,\n      getGrid: () => elements.grid,\n      getSubmitPlacementsButton: () => elements.submitPlacementsButtonElement\n    },\n    reset: () => {\n      buildAndSetElements();\n    }\n  };\n};\n","import { COMMON_ELEMENTS } from '../../../../../Utility/constants/dom/elements';\nimport { COMMON_GRID } from '../../../common/gridConstants';\nimport { MAIN_GRID } from '../../common/mainGridConstants';\nimport {\n  buildUIObj,\n  buildElementFromUIObj\n} from '../../../../../Utility/uiBuilderUtils/uiBuilders';\nimport {\n  buildGridCellObj,\n  buildGridHeaderObj,\n  buildGridRowObj,\n  generateLabels,\n  getLabelTypes,\n  wrapColLabels\n} from '../../../../../Utility/uiBuilderUtils/gridBuilderUtils';\nimport { BASE_CLASSES } from '../../../../../Utility/constants/dom/baseStyles';\n\n/**\n * Creates the specified grid's structured object.\n * Used to create the interface element.\n *\n * @param {number} rows Number of rows the grid should contain.\n * @param {number} cols Number of columns the grid should contain.\n * @param {string} letterAxis The axis to label with letters.\n * @param {string} gridType Type of grid to build.\n * @returns {Object} Complete structured grid object to be built into an HTML Element.\n */\n\nexport const buildMainGridUIObj = ({ numberOfRows, numberOfCols, letterAxis }) => {\n  const headerObj = buildGridHeaderObj({\n    headerClass: `${MAIN_GRID.CLASSES.HEADER} grid-header`,\n    headerText: MAIN_GRID.PROPERTIES.HEADER_TEXT\n  });\n  const labelTypes = getLabelTypes(letterAxis);\n  const colLabelObjs = generateLabels({\n    count: numberOfCols,\n    type: labelTypes.col,\n    axisLabelClass: COMMON_GRID.CLASSES.LABELS.COL\n  });\n  const rowLabelObjs = generateLabels({\n    count: numberOfRows,\n    type: labelTypes.row,\n    axisLabelClass: COMMON_GRID.CLASSES.LABELS.ROW\n  });\n\n  const buildMainGridCell = (coordinateAttribute) =>\n    buildGridCellObj({\n      elementType: MAIN_GRID.PROPERTIES.CELL_ELEMENT,\n      attributes: {\n        [MAIN_GRID.PROPERTIES.ATTRIBUTES.CELL_COORDINATES_DATA]: `${coordinateAttribute}`\n      }\n    });\n\n  const rowObjs = rowLabelObjs.map((rowLabelObj) =>\n    buildGridRowObj({\n      rowLabelObj,\n      cellObjs: colLabelObjs.map((colLabelObj) =>\n        buildMainGridCell(`${rowLabelObj.text}${colLabelObj.text}`)\n      )\n    })\n  );\n\n  const mainGridUIObj = buildUIObj(COMMON_ELEMENTS.DIV, {\n    attributes: {\n      class: `${MAIN_GRID.CLASSES.WRAPPER} grid-wrapper`\n    },\n    children: [\n      buildUIObj(COMMON_ELEMENTS.DIV, {\n        attributes: { class: MAIN_GRID.TYPE },\n        children: [headerObj, wrapColLabels({ labels: colLabelObjs }), ...rowObjs]\n      })\n    ]\n  });\n\n  const submitPlacementsButtonUIObj = buildUIObj(COMMON_ELEMENTS.BUTTON, {\n    text: 'Submit Placements',\n    attributes: { class: `${BASE_CLASSES.BUTTON} submit-ships-placement-button`, disabled: '' }\n  });\n  return {\n    wrappedMainGridElement: buildElementFromUIObj(mainGridUIObj),\n    submitPlacementsButtonElement: buildElementFromUIObj(submitPlacementsButtonUIObj)\n  };\n};\n","import { TRACKING_GRID } from '../../common/trackingGridConstants';\nimport { COMMON_GRID } from '../../../common/gridConstants';\nimport { ListenerManager } from '../../../../../Utility/uiBuilderUtils/ListenerManager';\nimport { MOUSE_EVENTS } from '../../../../../Utility/constants/dom/domEvents';\n\nconst LISTENER_MANAGER_KEYS = {\n  SEND_ATTACK: 'sendAttack'\n};\n\nexport const TrackingGridCombatView = (view) => {\n  const gridElement = view.elements.getGrid();\n  let isInitialized = false;\n  let lastCell = null;\n  const listenerManager = ListenerManager();\n  const getTargetCoordinates = (e) =>\n    e.target.closest(`${TRACKING_GRID.PROPERTIES.CELL_ELEMENT}.${COMMON_GRID.CLASSES.CELL}`)?.value;\n\n  const initialize = (onAttackCallback) => {\n    if (isInitialized) return;\n    const onAttack = (e) => {\n      const coordinates = getTargetCoordinates(e);\n      if (!coordinates) return;\n      lastCell = view.getCell(coordinates);\n      onAttackCallback(coordinates);\n    };\n    listenerManager.addController({\n      element: gridElement,\n      key: LISTENER_MANAGER_KEYS.SEND_ATTACK,\n      event: MOUSE_EVENTS.CLICK,\n      callback: onAttack,\n      enable: false\n    });\n    isInitialized = true;\n  };\n  const displayResult = (result) => {\n    view.setCellStatus(lastCell, result);\n    lastCell = null;\n  };\n\n  const end = () => {\n    if (!isInitialized) return;\n    listenerManager.reset();\n    isInitialized = false;\n  };\n  return {\n    initialize,\n    displayResult,\n    enable: () => {\n      view.enable();\n      listenerManager.enableListener(LISTENER_MANAGER_KEYS.SEND_ATTACK);\n    },\n    disable: () => {\n      view.disable();\n      listenerManager.disableListener(LISTENER_MANAGER_KEYS.SEND_ATTACK);\n    },\n    end\n  };\n};\n","// Tracking Grid Component\nimport { TrackingGridCombatView } from '../main/view/TrackingGridCombatView';\nimport { ManagerFactory } from '../../../../Utility/ManagerFactory';\nimport { convertToInternalFormat } from '../../../../Utility/utils/coordinatesUtils';\n\nconst TRACKING_GRID_COMBAT_EVENTS = {\n  ATTACK_SENT: 'attackSent',\n  RESUlT_PROCESSED: 'sentAttackResultProcessed'\n};\n\n/**\n * Initializes a TrackingGridCombatManager which provides cross-component event-driven combat related communication.\n *\n * @param {Object} detail Initialization detail.\n * @param {Object} detail.view Tracking grid view interface.\n * @param {function} detail.createHandler Function to create event handler.\n * @returns {Object} Interface for tracking grid combat functionality.\n */\nconst TrackingGridCombatManager = ({ view, createHandler }) => {\n  const combatView = TrackingGridCombatView(view);\n\n  /**\n   * Encapsulates outgoing result logic and event communication.\n   */\n  const acceptResult = {\n    handler: null,\n    process: ({ data }) => {\n      const { result } = data;\n      combatView.displayResult(result);\n      acceptResult.handler.emit();\n    },\n    on: (callback) => acceptResult.handler.on(callback),\n    off: (callback) => acceptResult.handler.off(callback),\n    initialize: () =>\n      (acceptResult.handler = createHandler(TRACKING_GRID_COMBAT_EVENTS.RESUlT_PROCESSED)),\n    end: () => outgoingAttack.handler.reset()\n  };\n\n  /**\n   * Encapsulates outgoing attack logic and event communication.\n   */\n  const outgoingAttack = {\n    handler: null,\n    send: (displayCoordinates) => {\n      const coordinates = convertToInternalFormat(displayCoordinates);\n      outgoingAttack.handler.emit(coordinates);\n    },\n    enable: () => combatView.enable(),\n    disable: () => combatView.disable(),\n    on: (callback) => outgoingAttack.handler.on(callback),\n    off: (callback) => outgoingAttack.handler.off(callback),\n    initialize: () =>\n      (outgoingAttack.handler = createHandler(TRACKING_GRID_COMBAT_EVENTS.ATTACK_SENT)),\n    end: () => outgoingAttack.handler.reset()\n  };\n\n  /**\n   * Initializes tracking grid event handlers and assigns the send outgoing attack request event to the interface.\n   */\n  const start = () => {\n    outgoingAttack.initialize();\n    acceptResult.initialize();\n    combatView.initialize(outgoingAttack.send);\n  };\n\n  /**\n   * Resets the event handlers and disables attacks.\n   */\n  const end = () => {\n    outgoingAttack.end();\n    combatView.end();\n    acceptResult.end();\n  };\n\n  return {\n    start,\n    end,\n    enable: outgoingAttack.enable,\n    disable: outgoingAttack.disable,\n    acceptResult: acceptResult.process,\n    onResultProcessed: acceptResult.on,\n    offResultProcessed: acceptResult.off,\n    onSendAttack: outgoingAttack.on,\n    offSendAttack: outgoingAttack.off\n  };\n};\n\nexport const CombatManagerFactory = ({ view, createHandler }) =>\n  ManagerFactory({\n    ManagerBuilder: TrackingGridCombatManager,\n    initialDetails: { view, createHandler },\n    validateDetails: (details) => details.view && details.createHandler\n  });\n","import { TrackingGridView } from './main/view/TrackingGridView';\nimport { CombatManagerFactory } from './Managers/TrackingGridCombatManager';\nimport { EventEmitter } from '../../../Events/core/EventEmitter';\nimport { EventHandler } from '../../../Events/management/EventHandler';\n\n/**\n * Initializes a TrackingGridController which acts as the primary interface for interacting with the tracking grid component.\n * The tracking grid provides outgoing attack functionality and tracking.\n *\n * @param {Object} detail Initialize detail.\n * @returns {Object} Interface for interacting with tracking grid component.\n */\nexport const TrackingGridController = ({ numberOfRows, numberOfCols, letterAxis }) => {\n  const view = TrackingGridView({ numberOfRows, numberOfCols, letterAxis });\n\n  const emitter = EventEmitter();\n  const createHandler = (eventName, callback = (args) => args) =>\n    EventHandler(emitter, eventName, callback);\n\n  const combatManager = CombatManagerFactory({ view, createHandler });\n  const getCombatManager = () => combatManager.getManager();\n\n  return {\n    getCombatManager,\n    view: {\n      attachTo: (container) => view.attachTo(container),\n      attachWithinWrapper: (element) => view.attachWithinWrapper(element),\n      getGrid: () => view.elements.getGrid(),\n      getWrapper: () => view.elements.getWrapper(),\n      hide: () => view.hide(),\n      show: () => view.show(),\n      enable: () => view.enable(),\n      disable: () => view.disable()\n    }\n  };\n};\n","import { PlayerModel } from '../../Player/PlayerModel';\nimport { AIController } from '../../AI/AIController';\nimport { FleetController } from '../../Fleet/FleetController';\nimport { ShipController } from '../../Ship/ShipController';\nimport { MainGridController } from '../../Grids/MainGrid/MainGridController';\nimport { TrackingGridController } from '../../Grids/TrackingGrid/TrackingGridController';\nimport { PLAYERS } from '../../../Utility/constants/common';\n\n/**\n * Initializes a player's game component controllers.\n *\n * @param {array[Object]} fleetData Array of ship detail objects {id,length}.\n * @param {Object} boardSettings Contains board settings and grid configurations.\n * @returns {Object} Object containing configured controllers.\n */\nconst initializePlayerControllers = (fleetData, boardSettings) => ({\n  fleet: FleetController(fleetData.map((ship) => ShipController(ship))),\n  mainGrid: MainGridController(boardSettings),\n  trackingGrid: TrackingGridController(boardSettings)\n});\n\n/**\n * Configures and initializes a player for the game.\n * Creates the necessary models and controllers based on player type.\n *\n * @param {Object} detail Contains player settings, board configurations, and fleet data.\n * @param {Object} detail.playerSettings Settings specific to the player including type, id, and additional AI settings.\n * @param {Object} detail.boardSettings The board configuration including size and other relevant settings.\n * @param {array[Object]} detail.fleetData Information about the player's fleet including ship lengths and identifiers.\n * @returns {Object} An object containing the player's model and controllers for game interaction.\n */\nexport const initializePlayer = ({ playerSettings, boardSettings, fleetData }) => {\n  const player = { model: null, controllers: null };\n  if (playerSettings.type === PLAYERS.TYPES.AI) {\n    const { id, difficulty, attackDelay } = playerSettings;\n    const aiController = AIController({ id, difficulty, boardSettings, fleetData, attackDelay });\n    player.model = aiController.getPlayerModel();\n    player.controllers = aiController;\n  } else {\n    const { username, id, type } = playerSettings;\n    player.model = PlayerModel({ playerName: username, playerType: type, playerId: id });\n    player.controllers = initializePlayerControllers(fleetData, boardSettings);\n  }\n  return player;\n};\n","import { PLAYERS } from '../../Utility/constants/common';\nexport const PlayerModel = ({ playerName = '', playerType, playerId }) => {\n  if (!(playerId && typeof playerId === 'string')) throw new Error('Player ID not provided.');\n  let name = validateName(playerName);\n  let type = playerType;\n  const id = playerId;\n\n  // Prevents users from entering an empty name.\n  function validateName(name) {\n    if (typeof name !== 'string' || !name.trim()) return PLAYERS.DEFAULT_NAME;\n    else return name.trim();\n  }\n  return {\n    id,\n    isPlayer: () => true,\n    getName: () => name,\n    getId: () => id,\n    getType: () => type,\n    setName: (value) => (name = validateName(value)),\n    setType: (value) => (type = value)\n  };\n};\n","/**\n * Orchestrates the board's placement phase through the component managers and provided communication method.\n *\n * @param {Object} detail Initialization detail containing the board's placementView and component placement managers.\n * @returns {Object} Methods for starting and ending the placement phase.\n */\nexport const BoardPlacementManager = ({ placementView, placementManagers }) => {\n  const { fleet, mainGrid } = placementManagers;\n\n  let isInitialized = false;\n\n  /**\n   * Initializes the placement phases functionality.\n   *\n   * @param {function} handleFinalize Callback to communicate that the board's placements are finalized (phase is over).\n   */\n  const initializePlacement = (handleFinalize) => {\n    const { updateRotateButton, removeRotateButton } = placementView.init();\n    mainGrid.start();\n    fleet.start();\n    const onShipSelected = (data) => {\n      updateRotateButton(data);\n      mainGrid.updateSelectedEntity(data);\n    };\n    const onShipPlaced = (placementData) => {\n      fleet.place(placementData);\n      removeRotateButton();\n    };\n    fleet.onSelected(onShipSelected);\n    fleet.onOrientationToggled(mainGrid.updateOrientation);\n    fleet.onAllShipsPlaced(mainGrid.toggleSubmit);\n    mainGrid.onPlace(onShipPlaced);\n    mainGrid.onSubmit(handleFinalize);\n    isInitialized = true;\n  };\n\n  /**\n   * Ends the placement phase and cleans the state.\n   *\n   * @param {function} isFinalizeRequest Function to check if the request is from finalization.\n   */\n  const endPlacement = (isFinalizeRequest) => {\n    if (!isInitialized) return;\n    if (isFinalizeRequest && !fleet.isAllShipsPlaced())\n      throw new Error('Not all ships have been placed');\n    placementView.endTurn();\n    mainGrid.end();\n    fleet.end();\n    isInitialized = false;\n  };\n\n  /**\n   * Provides the finalize communication method and updates the interface.\n   *\n   * @param {function} onFinalize Function to communicate that the placement phase is over.\n   */\n  const startPlacement = (onFinalize) => {\n    const handleFinalize = () => {\n      endPlacement(true);\n      if (onFinalize) onFinalize();\n    };\n    initializePlacement(handleFinalize);\n    placementView.startTurn();\n  };\n\n  return {\n    startPlacement,\n    endPlacement\n  };\n};\n","\n      import API from \"!../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../node_modules/css-loader/dist/cjs.js!./board-style.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../node_modules/css-loader/dist/cjs.js!./board-style.css\";\n       export default content && content.locals ? content.locals : undefined;\n","import { COMMON_ELEMENTS } from '../../../../Utility/constants/dom/elements';\nimport { buildUIElement } from '../../../../Utility/uiBuilderUtils/uiBuilders';\n\nconst BOARD_CLASSES = {\n  CONTAINER: 'board',\n  BUTTONS_CONTAINER: 'board-buttons-container',\n  PLAYER_NAME_DISPLAY: 'player-name-display',\n  BUTTON_WRAPPER: `board-button-wrapper`,\n  UTILITY_CONTAINER: `board-utility-container`,\n  MAIN_GRID_UTILITY_CONTAINER: 'main-grid-utility-container',\n  TRACKING_GRID_UTILITY_CONTAINER: 'tracking-grid-utility-container',\n  MAIN_GRID_BUTTON_CONTAINER: 'main-grid-button-container',\n  TRACKING_FLEET_CONTAINER: 'tracking-fleet-container'\n};\n\nconst buildBoardContainer = (playerId) =>\n  buildUIElement(COMMON_ELEMENTS.DIV, {\n    attributes: { class: BOARD_CLASSES.CONTAINER, id: `${playerId}-board` }\n  });\n\nconst buildPlayerNameDisplay = (playerName) =>\n  buildUIElement(COMMON_ELEMENTS.DIV, {\n    text: playerName,\n    attributes: { class: BOARD_CLASSES.PLAYER_NAME_DISPLAY }\n  });\n\nconst buildButtonContainer = (classAttr = null) => {\n  let finalClass = BOARD_CLASSES.BUTTONS_CONTAINER;\n  if (classAttr) finalClass = `${finalClass} ${classAttr}`;\n  return buildUIElement(COMMON_ELEMENTS.DIV, {\n    attributes: { class: finalClass }\n  });\n};\n\nconst buildUtilityContainer = (classAttr) => {\n  let finalClass = BOARD_CLASSES.UTILITY_CONTAINER;\n  if (classAttr) finalClass = `${finalClass} ${classAttr}`;\n  return buildUIElement(COMMON_ELEMENTS.DIV, {\n    attributes: { class: finalClass }\n  });\n};\nconst buildTrackingFleetContainer = () =>\n  buildUIElement(COMMON_ELEMENTS.DIV, {\n    attributes: { class: BOARD_CLASSES.TRACKING_FLEET_CONTAINER }\n  });\n\nconst ButtonContainerManager = (container) => {\n  const wrappers = {};\n  const buildButtonWrapper = (id) =>\n    buildUIElement(COMMON_ELEMENTS.DIV, {\n      attributes: { class: `${id}-${BOARD_CLASSES.BUTTON_WRAPPER}` }\n    });\n  const addWrapper = (id) => {\n    const wrapper = buildButtonWrapper(id);\n    container.append(wrapper);\n    wrappers[id] = wrapper;\n  };\n  const getWrapper = (id) => {\n    if (!wrappers[id]) addWrapper(id);\n    return wrappers[id];\n  };\n  const updateButton = (id, newButton) => {\n    const wrapper = getWrapper(id);\n    wrapper.textContent = '';\n    wrapper.append(newButton);\n  };\n  const addButton = (id, button) => {\n    let wrapper = getWrapper(id);\n    if (!wrapper) buildButtonWrapper(id);\n    wrapper = getWrapper(id);\n    wrapper.append(button);\n  };\n  const removeButton = (id) => {\n    if (wrappers[id]) wrappers[id].textContent = '';\n  };\n  const removeWrapper = (id) => {\n    if (!wrappers[id]) return;\n    removeButton(id);\n    delete wrappers[id];\n  };\n  return {\n    addWrapper,\n    getWrapper,\n    updateButton,\n    addButton,\n    removeButton,\n    removeWrapper\n  };\n};\n\nexport {\n  BOARD_CLASSES,\n  buildBoardContainer,\n  buildPlayerNameDisplay,\n  buildButtonContainer,\n  buildUtilityContainer,\n  buildTrackingFleetContainer,\n  ButtonContainerManager\n};\n","import { BoardPlacementManager } from './Managers/BoardPlacementManager';\nimport { BoardCombatManager } from './Managers/BoardCombatManager';\nimport { BoardView } from './main/view/BoardView';\n\n/**\n * Orchestrates player component controllers into a cohesive board.\n *\n * @param {Object} config Configuration for board controller including player information, controllers for game elements, and display container.\n * @param {string} config.playerId Unique identifier for the player.\n * @param {string} config.playerName Name of the player.\n * @param {Object} config.controllers Controllers for fleet, mainGrid, and trackingGrid.\n * @param {string} config.gameMode Current game mode.\n * @param {HTMLElement} config.displayContainer Container for game display.\n * @returns {Object} An interface to manage board view, placement, and combat, including initialization and reset functionalities.\n */\nexport const BoardController = ({\n  playerId,\n  playerName,\n  controllers,\n  gameMode,\n  displayContainer\n}) => {\n  const { fleet, mainGrid, trackingGrid } = controllers;\n  const id = playerId;\n  const name = playerName;\n  const viewParameters = {\n    playerId,\n    playerName,\n    displayContainer,\n    gameMode,\n    views: {\n      mainGrid: mainGrid.view,\n      trackingGrid: trackingGrid.view,\n      fleet: fleet.view\n    }\n  };\n  const view = BoardView(viewParameters);\n\n  /**\n   * Encapsulates the initialization and management of the board's placement functionality.\n   */\n  const placement = {\n    manager: null,\n    loadManager: () => {\n      if (placement.manager) return;\n      placement.manager = BoardPlacementManager({\n        placementView: view.placementView,\n        placementManagers: {\n          fleet: fleet.getPlacementManager(),\n          mainGrid: mainGrid.getPlacementManager()\n        }\n      });\n    },\n    startPlacement: (handleFinalize) => {\n      if (!placement.manager) placement.loadManager();\n      const onFinalize = () => {\n        placement.manager = null;\n        handleFinalize();\n      };\n      placement.manager.startPlacement(onFinalize);\n    },\n    endPlacement: () => {\n      if (!placement.manager) return;\n      placement.manager.endPlacement();\n      placement.manager = null;\n    }\n  };\n  /**\n   * Encapsulates the initialization and management of the board's combat functionality.\n   */\n  const combat = {\n    manager: null,\n    loadManager: () => {\n      if (combat.manager) return;\n      combat.manager = BoardCombatManager({\n        combatView: view.combatView,\n        playerId,\n        combatManagers: {\n          fleet: fleet.getCombatManager(),\n          mainGrid: mainGrid.getCombatManager(),\n          trackingGrid: trackingGrid.getCombatManager()\n        }\n      });\n    },\n    startCombat: ({ sendAttack, sendResult, sendLost, endTurnMethod }) => {\n      if (!combat.manager) throw new Error(`Board Combat Manager Not initialized`);\n      combat.manager.initializeCombat({\n        sendAttack,\n        sendResult,\n        sendLost,\n        endTurnMethod\n      });\n    },\n    /**\n     * Provides callback functions to handle combat interactions.\n     */\n    getHandlers: () => ({\n      incomingAttackHandler: combat.manager.incomingAttackHandler,\n      incomingResultHandler: combat.manager.incomingResultHandler\n    }),\n    startTurn: () => combat.manager.startTurn(),\n    endCombat: () => {\n      if (!combat.manager) return;\n      combat.manager.reset();\n      combat.manager = null;\n    }\n  };\n\n  return {\n    id,\n    name,\n    view,\n    provideTrackingFleet: view.provideTrackingFleet,\n    placement: {\n      start: placement.startPlacement,\n      end: placement.endPlacement\n    },\n    combat: {\n      init: combat.loadManager,\n      start: combat.startCombat,\n      startTurn: combat.startTurn,\n      getHandlers: combat.getHandlers,\n      end: () => combat.endCombat\n    },\n    reset: () => {\n      placement.endPlacement();\n      combat.endCombat();\n      view.reset();\n    }\n  };\n};\n","import './board-style.css';\nimport {\n  BOARD_CLASSES,\n  buildBoardContainer,\n  buildPlayerNameDisplay,\n  buildButtonContainer,\n  buildUtilityContainer,\n  buildTrackingFleetContainer,\n  ButtonContainerManager\n} from './boardViewUtility';\nimport { BoardPlacementView } from './BoardPlacementView';\nimport { MOUSE_EVENTS } from '../../../../Utility/constants/dom/domEvents';\n\nexport const BoardView = ({\n  playerId,\n  playerName,\n  displayContainer = document.querySelector('body'),\n  views\n}) => {\n  const { mainGrid, trackingGrid, fleet } = views;\n\n  let mainGridButtonManager = null;\n  let boardContainer = null;\n  let trackingFleetContainer = null;\n\n  const build = () => {\n    if (boardContainer) remove();\n    boardContainer = buildBoardContainer(playerId);\n    const playerNameDisplay = buildPlayerNameDisplay(playerName);\n    trackingFleetContainer = buildTrackingFleetContainer();\n    const mainGridUtilityContainer = buildUtilityContainer(\n      BOARD_CLASSES.MAIN_GRID_UTILITY_CONTAINER\n    );\n    const mainGridButtonContainer = buildButtonContainer(BOARD_CLASSES.MAIN_GRID_BUTTON_CONTAINER);\n    const trackingGridUtilityContainer = buildUtilityContainer(\n      BOARD_CLASSES.TRACKING_GRID_UTILITY_CONTAINER\n    );\n    boardContainer.append(playerNameDisplay);\n    mainGrid.attachTo(boardContainer);\n    trackingGrid.attachTo(boardContainer);\n    mainGrid.attachWithinWrapper(mainGridUtilityContainer);\n    fleet.attachMainFleetTo(mainGridUtilityContainer);\n    mainGridUtilityContainer.append(mainGridButtonContainer);\n    trackingGrid.attachWithinWrapper(trackingGridUtilityContainer);\n    trackingGridUtilityContainer.append(trackingFleetContainer);\n    mainGridButtonManager = ButtonContainerManager(mainGridButtonContainer);\n  };\n\n  const display = () => displayContainer.append(boardContainer);\n  const remove = () => boardContainer.remove();\n\n  build();\n\n  const init = (opponentFleet, aiGrid = null) => {\n    trackingFleetContainer.textContent = '';\n    trackingFleetContainer.prepend(opponentFleet);\n    if (aiGrid) trackingGrid.attachWithinWrapper(aiGrid);\n  };\n  const placementView = BoardPlacementView({\n    buttonManager: mainGridButtonManager,\n    fleet,\n    mainGrid,\n    trackingGrid,\n    display,\n    remove\n  });\n\n  const combatView = {\n    endTurnBtn: null,\n    setEndTurnButton: (btnElement) => {\n      combatView.endTurnBtn = btnElement;\n      mainGridButtonManager.addButton('endTurn', btnElement);\n      combatView.endTurnBtn.addEventListener(MOUSE_EVENTS.CLICK, combatView.endTurn);\n    },\n    startTurn: () => display(),\n    endTurn: () => remove(),\n    reset: () => {\n      if (combatView.endTurnBtn) {\n        combatView.endTurnBtn.removeEventListener(MOUSE_EVENTS.CLICK, combatView.endTurn);\n        combatView.endTurnBtn = null;\n        mainGridButtonManager.removeWrapper('endTurn');\n      }\n      remove();\n    }\n  };\n\n  return {\n    display,\n    remove,\n    init,\n    provideTrackingFleet: () => fleet.getTrackingFleet(),\n    placementView,\n    combatView,\n    reset: () => build()\n  };\n};\n","export const BoardPlacementView = ({\n  buttonManager,\n  fleet,\n  mainGrid,\n  trackingGrid,\n  display,\n  remove\n}) => {\n  const init = () => {\n    const updateRotateButton = ({ data }) => {\n      const { id } = data;\n      buttonManager.updateButton('rotate-ship', fleet.getRotateShipButton(id));\n    };\n    const removeRotateButton = () => buttonManager.removeButton('rotate-ship');\n    return { removeRotateButton, updateRotateButton };\n  };\n  const startTurn = () => {\n    trackingGrid.disable();\n    trackingGrid.hide();\n    buttonManager.addButton('submit-placements', mainGrid.getSubmitButton());\n    buttonManager.addWrapper('rotate-ship');\n    display();\n  };\n  const endTurn = () => {\n    buttonManager.removeWrapper('submit-placements');\n    buttonManager.removeWrapper('rotate-ship');\n    trackingGrid.show();\n    remove();\n  };\n  return {\n    init,\n    startTurn,\n    endTurn\n  };\n};\n","import { STATUSES } from '../../../Utility/constants/common';\n\n/**\n * Orchestrates the board's combat phase through the component managers and provided communication methods.\n *\n * @param {Object} detail Initialization detail containing the playerId, board's combatView and component combat managers.\n * @returns {Object} Methods for managing the combat phase.\n */\nexport const BoardCombatManager = ({ playerId, combatManagers, combatView }) => {\n  const { trackingGrid, fleet, mainGrid } = combatManagers;\n\n  /**\n   * Encapsulates provided communication methods.\n   */\n  const send = {\n    attack: () => {},\n    result: () => {},\n    lost: () => {},\n    endTurn: () => {},\n    reset: () => {\n      send.attack = () => {};\n      send.result = () => {};\n      send.endTurn = () => {};\n    }\n  };\n  /**\n   * Encapsulates incoming attack logic and communication.\n   */\n  const incomingAttack = {\n    isInitialized: false,\n    onLost: null,\n    lastSunk: null,\n    allShipsSunk: false,\n    handleRequest: (coordinates) => mainGrid.processIncomingAttack(coordinates),\n    updateLastSunk: ({ data }) => (incomingAttack.lastSunk = data),\n    triggerAllShipsSunk: () => (incomingAttack.allShipsSunk = true),\n    process: ({ data }) => {\n      const { coordinates, cellValue } = data;\n      const { status, id } = cellValue;\n      let payload = { result: status };\n      if (status === STATUSES.HIT) {\n        fleet.hit(id);\n        if (incomingAttack.lastSunk) {\n          if (incomingAttack.lastSunk === id) payload = { result: STATUSES.SHIP_SUNK, id };\n          else incomingAttack.lastSunk = null;\n        }\n      }\n      send.result({ coordinates, ...payload });\n      if (incomingAttack.allShipsSunk) send.lost({ id: playerId });\n    },\n    init: () => {\n      if (incomingAttack.isInitialized) return;\n      mainGrid.onIncomingAttackProcessed(incomingAttack.process);\n      fleet.onAllShipsSunk(incomingAttack.triggerAllShipsSunk);\n      incomingAttack.isInitialized = true;\n    }\n  };\n  /**\n   * Encapsulates outgoing attack logic and communication.\n   */\n  const outgoingAttack = {\n    isInitialized: false,\n    sendRequest: (coordinates) => {\n      trackingGrid.disable();\n      send.attack(coordinates);\n    },\n    handleIncomingResultRequest: (result) => trackingGrid.acceptResult(result),\n    init: () => {\n      if (outgoingAttack.isInitialized) return;\n      trackingGrid.onSendAttack(outgoingAttack.sendRequest);\n      fleet.onShipSunk(incomingAttack.updateLastSunk);\n      outgoingAttack.isInitialized = true;\n    }\n  };\n\n  /**\n   * Initializes the boards combat phase.\n   *\n   * @param {Object} initData Contains game-communication methods.\n   */\n  const initializeCombat = (initData) => {\n    const { sendAttack, sendResult, sendLost, endTurnMethod } = initData;\n    send.attack = sendAttack;\n    send.result = sendResult;\n    send.lost = sendLost;\n    fleet.start();\n    mainGrid.start();\n    trackingGrid.start();\n    outgoingAttack.init();\n    incomingAttack.init();\n    if (typeof endTurnMethod === 'function') trackingGrid.onResultProcessed(endTurnMethod);\n    else combatView.setEndTurnButton(endTurnMethod);\n  };\n\n  /**\n   * Updates the ui.\n   */\n  const startTurn = () => {\n    combatView.startTurn();\n    trackingGrid.enable();\n  };\n\n  /**\n   * Resets the component combat managers and internal details.\n   */\n  const reset = () => {\n    mainGrid.end();\n    trackingGrid.end();\n    fleet.end();\n    send.reset();\n    incomingAttack.onLost = null;\n    incomingAttack.isInitialized = false;\n    outgoingAttack.isInitialized = false;\n    incomingAttack.lastSunk = null;\n    incomingAttack.allShipsSunk = false;\n    combatView.reset();\n  };\n\n  return {\n    initializeCombat,\n    startTurn,\n    incomingAttackHandler: incomingAttack.handleRequest,\n    incomingResultHandler: outgoingAttack.handleIncomingResultRequest,\n    reset\n  };\n};\n","\n      import API from \"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../../node_modules/css-loader/dist/cjs.js!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../node_modules/css-loader/dist/cjs.js!./ai-vs-ai-styles.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../../node_modules/css-loader/dist/cjs.js!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../node_modules/css-loader/dist/cjs.js!./ai-vs-ai-styles.css\";\n       export default content && content.locals ? content.locals : undefined;\n","import { BoardController } from '../../Board/BoardController';\nimport { GAME_MODES, PLAYERS } from '../../../Utility/constants/common';\nimport { buildUIElement } from '../../../Utility/uiBuilderUtils/uiBuilders';\nimport { COMMON_ELEMENTS } from '../../../Utility/constants/dom/elements';\nimport './ai-vs-ai-styles.css';\n\nconst CLASSES = {\n  GAME_CONTAINER: 'game-container',\n  AI_BOARD: 'ai-board',\n  AI_VS_AI_DISPLAY: 'ai-vs-ai-display'\n};\nconst gameContainer = document.querySelector(`.${CLASSES.GAME_CONTAINER}`);\n\n/**\n * Sets up the game display for Ai vs Ai mode.\n */\nconst setUpAvADisplay = (p1, p2) => {\n  const existingDisplay = document.querySelector(`.${CLASSES.AI_VS_AI_DISPLAY}`);\n  if (existingDisplay) existingDisplay.remove();\n  const aiOneContainer = buildUIElement(COMMON_ELEMENTS.DIV, {\n    attributes: { class: CLASSES.AI_BOARD }\n  });\n  const aiTwoContainer = buildUIElement(COMMON_ELEMENTS.DIV, {\n    attributes: { class: CLASSES.AI_BOARD }\n  });\n  const display = buildUIElement(COMMON_ELEMENTS.DIV, {\n    attributes: { class: CLASSES.AI_VS_AI_DISPLAY }\n  });\n  aiOneContainer.append(p1.board.provideTrackingGrid(), p2.board.provideTrackingFleet());\n  aiTwoContainer.append(p2.board.provideTrackingGrid(), p1.board.provideTrackingFleet());\n  display.append(aiOneContainer, aiTwoContainer);\n  gameContainer.append(display);\n};\n\n/**\n * Configures and initializes board controllers for players based on the game mode.\n *\n * @param {Object} p1 Player 1 object with model and controllers.\n * @param {Object} p2 Player 2 object with model and controllers.\n * @param {string} gameMode The current game mode (HvA, AvA, or HvH).\n * @returns {Object} An object containing the board controllers for player 1 and player 2.\n */\nexport const configureBoardControllers = (p1, p2, gameMode) => {\n  const boardController = {\n    [PLAYERS.TYPES.AI]: (player) => player.controllers.board,\n    [PLAYERS.TYPES.HUMAN]: (player) =>\n      BoardController({\n        playerId: player.model.id,\n        playerName: player.model.getName(),\n        displayContainer: gameContainer,\n        gameMode,\n        controllers: player.controllers\n      })\n  };\n  const initializeBoardView = {\n    [GAME_MODES.HvA]: (p1, p2) => {\n      if (p1.type === PLAYERS.TYPES.HUMAN)\n        p1.board.view.init(p2.board.provideTrackingFleet(), p2.board.provideTrackingGrid());\n      else if (p2.type === PLAYERS.TYPES.HUMAN)\n        p2.board.view.init(p1.board.provideTrackingFleet(), p1.board.provideTrackingGrid());\n    },\n    [GAME_MODES.AvA]: setUpAvADisplay,\n    [GAME_MODES.HvH]: (p1, p2) => {\n      p1.board.view.init(p2.board.provideTrackingFleet());\n      p2.board.view.init(p1.board.provideTrackingFleet());\n    }\n  };\n  const p1BoardController = boardController[p1.model.getType()](p1);\n  const p2BoardController = boardController[p2.model.getType()](p2);\n  initializeBoardView[gameMode](\n    { type: p1.model.getType(), board: p1BoardController },\n    { type: p2.model.getType(), board: p2BoardController }\n  );\n  return {\n    p1BoardController,\n    p2BoardController\n  };\n};\n","import { EventEmitter } from '../core/EventEmitter';\nimport { EventDefinitionManager } from './EventDefinitionManager';\n\n/**\n * Initializes an EventManager for managing and tracking pub/sub event communications centrally.\n * Handles event subscriptions, emissions, and definition management.\n *\n * @param {Object} eventsConfig Configuration object for definitions manager.\n * @returns {Object} An interface for managing communication with the internal EventEmitter system.\n */\nexport const EventManager = (eventsConfig) => {\n  const emitter = EventEmitter();\n  const { subscribe, unsubscribe, publish } = emitter;\n  const { global, base, scopes } = eventsConfig;\n  let subscriptionTracker = [];\n  const events = EventDefinitionManager(base, global, scopes);\n\n  /**\n   * Subscribes a callback to an event and adds details to tracker.\n   *\n   * @param {string} event Event to listen for.\n   * @param {function} callback Function to execute on event.\n   */\n  const addSubscription = (event, callback) => {\n    subscribe(event, callback);\n    subscriptionTracker.push({ event, callback });\n  };\n\n  /**\n   * Unsubscribes a callback from an event and removes details from tracker.\n   *\n   * @param {string} event Event to remove subscription from.\n   * @param {function} callback Function to remove from event.\n   */\n  const removeSubscription = (event, callback) => {\n    unsubscribe(event, callback);\n    subscriptionTracker = subscriptionTracker.filter(\n      (e) => !(e.event === event && e.callback === callback)\n    );\n  };\n\n  /**\n   * Unsubscribes and clears all tracked subscriptions.\n   */\n  const removeAllSubscriptions = () => {\n    subscriptionTracker.forEach(({ event, callback }) => unsubscribe(event, callback));\n    subscriptionTracker = [];\n  };\n\n  return {\n    on: addSubscription,\n    off: removeSubscription,\n    offAll: removeAllSubscriptions,\n    emit: publish,\n    events,\n    reset: () => {\n      removeAllSubscriptions();\n      events.reset();\n      emitter.reset();\n    }\n  };\n};\n","/**\n * Initializes an EventDefinitionManager for managing event types in a pub/sub system.\n * Supports event types:\n *  global: application-wide,\n *  base: template for scoping,\n *  scoped: specified within a given scope.\n *\n * @param {Object} [base={}] Initial base events template.\n * @param {Object} [global={}] Initial global events, accessible application-wide.\n * @param {Object} [initialScopes=[]] Initial scopes to create scoped events from base events.\n * @returns {Object} An interface to manage event definitions, including adding/removing scopes, and getting events.\n */\nexport const EventDefinitionManager = (base = {}, global = {}, initialScopes = []) => {\n  const scopes = [];\n  const events = {\n    global,\n    base: {},\n    scoped: {},\n    baseTypes: {}\n  };\n\n  /**\n   * Updates base events and generates scoped events from them.\n   * @param {Object} newEvents Events to set as base.\n   */\n  const setBaseEvents = (newEvents) => {\n    events.base = newEvents;\n    Object.entries(events.base).forEach(([key, value]) => {\n      if (typeof value === 'object') {\n        const typeKey = key.toUpperCase().replace(/ /g, '_');\n        events.baseTypes[typeKey] = key;\n      }\n    });\n    buildScopedEvents();\n  };\n\n  /**\n   * Sets global events.\n   * @param {Object} newEvents Global events to set.\n   */\n  const setGlobalEvents = (newEvents) => (events.global = newEvents);\n\n  /**\n   * Generates a unique identifier for a scoped event.\n   * @param {string} scope The scope of the event.\n   * @param {string} event The event name.\n   * @returns {string} A scoped event key.\n   */\n  const createKey = (scope, event) => `${scope}@${event}`;\n\n  /**\n   * Adds a new scope and generates its events.\n   * @param {string} scope The scope to add.\n   */\n  const addScope = (scope) => {\n    scopes.push(scope);\n    buildScopedEvents();\n  };\n  /**\n   * Removes a scope and its associated events.\n   * @param {string} scope The scope to remove.\n   */\n  const removeScope = (scope) => {\n    const index = scopes.findIndex((s) => s === scope);\n    if (index === -1) return;\n    scopes.splice(index, 1);\n    delete events.scoped[scope];\n  };\n\n  /**\n   * Creates scoped events for specified scope.\n   *\n   * @param {string} scope The scope for the events.\n   * @param {Object} eventObj Events to scope.\n   * @param {Object} [scopedObj={}] Object to hold scoped events.\n   * @returns {Object} Scoped events.\n   */\n  const scopeEvents = (scope, eventObj, scopedObj = {}) => {\n    Object.entries(eventObj).forEach(([key, value]) => {\n      if (typeof value === 'object') {\n        scopedObj[key] = {};\n        scopeEvents(scope, value, scopedObj[key]);\n      } else scopedObj[key] = createKey(scope, value);\n    });\n    return scopedObj;\n  };\n\n  /**\n   * Scopes all base-events using stored scopes\n   */\n  const buildScopedEvents = () =>\n    scopes.forEach((scope) => (events.scoped[scope] = scopeEvents(scope, events.base)));\n\n  if (Object.values(base).length > 0) setBaseEvents(base);\n  if (initialScopes.length > 0) {\n    initialScopes.forEach((scope) => scopes.push(scope));\n    buildScopedEvents();\n  }\n  const reset = () => {\n    events.global = {};\n    events.base = {};\n    events.scoped = {};\n    events.baseTypes = {};\n    scopes.length = 0;\n  };\n  return {\n    createKey,\n    addScope,\n    removeScope,\n    buildScopedEvents,\n    setBaseEvents,\n    setGlobalEvents,\n    getGlobalEvents: () => events.global,\n    getBaseEvents: () => events.base,\n    getScopedEvents: () => events.scoped,\n    getBaseTypes: () => events.baseTypes,\n    reset\n  };\n};\n","import { DEFAULT_FLEET, PLAYERS, GAME_MODES } from '../../../Utility/constants/common';\nimport { initializePlayer } from '../utility/initializePlayer';\nimport { configureBoardControllers } from '../utility/configurePlayerBoardControllers';\nimport { EventManager } from '../../../Events/management/EventManager';\nimport { TurnManager } from '../Managers/TurnManager';\nimport { PlayerManager } from '../Managers/PlayerManager';\n\nconst GameEventManager = (playerIds) => {\n  const config = {\n    global: {\n      START_OVER: 'startStateOver',\n      PLACEMENT_OVER: 'placementStateOver',\n      PROGRESS_OVER: 'progressStateOver'\n    },\n    base: {\n      turn: {\n        START_TURN: 'startTurn',\n        END_TURN: 'endTurn'\n      },\n      placement: {\n        FINALIZE_PLACEMENT: 'finalizePlacement'\n      },\n      combat: {\n        SEND_ATTACK: 'sendAttack',\n        SEND_RESULT: 'sendIncomingAttackResult',\n        SEND_SHIP_SUNK: 'shipSunk'\n      }\n    },\n    scopes: playerIds\n  };\n  return EventManager(config);\n};\n\nconst extractEventManagerInterface = (manager) => ({\n  getScoped: (scope, eventType = null) => {\n    let scopedEvents = manager.events.getScopedEvents()[scope];\n    if (eventType) scopedEvents = scopedEvents[eventType];\n    return scopedEvents;\n  },\n  getGlobal: manager.events.getGlobalEvents,\n  getBaseTypes: manager.events.getBaseTypes,\n  getEventMethods: () => ({ on: manager.on, off: manager.off, emit: manager.emit }),\n  reset: manager.reset\n});\n\nconst GameTurnManager = ({ p1Id, p2Id, eventManager }) => {\n  const { emit, on, off } = eventManager.getEventMethods();\n  const { getScoped, getBaseTypes } = eventManager;\n  const turnEvents = getBaseTypes().TURN;\n  const { START_TURN: p1StartTurn, END_TURN: p1EndTurn } = getScoped(p1Id, turnEvents);\n  const { START_TURN: p2StartTurn, END_TURN: p2EndTurn } = getScoped(p2Id, turnEvents);\n  return TurnManager({\n    emit,\n    on,\n    off,\n    events: {\n      p1StartTurn,\n      p1EndTurn,\n      p2StartTurn,\n      p2EndTurn\n    },\n    p1Id,\n    p2Id\n  });\n};\n\nconst getGameMode = (p1Type, p2Type) => {\n  if (p1Type === PLAYERS.TYPES.HUMAN && p2Type === PLAYERS.TYPES.HUMAN) return GAME_MODES.HvH;\n  if (p1Type === PLAYERS.TYPES.AI && p2Type === PLAYERS.TYPES.AI) return GAME_MODES.AvA;\n  return GAME_MODES.HvA;\n};\n\nconst initPlayers = ({ p1Settings, p2Settings, boardSettings }) => ({\n  p1: initializePlayer({ playerSettings: p1Settings, boardSettings, fleetData: DEFAULT_FLEET }),\n  p2: initializePlayer({ playerSettings: p2Settings, boardSettings, fleetData: DEFAULT_FLEET }),\n  gameMode: getGameMode(p1Settings.type, p2Settings.type)\n});\n\n/**\n * Initializes the game and provides the managers necessary to execute game play.\n *\n * @param {Object} settings Details containing game configuration.\n * @returns {Object} Contains managers for game play.\n */\nexport const StartStateCoordinator = (settings) => {\n  const { p1Settings, p2Settings, boardSettings } = settings;\n  const { p1, p2, gameMode } = initPlayers({ p1Settings, p2Settings, boardSettings });\n  const [p1Id, p2Id] = [p1.model.id, p2.model.id];\n  const { p1BoardController, p2BoardController } = configureBoardControllers(p1, p2, gameMode);\n  const playerManager = PlayerManager({\n    ids: [p1Id, p2Id],\n    names: {\n      [p1Id]: p1.model.getName(),\n      [p2Id]: p2.model.getName()\n    },\n    controllers: {\n      [p1Id]: p1BoardController,\n      [p2Id]: p2BoardController\n    },\n    controllerTypes: {\n      PLACEMENT: 'placement',\n      COMBAT: 'combat'\n    },\n    gameMode\n  });\n  const eventManager = extractEventManagerInterface(GameEventManager([p1Id, p2Id]));\n  const turnManager = GameTurnManager({\n    p1Id,\n    p2Id,\n    eventManager\n  });\n  return {\n    playerManager,\n    eventManager,\n    turnManager\n  };\n};\n","/**\n * Manages and provides a cohesive interface for player specific data.\n *\n * @param {Object} config Players information.\n * @returns {Object} Methods for managing player information.\n */\nexport const PlayerManager = (config) => {\n  const { ids, controllers, controllerTypes, names, gameMode } = config;\n  const getControllersOfType = (type) =>\n    Object.fromEntries(\n      Object.entries(controllers).map(([id, controller]) => [id, controller[type]])\n    );\n  const getPlayerName = (playerId) => names[playerId];\n\n  const getOpponentName = (playerId) => {\n    const opponentId = ids.find((storedId) => playerId !== storedId);\n    if (opponentId) return names[opponentId];\n  };\n  const resetControllers = () => {\n    Object.values(controllers).forEach((controller) => controller.reset());\n  };\n  return {\n    ids,\n    gameMode,\n    controllerTypes,\n    getPlayerName,\n    getControllersOfType,\n    getOpponentName,\n    resetControllers,\n    reset: () => {\n      resetControllers();\n      ids.forEach((id) => {\n        delete controllers[id];\n        delete names[id];\n      });\n    }\n  };\n};\n","/**\n * Initializes a turn manager for two-player games, orchestrating turn-based events and actions.\n *\n * @param {Object} params Configuration parameters including event handlers and player IDs.\n * @param {Function} params.emit Function to emit events.\n * @param {Function} params.on Function to subscribe to events.\n * @param {Function} params.off Function to unsubscribe from events.\n * @param {Object} params.events Contains event names for starting and ending turns.\n * @param {string} params.p1Id Player one's identifier.\n * @param {string} params.p2Id Player two's identifier.\n * @returns {Object} Provides methods for turn management and interaction.\n */\nexport const TurnManager = ({ emit, on, off, events, p1Id, p2Id }) => {\n  const { p1StartTurn, p1EndTurn, p2StartTurn, p2EndTurn } = events;\n\n  const getEvent = {\n    [p1Id]: {\n      START: p1StartTurn,\n      END: p1EndTurn\n    },\n    [p2Id]: {\n      START: p2StartTurn,\n      END: p2EndTurn\n    }\n  };\n  const players = { current: p1Id, waiting: p2Id };\n  /**\n   * Swaps the current and waiting players.\n   */\n  const swapCurrent = () =>\n    ([players.current, players.waiting] = [players.waiting, players.current]);\n  const getCurrentPlayer = () => players.current;\n  const startCurrentPlayerTurn = () => emit(getEvent[players.current].START);\n  const endCurrentPlayerTurn = () => emit(getEvent[players.current].END);\n\n  /**\n   * Generates methods to end turns for all players.\n   *\n   * @returns {Object} Mapping of player IDs to their end turn methods.\n   */\n  const getAllPlayerEndTurnMethods = () =>\n    Object.fromEntries(\n      Object.entries(getEvent).map(([key, value]) => [key, () => emit(value.END)])\n    );\n\n  /**\n   * Alternates the turn to the next player and starts their turn.\n   */\n  const alternate = () => {\n    swapCurrent();\n    startCurrentPlayerTurn();\n  };\n\n  /**\n   * Enables or disables automatic turn alternation following turn end events.\n   */\n  const autoAlternate = (() => {\n    let isActive = false;\n    return {\n      enable: () => {\n        if (isActive) return;\n        on(getEvent[p1Id].END, alternate);\n        on(getEvent[p2Id].END, alternate);\n        isActive = true;\n      },\n      disable: () => {\n        if (isActive) return;\n        off(getEvent[p1Id].END, alternate);\n        off(getEvent[p2Id].END, alternate);\n        isActive = false;\n      }\n    };\n  })();\n\n  /**\n   * Creates a manager to set or unset callbacks for turn start events for a given player.\n   *\n   * @param {string} id The player's ID to manage turn start events.\n   * @returns {Object} Methods to set and unset turn start event callbacks.\n   */\n  const OnTurnStartManager = (id) => {\n    let onStart = null;\n    const getStartEvent = () => getEvent[id].START;\n    const set = (callback) => {\n      if (onStart) off(getStartEvent(), onStart);\n      on(getStartEvent(), callback);\n      onStart = callback;\n    };\n    const remove = () => {\n      if (!onStart) return;\n      off(getStartEvent(), onStart);\n      onStart = null;\n    };\n    return { set, remove };\n  };\n  const onTurnStartManagers = {\n    [p1Id]: OnTurnStartManager(p1Id),\n    [p2Id]: OnTurnStartManager(p2Id)\n  };\n\n  /**\n   * Creates a manager to set or unset callbacks for turn end events for a given player.\n   *\n   * @param {string} id The player's ID to manage turn end events.\n   * @returns {Object} Methods to set and unset turn end event callbacks.\n   */\n  const OnTurnEndManager = (id) => {\n    let onEnd = null;\n    const getEndEvent = () => getEvent[id].END;\n    const set = (callback) => {\n      if (onEnd) off(getEndEvent(), onEnd);\n      on(getEndEvent(), callback);\n      onEnd = callback;\n    };\n    const remove = () => {\n      if (!onEnd) return;\n      off(getEndEvent(), onEnd);\n      onEnd = null;\n    };\n    return { set, remove };\n  };\n  const onTurnEndManagers = {\n    [p1Id]: OnTurnEndManager(p1Id),\n    [p2Id]: OnTurnEndManager(p2Id)\n  };\n\n  /**\n   * Resets the turn manager to its initial state, disabling auto-alternation and clearing callbacks.\n   */\n  const reset = () => {\n    players.current = p1Id;\n    players.waiting = p2Id;\n    autoAlternate.disable();\n    Object.values(onTurnStartManagers).forEach((manager) => manager.remove());\n    Object.values(onTurnStartManagers).forEach((manager) => manager.remove());\n  };\n  return {\n    autoAlternate: {\n      enable: autoAlternate.enable,\n      disable: autoAlternate.disable\n    },\n    currentPlayer: {\n      getId: getCurrentPlayer,\n      startTurn: startCurrentPlayerTurn,\n      endTurn: endCurrentPlayerTurn\n    },\n    allPlayers: {\n      getAllPlayerEndTurnMethods,\n      onTurnStartManagers,\n      onTurnEndManagers\n    },\n    alternate,\n    reset\n  };\n};\n","import { INTERACTIVE_ELEMENTS } from '../../../Utility/constants/dom/elements';\n\nexport const GENERAL = {\n  LABEL_ELEMENT: 'label',\n  CLASSES: {\n    HIDE: 'hide',\n    HEADER_WRAPPER: 'settings-dialog-header-wrapper',\n\n    DIALOG_TITLE: 'dialog-title',\n    DIALOG: `settings-dialog dialog`\n  },\n  TEXTS: {\n    DIALOG_TITLE: 'Settings'\n  }\n};\nexport const PLAYER_SETTINGS = {\n  COMMON_CLASSES: {\n    INFO_CONTAINER: 'player-information-container',\n    INFO_INPUT_CONTAINER: 'player-information-input-container'\n  },\n  PLAYER_ONE: {\n    ID: 'player-one',\n    TYPE_DEFAULT: 'human',\n    TITLE: 'Player One',\n    TITLE_CLASS: 'player-one-settings-title'\n  },\n  PLAYER_TWO: {\n    ID: 'player-two',\n    TYPE_DEFAULT: 'ai',\n    TITLE: 'Player Two',\n    TITLE_CLASS: 'player-two-settings-title'\n  }\n};\n\nexport const INPUT_FIELDS = {\n  TEXT_NAME: (player) => ({\n    ELEMENT: INTERACTIVE_ELEMENTS.INPUT,\n    CLASS: `${player}-name-text-input`,\n    ATTRIBUTES: {\n      TYPE: 'text',\n      PLACEHOLDER: 'Username',\n      ID: `${player}-name`\n    }\n  }),\n  SELECT: {\n    ELEMENT: INTERACTIVE_ELEMENTS.SELECT,\n    OPTION_ELEMENT: INTERACTIVE_ELEMENTS.OPTION,\n    INPUT_FIELD_CLASS: (id) => `${id}-select-input`\n  },\n  ATTACK_DELAY: {\n    ELEMENT: INTERACTIVE_ELEMENTS.INPUT,\n    ATTRIBUTES: {\n      TYPE: 'number',\n      MIN: 0,\n      DEFAULT_VALUE: 250\n    },\n    CLASSES: {\n      WRAPPER: 'attack-delay-input-wrapper',\n      LABEL: 'attack-delay-label',\n      ATTACK_DELAY_INPUT: 'attack-delay-input'\n    },\n    TEXTS: {\n      ATTACK_DELAY: 'Attack Delay (ms)'\n    }\n  },\n  DIMENSIONS: {\n    ELEMENT: INTERACTIVE_ELEMENTS.INPUT,\n    ATTRIBUTES: {\n      TYPE: 'number',\n      MAX: 26,\n      MIN: 10,\n      ROWS_ID: 'rows',\n      COLS_ID: 'cols'\n    },\n    CLASSES: {\n      COLS_INPUT: 'cols-input',\n      ROWS_INPUT: 'rows-input',\n      COLS_INPUT_WRAPPER: 'cols-input-wrapper',\n      COLS_INPUT_LABEL: 'cols-input-label',\n      ROWS_INPUT_WRAPPER: 'rows-input-wrapper',\n      ROWS_INPUT_LABEL: 'rows-input-label'\n    },\n    TEXTS: {\n      ROWS: 'Rows',\n      COLS: 'Cols'\n    }\n  }\n};\n\nexport const SELECTIONS = {\n  DIFFICULTY: {\n    ATTRIBUTES: {\n      ID: (player) => `${player}-difficulty`\n    },\n    OPTIONS: [\n      { id: 'easy', text: 'Easy', value: `${0}` },\n      { id: 'medium', text: 'Medium', value: `${1}` },\n      { id: 'hard', text: 'Hard', value: `${2}` }\n    ]\n  },\n  PLAYER_TYPE: {\n    TYPES: {\n      HUMAN: 'human',\n      COMPUTER: 'ai'\n    },\n    TEXTS: {\n      HUMAN: 'Human',\n      COMPUTER: 'Computer'\n    },\n    PLAYER_TYPE_CLASS: (player) => `${player}-type`\n  },\n\n  LETTER_AXIS: {\n    CLASSES: {\n      WRAPPER: 'letter-axis-input-wrapper',\n      LABEL: 'letter-axis-input-label'\n    },\n    ATTRIBUTES: {\n      ID: 'letter-axis'\n    },\n    TEXTS: {\n      LABEL: 'Letter Axis',\n      ROW: 'Row',\n      COL: 'Column'\n    },\n    OPTIONS: [\n      { id: 'row', text: 'Row', value: 'row' },\n      { id: 'col', text: 'Column', value: 'col' }\n    ]\n  }\n};\n\nexport const BOARD_SETTINGS = {\n  CLASSES: {\n    CONTAINER: 'board-settings-container',\n    INPUTS_CONTAINER: 'board-settings-inputs-container',\n    TITLE: 'board-settings-title'\n  },\n  TEXTS: {\n    TITLE: 'Board'\n  }\n};\n\nexport const BUTTONS = {\n  CONTAINER_CLASS: 'dialog-buttons-container',\n  SUBMIT: {\n    TEXT: 'Submit',\n    CLASS: 'settings-submit-button',\n    DISCLAIMER: {\n      TEXT: '*Submitting will start a new game',\n      CLASS: 'settings-submit-disclaimer hide'\n    }\n  },\n  CANCEL: {\n    TEXT: 'Cancel',\n    CLASS: 'settings-cancel-button'\n  },\n  INSTRUCTIONS: {\n    TEXT: 'Instructions',\n    CLASS: 'settings-instructions-button'\n  }\n};\n","import {\n  GENERAL,\n  INPUT_FIELDS,\n  SELECTIONS,\n  PLAYER_SETTINGS,\n  BOARD_SETTINGS,\n  BUTTONS\n} from '../constants';\nimport { STRUCTURAL_ELEMENTS } from '../../../../Utility/constants/dom/elements';\nimport {\n  buildElementFromUIObj,\n  buildUIObj,\n  wrap,\n  buildParagraphObj,\n  buildButtonObj\n} from '../../../../Utility/uiBuilderUtils/uiBuilders';\nimport { BASE_CLASSES } from '../../../../Utility/constants/dom/baseStyles';\nconst buildLabelObj = (text, attributes) => buildUIObj(GENERAL.LABEL_ELEMENT, { text, attributes });\n\nconst buildOptionObj = ({ id, value, text, isSelected = false }) =>\n  buildUIObj(INPUT_FIELDS.SELECT.OPTION_ELEMENT, {\n    id: id ?? value,\n    text,\n    attributes: { value, ...(isSelected && { selected: '' }) }\n  });\n\nconst buildSelectInputObj = ({ id, options, hide = false, label = null }) => {\n  const optionsObjs = options.map((option) => buildOptionObj(option));\n  const children = [...optionsObjs];\n  if (label) children.push(label);\n  return buildUIObj(INPUT_FIELDS.SELECT.ELEMENT, {\n    attributes: {\n      id,\n      class: `${INPUT_FIELDS.SELECT.INPUT_FIELD_CLASS(id)} ${hide ? GENERAL.CLASSES.HIDE : ''}`\n    },\n    children\n  });\n};\n\nconst buildHeaderObj = () =>\n  wrap(GENERAL.CLASSES.HEADER_WRAPPER, [\n    buildParagraphObj(GENERAL.TEXTS.DIALOG_TITLE, GENERAL.CLASSES.DIALOG_TITLE),\n    buildButtonObj(\n      BUTTONS.INSTRUCTIONS.TEXT,\n      `${BUTTONS.INSTRUCTIONS.CLASS} ${BASE_CLASSES.BUTTON}`\n    )\n  ]);\n\nconst buildDifficultySelectInputObj = (player, hide = false) =>\n  buildSelectInputObj({\n    id: SELECTIONS.DIFFICULTY.ATTRIBUTES.ID(player),\n    options: SELECTIONS.DIFFICULTY.OPTIONS,\n    hide\n  });\n\nconst buildTextUsernameInputObj = (player, hide = false) => {\n  const details = INPUT_FIELDS.TEXT_NAME(player);\n  return buildUIObj(details.ELEMENT, {\n    attributes: {\n      type: details.ATTRIBUTES.TYPE,\n      placeholder: details.ATTRIBUTES.PLACEHOLDER,\n      id: details.ATTRIBUTES.ID,\n      class: `${details.CLASS} ${hide ? GENERAL.CLASSES.HIDE : ''}`\n    }\n  });\n};\n\nconst buildPlayerTypeSelectInputObj = (player, selected) => {\n  const options = [];\n  const humanOption = {\n    value: SELECTIONS.PLAYER_TYPE.TYPES.HUMAN,\n    text: SELECTIONS.PLAYER_TYPE.TEXTS.HUMAN,\n    isSelected: selected === SELECTIONS.PLAYER_TYPE.TYPES.HUMAN\n  };\n  const computerOption = {\n    value: SELECTIONS.PLAYER_TYPE.TYPES.COMPUTER,\n    text: SELECTIONS.PLAYER_TYPE.TEXTS.COMPUTER,\n    isSelected: selected === SELECTIONS.PLAYER_TYPE.TYPES.COMPUTER\n  };\n  options.push(humanOption);\n  options.push(computerOption);\n  return buildSelectInputObj({ id: SELECTIONS.PLAYER_TYPE.PLAYER_TYPE_CLASS(player), options });\n};\n\nconst buildLetterAxisSelectObj = () =>\n  wrap(SELECTIONS.LETTER_AXIS.CLASSES.WRAPPER, [\n    buildSelectInputObj({\n      id: SELECTIONS.LETTER_AXIS.ATTRIBUTES.ID,\n      options: SELECTIONS.LETTER_AXIS.OPTIONS,\n      label: buildLabelObj(SELECTIONS.LETTER_AXIS.TEXTS.LABEL, {\n        for: SELECTIONS.LETTER_AXIS.ATTRIBUTES.ID,\n        class: SELECTIONS.LETTER_AXIS.CLASSES.LABEL\n      })\n    }),\n    buildLabelObj(SELECTIONS.LETTER_AXIS.TEXTS.LABEL, {\n      for: SELECTIONS.LETTER_AXIS.ATTRIBUTES.ID,\n      class: SELECTIONS.LETTER_AXIS.CLASSES.LABEL\n    })\n  ]);\n\nconst buildDimensionInputObj = ({ id, classAttr, wrapperClass, labelText, labelClass }) =>\n  wrap(wrapperClass, [\n    buildUIObj(INPUT_FIELDS.DIMENSIONS.ELEMENT, {\n      attributes: {\n        type: INPUT_FIELDS.DIMENSIONS.ATTRIBUTES.TYPE,\n        min: INPUT_FIELDS.DIMENSIONS.ATTRIBUTES.MIN,\n        max: INPUT_FIELDS.DIMENSIONS.ATTRIBUTES.MAX,\n        value: INPUT_FIELDS.DIMENSIONS.ATTRIBUTES.MIN,\n        id,\n        class: classAttr\n      }\n    }),\n    buildLabelObj(labelText, {\n      for: id,\n      class: labelClass\n    })\n  ]);\n\nconst buildAttackDelayInputObj = (id) =>\n  wrap(`${INPUT_FIELDS.ATTACK_DELAY.CLASSES.WRAPPER}`, [\n    buildUIObj(INPUT_FIELDS.ATTACK_DELAY.ELEMENT, {\n      attributes: {\n        type: INPUT_FIELDS.ATTACK_DELAY.ATTRIBUTES.TYPE,\n        min: INPUT_FIELDS.ATTACK_DELAY.ATTRIBUTES.MIN,\n        value: INPUT_FIELDS.ATTACK_DELAY.ATTRIBUTES.DEFAULT_VALUE,\n        id,\n        class: INPUT_FIELDS.ATTACK_DELAY.CLASSES.ATTACK_DELAY_INPUT\n      }\n    }),\n    buildLabelObj(INPUT_FIELDS.ATTACK_DELAY.TEXTS.ATTACK_DELAY, {\n      for: id,\n      class: INPUT_FIELDS.ATTACK_DELAY.CLASSES.LABEL\n    })\n  ]);\n\nconst buildBoardSettingsInputsObj = () =>\n  wrap(BOARD_SETTINGS.CLASSES.CONTAINER, [\n    buildParagraphObj(BOARD_SETTINGS.TEXTS.TITLE, BOARD_SETTINGS.CLASSES.TITLE),\n    wrap(BOARD_SETTINGS.CLASSES.INPUTS_CONTAINER, [\n      buildDimensionInputObj({\n        id: INPUT_FIELDS.DIMENSIONS.ATTRIBUTES.ROWS_ID,\n        classAttr: INPUT_FIELDS.DIMENSIONS.CLASSES.ROWS_INPUT,\n        wrapperClass: INPUT_FIELDS.DIMENSIONS.CLASSES.ROWS_INPUT_WRAPPER,\n        labelText: INPUT_FIELDS.DIMENSIONS.TEXTS.ROWS,\n        labelClass: INPUT_FIELDS.DIMENSIONS.CLASSES.ROWS_INPUT_LABEL\n      }),\n      buildDimensionInputObj({\n        id: INPUT_FIELDS.DIMENSIONS.ATTRIBUTES.COLS_ID,\n        classAttr: INPUT_FIELDS.DIMENSIONS.CLASSES.COLS_INPUT,\n        wrapperClass: INPUT_FIELDS.DIMENSIONS.CLASSES.COLS_INPUT_WRAPPER,\n        labelText: INPUT_FIELDS.DIMENSIONS.TEXTS.COLS,\n        labelClass: INPUT_FIELDS.DIMENSIONS.CLASSES.COLS_INPUT_LABEL\n      }),\n      buildLetterAxisSelectObj()\n    ])\n  ]);\n\nconst buildPlayerInfoInputObj = () =>\n  wrap(PLAYER_SETTINGS.COMMON_CLASSES.INFO_INPUT_CONTAINER, [\n    wrap(PLAYER_SETTINGS.COMMON_CLASSES.INFO_CONTAINER, [\n      buildParagraphObj(PLAYER_SETTINGS.PLAYER_ONE.TITLE, PLAYER_SETTINGS.PLAYER_ONE.TITLE_CLASS),\n      buildPlayerTypeSelectInputObj(\n        PLAYER_SETTINGS.PLAYER_ONE.ID,\n        PLAYER_SETTINGS.PLAYER_ONE.TYPE_DEFAULT\n      ),\n      buildTextUsernameInputObj(PLAYER_SETTINGS.PLAYER_ONE.ID),\n      buildDifficultySelectInputObj(PLAYER_SETTINGS.PLAYER_ONE.ID, true),\n      buildAttackDelayInputObj(PLAYER_SETTINGS.PLAYER_ONE.ID)\n    ]),\n    wrap(PLAYER_SETTINGS.COMMON_CLASSES.INFO_CONTAINER, [\n      buildParagraphObj(PLAYER_SETTINGS.PLAYER_TWO.TITLE, PLAYER_SETTINGS.PLAYER_TWO.TITLE_CLASS),\n      buildPlayerTypeSelectInputObj(\n        PLAYER_SETTINGS.PLAYER_TWO.ID,\n        PLAYER_SETTINGS.PLAYER_TWO.TYPE_DEFAULT\n      ),\n      buildTextUsernameInputObj(PLAYER_SETTINGS.PLAYER_TWO.ID, true),\n      buildDifficultySelectInputObj(PLAYER_SETTINGS.PLAYER_TWO.ID, false),\n      buildAttackDelayInputObj(PLAYER_SETTINGS.PLAYER_TWO.ID)\n    ])\n  ]);\n\nconst buildSettingsButtonsObj = () =>\n  wrap(BUTTONS.CONTAINER_CLASS, [\n    buildButtonObj(BUTTONS.SUBMIT.TEXT, `${BUTTONS.SUBMIT.CLASS} ${BASE_CLASSES.BUTTON}`),\n    buildParagraphObj(BUTTONS.SUBMIT.DISCLAIMER.TEXT, BUTTONS.SUBMIT.DISCLAIMER.CLASS),\n    buildButtonObj(\n      BUTTONS.CANCEL.TEXT,\n      `${BUTTONS.CANCEL.CLASS} ${BASE_CLASSES.BUTTON} ${GENERAL.CLASSES.HIDE}`\n    )\n  ]);\n\nexport const buildSettingsDialogElement = () => {\n  const header = buildHeaderObj();\n  const playerInfoInputs = buildPlayerInfoInputObj();\n  const boardSettings = buildBoardSettingsInputsObj();\n  const buttons = buildSettingsButtonsObj();\n  const uiObj = buildUIObj(STRUCTURAL_ELEMENTS.DIALOG, {\n    attributes: { class: GENERAL.CLASSES.DIALOG },\n    children: [header, playerInfoInputs, boardSettings, buttons]\n  });\n  return buildElementFromUIObj(uiObj);\n};\n","import { ListenerManager } from '../../../../Utility/uiBuilderUtils/ListenerManager';\nimport { GENERAL, PLAYER_SETTINGS, SELECTIONS, INPUT_FIELDS, BUTTONS } from '../constants';\nimport {\n  GENERAL_EVENTS,\n  KEY_EVENTS,\n  MOUSE_EVENTS\n} from '../../../../Utility/constants/dom/domEvents';\nimport { PLAYERS } from '../../../../Utility/constants/common';\n\n/**\n * Extracts all relevant elements from the dialog for listener initialization.\n *\n * @param {HTMLElement} element Settings dialog element.\n * @returns {Object} Contains extracted elements.\n */\nconst getElements = (element) => {\n  const p1TypeSelect = element.querySelector(\n    `#${SELECTIONS.PLAYER_TYPE.PLAYER_TYPE_CLASS(PLAYER_SETTINGS.PLAYER_ONE.ID)}`\n  );\n  const p1UsernameInput = element.querySelector(\n    `.${INPUT_FIELDS.TEXT_NAME(PLAYER_SETTINGS.PLAYER_ONE.ID).CLASS}`\n  );\n  const p1DifficultySelect = element.querySelector(\n    `#${SELECTIONS.DIFFICULTY.ATTRIBUTES.ID(PLAYER_SETTINGS.PLAYER_ONE.ID)}`\n  );\n  const p1AttackDelayInput = element.querySelector(\n    `.${INPUT_FIELDS.ATTACK_DELAY.CLASSES.ATTACK_DELAY_INPUT}#${PLAYER_SETTINGS.PLAYER_ONE.ID}`\n  );\n  const p2TypeSelect = element.querySelector(\n    `#${SELECTIONS.PLAYER_TYPE.PLAYER_TYPE_CLASS(PLAYER_SETTINGS.PLAYER_TWO.ID)}`\n  );\n  const p2UsernameInput = element.querySelector(\n    `.${INPUT_FIELDS.TEXT_NAME(PLAYER_SETTINGS.PLAYER_TWO.ID).CLASS}`\n  );\n  const p2DifficultySelect = element.querySelector(\n    `#${SELECTIONS.DIFFICULTY.ATTRIBUTES.ID(PLAYER_SETTINGS.PLAYER_TWO.ID)}`\n  );\n  const p2AttackDelayInput = element.querySelector(\n    `.${INPUT_FIELDS.ATTACK_DELAY.CLASSES.ATTACK_DELAY_INPUT}#${PLAYER_SETTINGS.PLAYER_TWO.ID}`\n  );\n\n  const rowsInput = element.querySelector(`.${INPUT_FIELDS.DIMENSIONS.CLASSES.ROWS_INPUT}`);\n  const colsInput = element.querySelector(`.${INPUT_FIELDS.DIMENSIONS.CLASSES.COLS_INPUT}`);\n  const letterAxisInput = element.querySelector(`#${SELECTIONS.LETTER_AXIS.ATTRIBUTES.ID}`);\n\n  const instructionsButton = element.querySelector(`.${BUTTONS.INSTRUCTIONS.CLASS}`);\n\n  const submitButton = element.querySelector(`.${BUTTONS.SUBMIT.CLASS}`);\n  const cancelButton = element.querySelector(`.${BUTTONS.CANCEL.CLASS}`);\n  return {\n    p1TypeSelect,\n    p1UsernameInput,\n    p2TypeSelect,\n    p2UsernameInput,\n    p2DifficultySelect,\n    p1DifficultySelect,\n    p1AttackDelayInput,\n    p2AttackDelayInput,\n    rowsInput,\n    colsInput,\n    letterAxisInput,\n    instructionsButton,\n    submitButton,\n    cancelButton\n  };\n};\n\nconst EVENT_CONTROLLER_KEYS = {\n  P1_DYNAMIC_DIFFICULTY: 'p1DynamicDifficulty',\n  P2_DYNAMIC_DIFFICULTY: 'p2DynamicDifficulty',\n  P1_UPDATE_ON_TYPE_CHANGE: 'p1UpdateOnPlayerTypeChange',\n  P2_UPDATE_ON_TYPE_CHANGE: 'p2UpdateOnPlayerTypeChange',\n  ROW_RESTRICTION: 'rowRestriction',\n  COL_RESTRICTION: 'colRestriction',\n  PREVENT_ESCAPE: 'preventEscape',\n  OPEN_INSTRUCTIONS: 'openInstructions',\n  SUBMIT: 'submit',\n  CANCEL: 'cancel'\n};\n\n/**\n * Initializes the Settings Dialog listener manager and manages callbacks.\n *\n * @param {HTMLElement} element Settings dialog element.\n * @param {function} onSubmitCallback Function to execute on submission.\n * @param {function} openInstructionsCallback Function to open settings dialog.\n * @returns {Object} Listener manager and methods to set callbacks.\n */\nexport const initializeListenerManager = (\n  element,\n  onSubmitCallback = null,\n  openInstructionsCallback = null\n) => {\n  if (!(element && element instanceof HTMLElement)) throw new Error(`Invalid Element: ${element}`);\n  const listenerManager = ListenerManager();\n  const {\n    p1TypeSelect,\n    p1UsernameInput,\n    p2TypeSelect,\n    p2UsernameInput,\n    p2DifficultySelect,\n    p1DifficultySelect,\n    p1AttackDelayInput,\n    p2AttackDelayInput,\n    rowsInput,\n    colsInput,\n    letterAxisInput,\n    instructionsButton,\n    submitButton,\n    cancelButton\n  } = getElements(element);\n  const callbacks = { onsubmit: onSubmitCallback, openInstructions: openInstructionsCallback };\n  const setOnSubmit = (callback) => (callbacks.onsubmit = callback);\n  const setOpenInstructions = (callback) => (callbacks.openInstructions = callback);\n  /**\n   * Provides color representation of selected difficulty.\n   */\n  const setColorCallback = (difficultySelect) => {\n    const value = difficultySelect.value;\n    const classList = difficultySelect.classList;\n    if (value === SELECTIONS.DIFFICULTY.OPTIONS[0].value) {\n      classList.add(SELECTIONS.DIFFICULTY.OPTIONS[0].id);\n      classList.remove(SELECTIONS.DIFFICULTY.OPTIONS[1].id);\n      classList.remove(SELECTIONS.DIFFICULTY.OPTIONS[2].id);\n    } else if (value === SELECTIONS.DIFFICULTY.OPTIONS[1].value) {\n      classList.remove(SELECTIONS.DIFFICULTY.OPTIONS[0].id);\n      classList.add(SELECTIONS.DIFFICULTY.OPTIONS[1].id);\n      classList.remove(SELECTIONS.DIFFICULTY.OPTIONS[2].id);\n    } else {\n      classList.remove(SELECTIONS.DIFFICULTY.OPTIONS[0].id);\n      classList.remove(SELECTIONS.DIFFICULTY.OPTIONS[1].id);\n      classList.add(SELECTIONS.DIFFICULTY.OPTIONS[2].id);\n    }\n  };\n  const p1SetColorCallback = () => setColorCallback(p1DifficultySelect);\n  const p2setColorCallback = () => setColorCallback(p2DifficultySelect);\n\n  /**\n   * Dynamically updates player information inputs based on selected type.\n   * If human removes difficulty and attack delay then adds username and vice versa.\n   */\n  const updateOnPlayerTypeChange = ({\n    typeSelect,\n    usernameInput,\n    difficultySelect,\n    attackDelayInput,\n    dynamicDifficultyKey\n  }) => {\n    const type = typeSelect.value;\n    if (type === SELECTIONS.PLAYER_TYPE.TYPES.HUMAN) {\n      usernameInput.classList.remove(GENERAL.CLASSES.HIDE);\n      attackDelayInput.parentElement.style.display = 'none';\n      difficultySelect.classList.add(GENERAL.CLASSES.HIDE);\n      listenerManager.disableListener(dynamicDifficultyKey);\n    } else {\n      usernameInput.classList.add(GENERAL.CLASSES.HIDE);\n      difficultySelect.classList.remove(GENERAL.CLASSES.HIDE);\n      attackDelayInput.parentElement.removeAttribute('style');\n      listenerManager.enableListener(dynamicDifficultyKey);\n    }\n  };\n  const p1UpdateOnTypeChange = () =>\n    updateOnPlayerTypeChange({\n      typeSelect: p1TypeSelect,\n      usernameInput: p1UsernameInput,\n      difficultySelect: p1DifficultySelect,\n      attackDelayInput: p1AttackDelayInput,\n      key: EVENT_CONTROLLER_KEYS.P1_DYNAMIC_DIFFICULTY\n    });\n  const p2UpdateOnTypeChange = () =>\n    updateOnPlayerTypeChange({\n      typeSelect: p2TypeSelect,\n      usernameInput: p2UsernameInput,\n      difficultySelect: p2DifficultySelect,\n      attackDelayInput: p2AttackDelayInput,\n      key: EVENT_CONTROLLER_KEYS.P2_DYNAMIC_DIFFICULTY\n    });\n  /**\n   * Ensures row input can not exceed the games set maximum.\n   */\n  const enforceRowMax = () => {\n    if (rowsInput.value > 26) rowsInput.value = 26;\n  };\n  /**\n   * Ensures column input can not exceed the games set maximum.\n   */\n  const enforceColMax = () => {\n    if (colsInput.value > 26) colsInput.value = 26;\n  };\n\n  /**\n   * Retrieves relevant player data based on selected type.\n   *\n   * @returns {Object} Object containing player specific data.\n   */\n  const getPlayerInfo = ({ typeSelect, difficultySelect, usernameInput, attackDelayInput }) => {\n    const type = typeSelect.value;\n    return type === SELECTIONS.PLAYER_TYPE.TYPES.COMPUTER\n      ? { type, difficulty: difficultySelect.value, attackDelay: attackDelayInput.value }\n      : { type, username: usernameInput.value };\n  };\n  const getP1Info = () =>\n    getPlayerInfo({\n      typeSelect: p1TypeSelect,\n      difficultySelect: p1DifficultySelect,\n      usernameInput: p1UsernameInput,\n      attackDelayInput: p1AttackDelayInput\n    });\n  const getP2Info = () =>\n    getPlayerInfo({\n      typeSelect: p2TypeSelect,\n      difficultySelect: p2DifficultySelect,\n      usernameInput: p2UsernameInput,\n      attackDelayInput: p2AttackDelayInput\n    });\n\n  /**\n   * Extracts and returns all settings data from dialog inputs.\n   *\n   * @returns {Object} Contains all setting configuration information\n   */\n  const getInputValues = () => ({\n    p1Settings: {\n      ...getP1Info(),\n      id: PLAYERS.IDS.P1\n    },\n    p2Settings: {\n      ...getP2Info(),\n      id: PLAYERS.IDS.P2\n    },\n    boardSettings: {\n      numberOfRows: rowsInput.value,\n      numberOfCols: colsInput.value,\n      letterAxis: letterAxisInput.value\n    }\n  });\n\n  /**\n   * Disables all listeners, closes the dialog, and removes the element.\n   */\n  const closeDialog = () => {\n    listenerManager.disableAllListeners();\n    element.close();\n    element.remove();\n  };\n\n  const preventEscape = (e) => {\n    if (e.key === KEY_EVENTS.CODES.ESC) e.preventDefault();\n  };\n\n  // displayInstructions\n  listenerManager.addController({\n    element: instructionsButton,\n    event: MOUSE_EVENTS.CLICK,\n    callback: () => {\n      if (callbacks.openInstructions) callbacks.openInstructions();\n    },\n    key: EVENT_CONTROLLER_KEYS.OPEN_INSTRUCTIONS\n  });\n\n  // prevent escape\n  listenerManager.addController({\n    element,\n    event: KEY_EVENTS.DOWN,\n    callback: preventEscape,\n    key: EVENT_CONTROLLER_KEYS.PREVENT_ESCAPE\n  });\n  // difficultySelect\n  listenerManager.addController({\n    element: p1DifficultySelect,\n    event: GENERAL_EVENTS.CHANGE,\n    callback: p1SetColorCallback,\n    key: EVENT_CONTROLLER_KEYS.P1_DYNAMIC_DIFFICULTY\n  });\n  listenerManager.addController({\n    element: p2DifficultySelect,\n    event: GENERAL_EVENTS.CHANGE,\n    callback: p2setColorCallback,\n    key: EVENT_CONTROLLER_KEYS.P2_DYNAMIC_DIFFICULTY\n  });\n  // rowRestriction\n  listenerManager.addController({\n    element: rowsInput,\n    event: GENERAL_EVENTS.CHANGE,\n    callback: enforceRowMax,\n    key: EVENT_CONTROLLER_KEYS.ROW_RESTRICTION\n  });\n  // colRestriction\n  listenerManager.addController({\n    element: colsInput,\n    event: GENERAL_EVENTS.CHANGE,\n    callback: enforceColMax,\n    key: EVENT_CONTROLLER_KEYS.COL_RESTRICTION\n  });\n  // updateOnPlayerTypeOnChange\n  listenerManager.addController({\n    element: p1TypeSelect,\n    event: GENERAL_EVENTS.CHANGE,\n    callback: p1UpdateOnTypeChange,\n    key: EVENT_CONTROLLER_KEYS.P1_UPDATE_ON_TYPE_CHANGE\n  });\n  listenerManager.addController({\n    element: p2TypeSelect,\n    event: GENERAL_EVENTS.CHANGE,\n    callback: p2UpdateOnTypeChange,\n    key: EVENT_CONTROLLER_KEYS.P2_UPDATE_ON_TYPE_CHANGE\n  });\n  // submit\n  listenerManager.addController({\n    element: submitButton,\n    event: MOUSE_EVENTS.CLICK,\n    callback: () => {\n      if (callbacks.onsubmit) {\n        const data = getInputValues();\n        callbacks.onsubmit(data);\n      }\n      closeDialog();\n    },\n    key: EVENT_CONTROLLER_KEYS.SUBMIT\n  });\n  // closeOnCancel\n  listenerManager.addController({\n    element: cancelButton,\n    event: MOUSE_EVENTS.CLICK,\n    callback: closeDialog,\n    key: EVENT_CONTROLLER_KEYS.CANCEL\n  });\n  p1SetColorCallback();\n  p2setColorCallback();\n  p1AttackDelayInput.parentElement.style.display = 'none';\n  return { listenerManager, setOnSubmit, setOpenInstructions };\n};\n","\n      import API from \"!../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../node_modules/css-loader/dist/cjs.js!./settings-styles.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../../node_modules/css-loader/dist/cjs.js!./settings-styles.css\";\n       export default content && content.locals ? content.locals : undefined;\n","import { SettingsDialogModel } from './SettingsDialogModel';\nimport { SettingsDialogView } from './view/SettingsDialogView';\n\n/**\n * Handles the submission of game settings, updates the model with new settings,\n * and triggers UI updates.\n *\n * @returns {Object} An interface to manage the settings dialog.\n */\nexport const SettingsDialogController = () => {\n  let handleOnSubmit = null;\n  const model = SettingsDialogModel();\n  const view = SettingsDialogView();\n  const onSubmit = (data) => {\n    const { p1Settings, p2Settings, boardSettings } = data;\n    model.updateSettings({ p1Settings, p2Settings, boardSettings });\n    view.showDisclaimer();\n    view.showCloseButton();\n    if (handleOnSubmit) handleOnSubmit(data);\n  };\n  view.setOnSubmit(onSubmit);\n  return {\n    getCurrentSettings: model.getSettings,\n    setContainer: view.setContainer,\n    display: view.display,\n    setOnSubmit: (callback) => (handleOnSubmit = callback),\n    setOpenInstructions: view.setOpenInstructions\n  };\n};\n","export const SettingsDialogModel = () => {\n  const p1 = { settings: null };\n  const p2 = { settings: null };\n  const board = { settings: null };\n  return {\n    getSettings: () => ({\n      p1Settings: p1.settings,\n      p2Settings: p2.settings,\n      boardSettings: board.settings\n    }),\n    updateSettings: ({ p1Settings, p2Settings, boardSettings }) => {\n      p1.settings = p1Settings;\n      p2.settings = p2Settings;\n      board.settings = boardSettings;\n    }\n  };\n};\n","import { buildSettingsDialogElement } from './buildSettingsDialogElement';\nimport { initializeListenerManager } from './initializeListenerManager';\nimport './settings-styles.css';\n\nexport const SettingsDialogView = () => {\n  const dialogElement = buildSettingsDialogElement();\n  const { listenerManager, setOnSubmit, setOpenInstructions } =\n    initializeListenerManager(dialogElement);\n  const disclaimer = dialogElement.querySelector('.settings-submit-disclaimer');\n  const closeBtn = dialogElement.querySelector('.settings-cancel-button');\n  let container = document.querySelector('body');\n  const setContainer = (newContainer) => {\n    if (!(newContainer && newContainer instanceof HTMLElement))\n      throw new Error(`Invalid Container: ${newContainer}`);\n    container = newContainer;\n  };\n  const display = (newContainer = null) => {\n    if (newContainer) setContainer(newContainer);\n    if (!container) throw new Error('Cannot display dialog without a container.');\n    container.append(dialogElement);\n    listenerManager.enableAllListeners();\n    dialogElement.showModal();\n  };\n\n  return {\n    setContainer,\n    display,\n    showDisclaimer: () => disclaimer.classList.remove('hide'),\n    showCloseButton: () => closeBtn.classList.remove('hide'),\n    setOnSubmit,\n    setOpenInstructions\n  };\n};\n","export const BASE_DIALOG_CLASSES = {\n  DIALOG: 'dialog',\n  TITLE: 'dialog-title',\n  HEADER_PRIMARY: 'dialog-header-primary',\n  HEADER_SECONDARY: 'dialog-header-secondary',\n  WHITE_UNDERLINE: 'white-underline',\n  GREEN_UNDERLINE: 'green-underline'\n};\n","import { BASE_CLASSES } from '../../../Utility/constants/dom/baseStyles';\nimport { STRUCTURAL_ELEMENTS } from '../../../Utility/constants/dom/elements';\nimport {\n  buildButtonObj,\n  buildElementFromUIObj,\n  buildParagraphObj,\n  buildSpanObj,\n  buildUIObj,\n  wrap\n} from '../../../Utility/uiBuilderUtils/uiBuilders';\nimport { BASE_DIALOG_CLASSES } from '../common/dialogClassConstants';\n\nexport const CONSTANTS = {\n  CLASSES: {\n    DIALOG: 'game-over-dialog',\n    HEADER: 'game-over-dialog-header',\n    HEADER_MESSAGE_WRAPPER: 'game-over-dialog-header-message-wrapper',\n    WINNER_NAME: 'game-winner-name',\n    WINNER_MESSAGE: 'winner-message',\n    BUTTON_CONTAINER: 'game-over-button-container',\n    PLAY_AGAIN_BUTTON: 'play-again-button',\n    CLOSE_BUTTON: 'close-this-dialog-button',\n    SETTINGS_BUTTON: 'game-over-settings-button'\n  },\n  TEXTS: {\n    WINNER: ` Wins!`,\n    PLAY_AGAIN_BUTTON: 'Play Again',\n    CLOSE_BUTTON: 'Close',\n    SETTINGS: 'Open Settings'\n  },\n  EVENTS: {\n    RESTART: 'gameRestarted'\n  }\n};\n\nconst buildHeaderObj = () =>\n  wrap(CONSTANTS.CLASSES.HEADER, [\n    wrap(CONSTANTS.CLASSES.HEADER_MESSAGE_WRAPPER, [\n      buildSpanObj('', `${CONSTANTS.CLASSES.WINNER_NAME} ${BASE_DIALOG_CLASSES.WHITE_UNDERLINE}`),\n      buildSpanObj('', CONSTANTS.CLASSES.WINNER_MESSAGE)\n    ]),\n    buildButtonObj(\n      CONSTANTS.TEXTS.CLOSE_BUTTON,\n      `${CONSTANTS.CLASSES.CLOSE_BUTTON} ${BASE_CLASSES.BUTTON}`\n    )\n  ]);\n\nconst buildButtonsObj = () =>\n  wrap(CONSTANTS.CLASSES.BUTTON_CONTAINER, [\n    buildButtonObj(\n      CONSTANTS.TEXTS.PLAY_AGAIN_BUTTON,\n      `${CONSTANTS.CLASSES.PLAY_AGAIN_BUTTON} ${BASE_CLASSES.BUTTON}`\n    ),\n\n    buildButtonObj(\n      CONSTANTS.TEXTS.SETTINGS,\n      `${CONSTANTS.CLASSES.SETTINGS_BUTTON} ${BASE_CLASSES.BUTTON}`\n    )\n  ]);\n\nexport const buildGameOverDialogElement = () => {\n  const dialogObj = buildUIObj(STRUCTURAL_ELEMENTS.DIALOG, {\n    attributes: { class: `${CONSTANTS.CLASSES.DIALOG} ${BASE_DIALOG_CLASSES.DIALOG}` },\n    children: [buildHeaderObj(), buildButtonsObj()]\n  });\n\n  const dialogElement = buildElementFromUIObj(dialogObj);\n\n  const closeButton = dialogElement.querySelector(`.${CONSTANTS.CLASSES.CLOSE_BUTTON}`);\n  const playAgainBtn = dialogElement.querySelector(`.${CONSTANTS.CLASSES.PLAY_AGAIN_BUTTON}`);\n  const openSettingsBtn = dialogElement.querySelector(`.${CONSTANTS.CLASSES.SETTINGS_BUTTON}`);\n  const winnerNameElement = dialogElement.querySelector(`.${CONSTANTS.CLASSES.WINNER_NAME}`);\n  const winnerMessageElement = dialogElement.querySelector(`.${CONSTANTS.CLASSES.WINNER_MESSAGE}`);\n\n  return {\n    dialogElement,\n    closeButton,\n    playAgainBtn,\n    openSettingsBtn,\n    winnerNameElement,\n    winnerMessageElement\n  };\n};\n","\n      import API from \"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../../node_modules/css-loader/dist/cjs.js!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../node_modules/css-loader/dist/cjs.js!./game-over-dialog-styles.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../../node_modules/css-loader/dist/cjs.js!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../node_modules/css-loader/dist/cjs.js!./game-over-dialog-styles.css\";\n       export default content && content.locals ? content.locals : undefined;\n","const INSTRUCTION_BUTTON_CLASS = (instruction) => `${instruction}-instruction-button`;\n\nconst INSTRUCTIONS_DIALOG = {\n  CLASS: `instructions-dialog dialog`,\n  HEADER: {\n    TEXT: 'INSTRUCTIONS',\n    CLASS: `dialog-title`,\n    WRAPPER_CLASS: 'instructions-header-wrapper'\n  },\n  CLOSE_BUTTON: {\n    TEXT: 'CLOSE',\n    CLASS: `instructions-close-button`\n  },\n  CONTENT_CONTAINER_CLASS: 'instructions-content-container'\n};\nconst INSTRUCTION_BUTTONS = {\n  CONTAINER_CLASS: 'instructions-button-container',\n  PLACEMENT: {\n    TEXT: 'Placement',\n    CLASS: INSTRUCTION_BUTTON_CLASS('placement')\n  },\n  COMBAT: {\n    TEXT: 'Combat',\n    CLASS: INSTRUCTION_BUTTON_CLASS('combat')\n  },\n  SETTINGS: {\n    TEXT: 'Settings',\n    CLASS: INSTRUCTION_BUTTON_CLASS('settings')\n  }\n};\n\nexport { INSTRUCTIONS_DIALOG, INSTRUCTION_BUTTONS };\n","import {\n  buildParagraphObj,\n  buildSpanObj,\n  wrap\n} from '../../../../Utility/uiBuilderUtils/uiBuilders';\nimport { BASE_DIALOG_CLASSES } from '../../common/dialogClassConstants';\n\nconst COMMON = {\n  primary: {\n    containerClass: 'instructions-content-container',\n    headerClass: `${BASE_DIALOG_CLASSES.HEADER_PRIMARY} ${BASE_DIALOG_CLASSES.GREEN_UNDERLINE}`\n  },\n  sections: {\n    containerClass: 'instructions-section-container',\n    headerClass: `${BASE_DIALOG_CLASSES.HEADER_SECONDARY} ${BASE_DIALOG_CLASSES.GREEN_UNDERLINE}`,\n    instructionListItemClass: 'instruction-list-item',\n    instructionTextClass: 'color-white'\n  }\n};\n/**\n * Manages the creation and assembly of instructions. Provides a flexible structure\n * allowing dynamic construction content based on configured templates.\n *\n * @returns {Object} Interface to manage instructions.\n */\nexport const InstructionsManager = () => {\n  const markers = {\n    bullet: '•',\n    numeric: (index) => `${index + 1}.`\n  };\n  const instructions = new Map();\n\n  const addInstruction = (instructionName, instructionHeaderText, sections) => {\n    instructions.set(instructionName, { instructionHeaderText, sections });\n  };\n\n  const buildListItemObj = (marker, text) => {\n    const paragraph = buildParagraphObj(marker, COMMON.sections.instructionListItemClass);\n    const textSpan = buildSpanObj(text, COMMON.sections.instructionTextClass);\n    paragraph.children = [textSpan];\n    return paragraph;\n  };\n\n  const buildSectionInstructions = (section) => {\n    const { sectionHeaderText, instructions: sectionInstructions, markerType } = section;\n    const instructionsHeader = buildParagraphObj(sectionHeaderText, COMMON.sections.headerClass);\n    const builtInstructions = sectionInstructions.map((instruction, index) => {\n      const marker = markerType === 'numeric' ? markers.numeric(index) : markers.bullet;\n      return buildListItemObj(marker, instruction);\n    });\n    return wrap(COMMON.sections.containerClass, [instructionsHeader, ...builtInstructions]);\n  };\n\n  const loadInstructionsConfig = (config) => {\n    const { instructionName, instructionHeaderText, sections } = config;\n    addInstruction(instructionName, instructionHeaderText, sections);\n  };\n\n  const buildInstruction = (instructionName) => {\n    const instructionConfig = instructions.get(instructionName);\n    if (!instructionConfig) {\n      console.error('Instruction name not found:', instructionName);\n      return null;\n    }\n    const { instructionHeaderText, sections } = instructionConfig;\n    const instructionElements = sections.map(buildSectionInstructions);\n    return wrap(COMMON.primary.containerClass, [\n      buildParagraphObj(instructionHeaderText, COMMON.primary.headerClass),\n      ...instructionElements\n    ]);\n  };\n\n  return {\n    loadInstructionsConfig,\n    buildInstruction\n  };\n};\n","export const placementInstructionsConfig = {\n  instructionName: 'placementInstructions',\n  instructionHeaderText: 'Placement Instructions',\n  sections: [\n    {\n      sectionName: 'selectAndPlace',\n      markerType: 'numeric',\n      sectionHeaderText: 'Selecting and Placing Ships',\n      instructions: [\n        'To select a ship, click on it in the \"Your Fleet\" list using the Left-Mouse Button.',\n        'Place the selected ship on your \"Home Territory\" grid by clicking the Left-Mouse Button (or tap on mobile) at the desired grid location.'\n      ]\n    },\n    {\n      sectionName: 'rotate',\n      markerType: 'bullet',\n      sectionHeaderText: 'Rotating Ships',\n      instructions: [\n        'To rotate a ship before placing it you can: click the \"Rotate Ship\" Button, press the Middle-Mouse Button, Space-Bar, or the R Key'\n      ]\n    },\n    {\n      sectionName: 'reposition',\n      markerType: 'bullet',\n      sectionHeaderText: 'Repositioning Ships',\n      instructions: [\n        `To reposition a ship that's already placed, click on it again in the \"Your Fleet\" list using the Left-Mouse Button and then place it in a new location on the grid.`\n      ]\n    },\n    {\n      sectionName: 'finalize',\n      markerType: 'numeric',\n      sectionHeaderText: 'Finalizing Placement',\n      instructions: [\n        'Once you have positioned all your ships, the \"Submit Placements\" button directly below the \"Your Fleet\" list will become active.',\n        'Click the \"Submit Placements\" button to confirm your ship placements and proceed.'\n      ]\n    }\n  ]\n};\n","export const combatInstructionsConfig = {\n  instructionName: 'combatInstructions',\n  instructionHeaderText: 'Combat Instructions',\n  sections: [\n    {\n      sectionName: 'gridAndCells',\n      markerType: 'bullet',\n      sectionHeaderText: 'Grids and Cells',\n      instructions: [\n        \"As you know from the placement stage, the Home Territory grid is where you place your ships. Your placed ships are displayed as gray cells containing the first letter of the placed ship's name.\",\n        'The Enemy Territory grid is where you send and track attacks.'\n      ]\n    },\n    {\n      sectionName: 'attacking',\n      markerType: 'bullet',\n      sectionHeaderText: 'Attacking',\n      instructions: [\n        'To send an attack on your turn, click on an unexplored cell in the \"Enemy Territory\" grid.',\n        'A light gray cell indicates a missed attack and a red cell indicates a hit.'\n      ]\n    },\n    {\n      sectionName: 'turnRotation',\n      markerType: 'bullet',\n      sectionHeaderText: 'Turns',\n      instructions: [\n        \"If you're playing vs the computer, then after you send an attack it will respond immediately and you can continue until the game ends.\",\n        'If you\\'re playing vs another human, after you send an attack you will be unable to send another attack. Instead you can click the \"End Turn\" button which will hide the screen to allow the next player to continue.'\n      ]\n    },\n    {\n      sectionName: 'gameEnd',\n      markerType: 'bullet',\n      sectionHeaderText: 'Game Over',\n      instructions: [\n        \"When all of a player's ships have been sunk, the game ends.\",\n        'The winner will be displayed and a new game can be started directly by pressing the \"Restart Game\" button. Or you can exit the dialog and adjust the settings to start a new game.'\n      ]\n    }\n  ]\n};\n","export const settingsInstructionsConfig = {\n  instructionName: 'settingsInstructions',\n  instructionHeaderText: 'Settings Instructions',\n  sections: [\n    {\n      sectionName: 'playerSettings',\n      markerType: 'bullet',\n      sectionHeaderText: 'Player',\n      instructions: [\n        'Type: Whether the player is a human or a computer AI.',\n        'Username: Human type players can enter their username. Those who do not enter a username will be labeled accordingly.',\n        'Difficulty: Computer type players have a difficulty option which dictates the level of intelligence and strategic capabilities. Easy -> Attacks randomly every turn with zero strategy. Medium -> Will follow up on hits until a ship is sunk. Hard -> Good luck.',\n        'Attack Delay (ms): The amount of time in milliseconds the AI will wait before sending an attack.'\n      ]\n    },\n    {\n      sectionName: 'boardSettings',\n      markerType: 'bullet',\n      sectionHeaderText: 'Board',\n      instructions: [\n        'Rows and Cols: The number of rows and/or columns to make the grid (Minimum = 10, Maximum = 26).',\n        'Letter Axis: The axis to use letter labels. Respectively, coordinates are displayed like so, Row -> \"A5\", Column -> \"5A\".'\n      ]\n    },\n    {\n      sectionName: 'buttons',\n      markerType: 'bullet',\n      sectionHeaderText: 'Buttons',\n      instructions: [\n        'Submit: Updates the game settings and starts a new  game.',\n        'Instructions: Opens the these instructions.',\n        'Cancel: Closes the dialog without making any changes.'\n      ]\n    }\n  ]\n};\n","import { ListenerManager } from '../../../../Utility/uiBuilderUtils/ListenerManager';\nimport { INSTRUCTIONS_DIALOG, INSTRUCTION_BUTTONS } from './constants';\nimport { buildInstructionsElements } from './buildInstructionsElements';\nimport { MOUSE_EVENTS } from '../../../../Utility/constants/dom/domEvents';\n\nconst getButtons = (element) => {\n  const closeButton = element.querySelector(`.${INSTRUCTIONS_DIALOG.CLOSE_BUTTON.CLASS}`);\n  const placementInstructionsButton = element.querySelector(\n    `.${INSTRUCTION_BUTTONS.PLACEMENT.CLASS}`\n  );\n  const combatInstructionsButton = element.querySelector(`.${INSTRUCTION_BUTTONS.COMBAT.CLASS}`);\n  const settingsInstructionsButton = element.querySelector(\n    `.${INSTRUCTION_BUTTONS.SETTINGS.CLASS}`\n  );\n  return {\n    close: closeButton,\n    placement: placementInstructionsButton,\n    combat: combatInstructionsButton,\n    settings: settingsInstructionsButton\n  };\n};\n\nconst EVENT_CONTROLLER_KEYS = {\n  CLOSE: 'close',\n  PLACEMENT: 'placement',\n  COMBAT: 'combat',\n  SETTINGS: 'settings'\n};\n\nexport const initializeListenerManager = (element) => {\n  const listenerManager = ListenerManager();\n  const instructions = buildInstructionsElements();\n  const buttons = getButtons(element);\n  const contentContainer = element.querySelector(`.${INSTRUCTIONS_DIALOG.CONTENT_CONTAINER_CLASS}`);\n  /**\n   * Disables all listeners, closes the dialog, and removes the element.\n   */\n  const closeDialog = () => {\n    listenerManager.disableAllListeners();\n    element.close();\n    element.remove();\n  };\n\n  const displayInstructions = (e) => {\n    let instructionKey = null;\n    if (e.target.classList.contains(INSTRUCTION_BUTTONS.PLACEMENT.CLASS))\n      instructionKey = 'placement';\n    else if (e.target.classList.contains(INSTRUCTION_BUTTONS.COMBAT.CLASS))\n      instructionKey = 'combat';\n    else if (e.target.classList.contains(INSTRUCTION_BUTTONS.SETTINGS.CLASS))\n      instructionKey = 'settings';\n    Object.values(buttons).forEach((button) => button.classList.remove('active'));\n    buttons[instructionKey]?.classList.add('active');\n    contentContainer.textContent = '';\n    const instruction = instructions[instructionKey];\n    if (instruction) contentContainer.append(instruction);\n  };\n\n  listenerManager.addController({\n    element: buttons.close,\n    event: MOUSE_EVENTS.CLICK,\n    callback: closeDialog,\n    key: EVENT_CONTROLLER_KEYS.CLOSE\n  });\n\n  [\n    { btn: buttons.placement, key: EVENT_CONTROLLER_KEYS.PLACEMENT },\n    { btn: buttons.combat, key: EVENT_CONTROLLER_KEYS.COMBAT },\n    { btn: buttons.settings, key: EVENT_CONTROLLER_KEYS.SETTINGS }\n  ].forEach(({ btn, key }) => {\n    listenerManager.addController({\n      element: btn,\n      event: MOUSE_EVENTS.CLICK,\n      callback: displayInstructions,\n      key\n    });\n  });\n\n  return listenerManager;\n};\n","import { buildElementFromUIObj } from '../../../../Utility/uiBuilderUtils/uiBuilders';\nimport { InstructionsManager } from './InstructionsManager';\nimport { placementInstructionsConfig } from '../configurations/placementInstructionsConfig';\nimport { combatInstructionsConfig } from '../configurations/combatInstructionsConfig';\nimport { settingsInstructionsConfig } from '../configurations/settingsInstructionsConfig';\nexport const buildInstructionsElements = () => {\n  const instructionsManager = InstructionsManager();\n  instructionsManager.loadInstructionsConfig(placementInstructionsConfig);\n  instructionsManager.loadInstructionsConfig(combatInstructionsConfig);\n  instructionsManager.loadInstructionsConfig(settingsInstructionsConfig);\n\n  return {\n    placement: buildElementFromUIObj(instructionsManager.buildInstruction('placementInstructions')),\n    combat: buildElementFromUIObj(instructionsManager.buildInstruction('combatInstructions')),\n    settings: buildElementFromUIObj(instructionsManager.buildInstruction('settingsInstructions'))\n  };\n};\n","import { SettingsDialogController } from './SettingsDialog/SettingsDialogController';\nimport { GameOverDialogView } from './GameOverDialog/GameOverDialogView';\nimport { AlternatePlayerDialogView } from './AlternatePlayersDialog/AlternatePlayerDialogView';\nimport { InstructionsDialogView } from './InstructionsDialog/InstructionsDialogView';\n\n/**\n * Centrally manages the dialogs within the application.\n */\nexport const dialogsManager = (() => {\n  const instructions = InstructionsDialogView();\n  const settings = SettingsDialogController();\n  const gameOver = GameOverDialogView();\n\n  settings.setOpenInstructions(instructions.display);\n  gameOver.setOpenSettings(settings.display);\n\n  const alternatePlayers = {\n    dialog: null,\n    get: () => {\n      if (!alternatePlayers.dialog) alternatePlayers.dialog = AlternatePlayerDialogView();\n      return alternatePlayers.dialog;\n    },\n    remove: () => (alternatePlayers.dialog = null)\n  };\n  document.querySelector('.settings-button').addEventListener('click', (e) => settings.display());\n  document\n    .querySelector('.instructions-button')\n    .addEventListener('click', (e) => instructions.display());\n  return {\n    settings,\n    gameOver,\n    alternatePlayers: {\n      getDialog: alternatePlayers.get,\n      removeDialog: alternatePlayers.remove\n    }\n  };\n})();\n","import { buildInstructionsDialogElement } from './utility/buildInstructionsDialogElement';\nimport { initializeListenerManager } from './utility/initializeListenerManager';\n\n/**\n * Manages the display and listeners of the Instructions Dialog.\n *\n * @returns {Object} Methods to set the container of and display the dialog.\n */\nexport const InstructionsDialogView = () => {\n  const dialogElement = buildInstructionsDialogElement();\n  const listenerManager = initializeListenerManager(dialogElement);\n\n  let container = document.querySelector('body');\n  const setContainer = (newContainer) => {\n    if (!(newContainer && newContainer instanceof HTMLElement))\n      throw new Error(`Invalid Container: ${newContainer}`);\n    container = newContainer;\n  };\n  const display = (newContainer = null) => {\n    if (newContainer) setContainer(newContainer);\n    if (!container) throw new Error('Cannot display dialog without a container.');\n    container.append(dialogElement);\n    listenerManager.enableAllListeners();\n    dialogElement.showModal();\n  };\n  return {\n    setContainer,\n    display\n  };\n};\n","import { COMMON_ELEMENTS, STRUCTURAL_ELEMENTS } from '../../../../Utility/constants/dom/elements';\nimport {\n  buildElementFromUIObj,\n  buildUIObj,\n  wrap,\n  buildParagraphObj,\n  buildButtonObj\n} from '../../../../Utility/uiBuilderUtils/uiBuilders';\nimport { INSTRUCTIONS_DIALOG, INSTRUCTION_BUTTONS } from './constants';\nimport { BASE_CLASSES } from '../../../../Utility/constants/dom/baseStyles';\n\nconst buildInstructionButtonsObj = () =>\n  wrap(INSTRUCTION_BUTTONS.CONTAINER_CLASS, [\n    buildButtonObj(\n      INSTRUCTION_BUTTONS.PLACEMENT.TEXT,\n      `${INSTRUCTION_BUTTONS.PLACEMENT.CLASS} ${BASE_CLASSES.BUTTON}`\n    ),\n    buildButtonObj(\n      INSTRUCTION_BUTTONS.COMBAT.TEXT,\n      `${INSTRUCTION_BUTTONS.COMBAT.CLASS} ${BASE_CLASSES.BUTTON}`\n    ),\n    buildButtonObj(\n      INSTRUCTION_BUTTONS.SETTINGS.TEXT,\n      `${INSTRUCTION_BUTTONS.SETTINGS.CLASS} ${BASE_CLASSES.BUTTON}`\n    )\n  ]);\nconst buildCloseButtonObj = () =>\n  buildButtonObj(\n    INSTRUCTIONS_DIALOG.CLOSE_BUTTON.TEXT,\n    `${INSTRUCTIONS_DIALOG.CLOSE_BUTTON.CLASS} ${BASE_CLASSES.BUTTON}`\n  );\n\nconst buildHeaderObj = () =>\n  wrap(INSTRUCTIONS_DIALOG.HEADER.WRAPPER_CLASS, [\n    buildParagraphObj(INSTRUCTIONS_DIALOG.HEADER.TEXT, INSTRUCTIONS_DIALOG.HEADER.CLASS),\n    buildCloseButtonObj()\n  ]);\n\nconst buildContentContainerObj = () =>\n  buildUIObj(COMMON_ELEMENTS.DIV, {\n    attributes: { class: INSTRUCTIONS_DIALOG.CONTENT_CONTAINER_CLASS }\n  });\n\nexport const buildInstructionsDialogElement = () => {\n  const dialogHeader = buildHeaderObj();\n  const instructionButtons = buildInstructionButtonsObj();\n  const contentContainer = buildContentContainerObj();\n  const uiObj = buildUIObj(STRUCTURAL_ELEMENTS.DIALOG, {\n    attributes: { class: INSTRUCTIONS_DIALOG.CLASS },\n    children: [dialogHeader, instructionButtons, contentContainer]\n  });\n\n  return buildElementFromUIObj(uiObj);\n};\n","import { MOUSE_EVENTS } from '../../../Utility/constants/dom/domEvents';\nimport { buildGameOverDialogElement } from './buildGameOverDialogElement';\nimport { ListenerManager } from '../../../Utility/uiBuilderUtils/ListenerManager';\nimport './game-over-dialog-styles.css';\n\n/**\n * Manages game over dialog display and interactions.\n *\n * @returns {Object} Methods for managing the dialog.\n */\nexport const GameOverDialogView = () => {\n  const {\n    dialogElement,\n    playAgainBtn,\n    closeButton,\n    openSettingsBtn,\n    winnerNameElement,\n    winnerMessageElement\n  } = buildGameOverDialogElement();\n\n  const listenerManager = ListenerManager();\n  let container = document.querySelector('body');\n  let winnerName = '';\n  let winnerMessage = ` Wins!`;\n\n  const callbacks = { playAgain: null, openSettings: null };\n  const setOnPlayAgain = (callback) => (callbacks.playAgain = callback);\n  const setOpenSettings = (callback) => (callbacks.openSettings = callback);\n\n  /**\n   * Sets the container to append dialog to.\n   */\n  const setContainer = (newContainer) => {\n    if (!(newContainer && newContainer instanceof HTMLElement))\n      throw new Error(`Invalid Container: ${newContainer}`);\n    container = newContainer;\n  };\n\n  const listenerKeys = {\n    PLAY_AGAIN: 'playAgain',\n    CLOSE: 'closeDialog',\n    OPEN_SETTINGS: 'openSettings'\n  };\n\n  /**\n   * Disables listeners and closes dialog.\n   */\n  const onClose = () => {\n    listenerManager.disableAllListeners();\n    dialogElement.close();\n  };\n\n  listenerManager.addController({\n    element: closeButton,\n    event: MOUSE_EVENTS.CLICK,\n    callback: onClose,\n    key: listenerKeys.CLOSE,\n    enable: true\n  });\n\n  listenerManager.addController({\n    element: playAgainBtn,\n    event: MOUSE_EVENTS.CLICK,\n    callback: () => {\n      if (callbacks.playAgain) callbacks.playAgain();\n      onClose();\n    },\n    key: listenerKeys.PLAY_AGAIN,\n    enable: true\n  });\n  listenerManager.addController({\n    element: openSettingsBtn,\n    event: MOUSE_EVENTS.CLICK,\n    callback: () => {\n      if (callbacks.openSettings) callbacks.openSettings();\n      onClose();\n    },\n    key: listenerKeys.OPEN_SETTINGS,\n    enable: true\n  });\n\n  /**\n   * Updates the winner name and message elements with provided text.\n   *\n   * @param {string} playerName Winner's name.\n   */\n  const setText = (playerName) => {\n    winnerNameElement.textContent = playerName;\n    winnerMessageElement.textContent = winnerMessage;\n  };\n\n  /**\n   * Displays the dialog, appending it to the current container and enabling its listeners.\n   */\n  const display = (playerName = winnerName, newContainer = null) => {\n    if (newContainer) setContainer(newContainer);\n    if (!container) throw new Error('Cannot display dialog without a container.');\n    container.append(dialogElement);\n    setText(playerName);\n    listenerManager.enableAllListeners();\n    dialogElement.showModal();\n  };\n  return {\n    setWinnerName: (newName) => (winnerName = newName),\n    setWinnerMessage: (message) => (winnerMessage = message),\n    setContainer,\n    setOnPlayAgain,\n    setOpenSettings,\n    display\n  };\n};\n","import { MOUSE_EVENTS } from '../../../Utility/constants/dom/domEvents';\nimport { buildAlternatePlayerDialogElement } from './buildAlternatePlayerDialogElement';\n\n/**\n * Manages the alternate player dialog's display and listeners.\n *\n * @returns {Object} Interface to manage the dialog.\n */\nexport const AlternatePlayerDialogView = () => {\n  const { dialogElement, proceedButtonElement, playerNameElement } =\n    buildAlternatePlayerDialogElement();\n\n  let displayName = null;\n\n  const closeDialog = () => {\n    proceedButtonElement.removeEventListener(MOUSE_EVENTS.CLICK, dialogElement.showModal);\n    dialogElement.close();\n    dialogElement.remove();\n  };\n\n  let container = document.querySelector('body');\n  const setContainer = (newContainer) => {\n    if (!(newContainer && newContainer instanceof HTMLElement))\n      throw new Error(`Invalid Container: ${newContainer}`);\n    container = newContainer;\n  };\n  const display = (playerName = displayName, newContainer = null) => {\n    if (newContainer) setContainer(newContainer);\n    if (!container) throw new Error('Cannot display dialog without a container.');\n    container.append(dialogElement);\n    playerNameElement.textContent = `${playerName}'s Turn`;\n    proceedButtonElement.addEventListener(MOUSE_EVENTS.CLICK, closeDialog);\n    dialogElement.showModal();\n  };\n  return {\n    setContainer,\n    setPlayerName: (name) => (displayName = name),\n    display\n  };\n};\n","import { BASE_CLASSES } from '../../../Utility/constants/dom/baseStyles';\nimport { STRUCTURAL_ELEMENTS } from '../../../Utility/constants/dom/elements';\n\nimport {\n  buildParagraphObj,\n  buildSpanObj,\n  buildButtonObj,\n  buildUIObj,\n  buildElementFromUIObj\n} from '../../../Utility/uiBuilderUtils/uiBuilders';\nimport { BASE_DIALOG_CLASSES } from '../common/dialogClassConstants';\n\nconst buildHeaderObj = () => {\n  const header = buildParagraphObj('', `${BASE_DIALOG_CLASSES.HEADER_PRIMARY}`);\n  const playerNameObj = buildSpanObj('', `next-player-name ${BASE_DIALOG_CLASSES.GREEN_UNDERLINE}`);\n  header.children = [playerNameObj];\n  return header;\n};\nconst buildProceedButtonObj = () =>\n  buildButtonObj('Proceed', `proceed-to-next-player-button ${BASE_CLASSES.BUTTON}`);\n\nexport const buildAlternatePlayerDialogElement = () => {\n  const headerObj = buildHeaderObj();\n  const proceedButtonObj = buildProceedButtonObj();\n  const dialogObj = buildUIObj(STRUCTURAL_ELEMENTS.DIALOG, {\n    attributes: { class: `alternate-player-dialog ${BASE_DIALOG_CLASSES.DIALOG}` },\n    children: [headerObj, proceedButtonObj]\n  });\n  const dialogElement = buildElementFromUIObj(dialogObj);\n  const playerNameElement = dialogElement.querySelector('.next-player-name');\n  const proceedButtonElement = dialogElement.querySelector('.proceed-to-next-player-button');\n  return {\n    dialogElement,\n    playerNameElement,\n    proceedButtonElement\n  };\n};\n","import { GameStateController } from './GameStateController';\nimport { GAME_MODES, STATES } from '../../Utility/constants/common';\nimport { StartStateCoordinator } from './States/StartStateCoordinator';\nimport { PlacementStateCoordinator } from './States/PlacementStateCoordinator';\nimport { CombatStateCoordinator } from './States/CombatStateCoordinator';\nimport { dialogsManager } from '../Dialogs/dialogsManager';\n\n/**\n * Coordinates game flow, transitioning between different states from start to end.\n */\nexport const GameCoordinator = (() => {\n  const { settings, gameOver, alternatePlayers } = dialogsManager;\n  const { getCurrentSettings } = settings;\n  const managers = {\n    turn: null,\n    player: null,\n    event: {\n      manager: null,\n      methods: null,\n      getters: {},\n      setManager: (eventManager) => {\n        if (managers.event.manager) managers.event.manager.reset();\n        managers.event.manager = eventManager;\n        managers.event.methods = eventManager.getEventMethods();\n        managers.event.getters.getGlobal = eventManager.getGlobal;\n        managers.event.getters.getScoped = eventManager.getScoped;\n        managers.event.getters.getBaseTypes = eventManager.getBaseTypes;\n      }\n    },\n    reset: () => {\n      managers.turn?.reset();\n      managers.player?.reset();\n      managers.event.manager?.reset();\n      managers.turn = null;\n      managers.player = null;\n      managers.event.manager = null;\n      managers.event.methods = null;\n      managers.event.getters = {};\n    }\n  };\n\n  const { startGame, onEnter, onExit, transitionTo } = GameStateController([\n    STATES.START,\n    STATES.PLACEMENT,\n    STATES.PROGRESS,\n    STATES.OVER\n  ]);\n\n  const stateManager = (() => {\n    const sendStartRequest = () => {\n      managers.reset();\n      startGame(STATES.START);\n    };\n    const start = (() => {\n      const enter = () => {\n        const coordinator = StartStateCoordinator(getCurrentSettings());\n        const { playerManager, eventManager, turnManager } = coordinator;\n        managers.player = playerManager;\n        managers.turn = turnManager;\n        managers.event.setManager(eventManager);\n        turnManager.autoAlternate.enable();\n        const { gameMode, ids, getOpponentName } = managers.player;\n        if (gameMode === GAME_MODES.HvH) {\n          const onTurnEndManagers = turnManager.allPlayers.onTurnEndManagers;\n          const dialog = alternatePlayers.getDialog();\n          ids.forEach((playerId) => {\n            const opponentName = getOpponentName(playerId);\n            const endTurnHandler = () => dialog.display(opponentName);\n            onTurnEndManagers[playerId].set(endTurnHandler);\n          });\n        }\n        transitionTo(STATES.PLACEMENT);\n      };\n      const exit = () => {};\n      return { enter, exit };\n    })();\n    const placement = (() => {\n      let coordinator = null;\n      const transition = () => transitionTo(STATES.PROGRESS);\n      const enter = () => {\n        if (coordinator) coordinator.reset();\n        const { endTurn: endCurrentPlayerTurn, getId: getCurrentPlayerId } =\n          managers.turn.currentPlayer;\n        const { ids: playerIds, getControllersOfType, controllerTypes } = managers.player;\n        const { methods: eventMethods, getters: eventGetters } = managers.event;\n        const placementControllers = getControllersOfType(controllerTypes.PLACEMENT);\n        coordinator = PlacementStateCoordinator({\n          endCurrentPlayerTurn,\n          getCurrentPlayerId,\n          playerIds,\n          placementControllers,\n          eventMethods,\n          eventGetters,\n          transition\n        });\n        coordinator.start();\n      };\n      const exit = () => {\n        coordinator.reset();\n        coordinator = null;\n      };\n      return { enter, exit };\n    })();\n\n    const combat = (() => {\n      let coordinator = null;\n      let overEvent = null;\n      const getWinnerName = (loserId) => {\n        const { ids, getPlayerName } = managers.player;\n        const winnerId = ids.find((playerId) => playerId !== loserId);\n        if (winnerId) return getPlayerName(winnerId);\n      };\n      const transition = ({ data }) => {\n        const { id } = data;\n        const winner = getWinnerName(id);\n        gameOver.setWinnerName(winner);\n        transitionTo(STATES.OVER);\n      };\n      const toggleOverListener = (enable = false) => {\n        if (!managers.event.methods) return;\n        const { on, off } = managers.event.methods;\n        if (enable) on(overEvent, transition);\n        else off(overEvent, transition);\n      };\n      const enter = () => {\n        if (coordinator) coordinator.reset();\n        const { methods: eventMethods, getters: eventGetters } = managers.event;\n        const { ids: playerIds, getControllersOfType, controllerTypes, gameMode } = managers.player;\n        const combatControllers = getControllersOfType(controllerTypes.COMBAT);\n        const { getAllPlayerEndTurnMethods, onTurnStartManagers } = managers.turn.allPlayers;\n        const endTurnMethods = getAllPlayerEndTurnMethods();\n        const currentPlayerId = managers.turn.currentPlayer.getId();\n        overEvent = eventGetters.getGlobal().PLAYER_LOST;\n        coordinator = CombatStateCoordinator({\n          eventMethods,\n          eventGetters,\n          combatControllers,\n          playerIds,\n          currentPlayerId,\n          endTurnMethods,\n          onTurnStartManagers,\n          overEvent,\n          gameMode\n        });\n        coordinator.start();\n        toggleOverListener(true);\n      };\n      const exit = () => {\n        coordinator.reset();\n        coordinator = null;\n        toggleOverListener(false);\n      };\n      return { enter, exit };\n    })();\n\n    const over = (() => {\n      const enter = () => {\n        gameOver.setOnPlayAgain(sendStartRequest);\n        gameOver.display();\n      };\n      return { enter };\n    })();\n    onEnter(STATES.START, start.enter);\n    onExit(STATES.START, start.exit);\n    onEnter(STATES.PLACEMENT, placement.enter);\n    onExit(STATES.PLACEMENT, placement.exit);\n    onEnter(STATES.PROGRESS, combat.enter);\n    onExit(STATES.PROGRESS, combat.exit);\n    onEnter(STATES.OVER, over.enter);\n    return { startGame: sendStartRequest };\n  })();\n\n  settings.setOnSubmit(stateManager.startGame);\n  settings.display();\n})();\n","/**\n * Orchestrates the game's placement state.\n *\n * @param {Object} detail Information and methods to execute placement state.\n * @returns {Object} Methods to start and reset the state.\n */\nexport const PlacementStateCoordinator = ({\n  endCurrentPlayerTurn,\n  getCurrentPlayerId,\n  playerIds,\n  placementControllers,\n  eventMethods,\n  eventGetters,\n  transition\n}) => {\n  const { on, off, emit } = eventMethods;\n  const { getBaseTypes, getScoped } = eventGetters;\n  let finalized = {};\n\n  const onFinalize = ({ data }) => {\n    finalized[data] = true;\n    endCurrentPlayerTurn();\n    if (playerIds.every((id) => finalized[id])) transition();\n    else start();\n  };\n\n  const setupFinalizePlacement = (id) => {\n    const { FINALIZE_PLACEMENT } = getScoped(id, getBaseTypes().PLACEMENT);\n    on(FINALIZE_PLACEMENT, onFinalize);\n    return () => {\n      emit(FINALIZE_PLACEMENT, id);\n      off(FINALIZE_PLACEMENT, onFinalize);\n    };\n  };\n\n  const start = () => {\n    const currentId = getCurrentPlayerId();\n    const finalizePlacement = setupFinalizePlacement(currentId);\n    placementControllers[currentId].start(finalizePlacement);\n  };\n\n  const reset = () => {\n    finalized = {};\n    Object.values(placementControllers).forEach((controller) => controller.end());\n  };\n\n  return {\n    start,\n    reset\n  };\n};\n","import { COMMON_ELEMENTS } from '../../../Utility/constants/dom/elements';\nimport { BASE_CLASSES } from '../../../Utility/constants/dom/baseStyles';\nimport { buildUIElement } from '../../../Utility/uiBuilderUtils/uiBuilders';\nimport { MOUSE_EVENTS } from '../../../Utility/constants/dom/domEvents';\nimport { CombatManager } from '../Managers/CombatManager';\nimport { GAME_MODES } from '../../../Utility/constants/common';\nconst EndTurnButtonManager = ({ sendEndTurn, enableOn, disableOn, eventMethods }) => {\n  const { on, off } = eventMethods;\n  const element = buildUIElement(COMMON_ELEMENTS.BUTTON, {\n    text: 'End Turn',\n    attributes: { class: `${BASE_CLASSES.BUTTON} end-turn-button`, disabled: '' }\n  });\n  const enable = () => {\n    element.disabled = false;\n    element.addEventListener(MOUSE_EVENTS.CLICK, sendEndTurn);\n  };\n  const disable = () => {\n    element.disabled = true;\n    element.removeEventListener(MOUSE_EVENTS.CLICK, sendEndTurn);\n  };\n  on(enableOn, enable);\n  on(disableOn, disable);\n  return {\n    element,\n    reset: () => {\n      off(enableOn, enable);\n      off(disableOn, disable);\n      disable();\n      element.remove();\n    }\n  };\n};\n\n/**\n * Orchestrates the game's combat state.\n * Integrates the and configures Combat Manager setting up the communication channel.\n *\n * @param {Object} detail Information and methods for executing combat state.\n * @returns\n */\nexport const CombatStateCoordinator = ({\n  eventMethods,\n  eventGetters,\n  combatControllers,\n  playerIds,\n  currentPlayerId,\n  endTurnMethods,\n  onTurnStartManagers,\n  overEvent,\n  gameMode\n}) => {\n  let combatManager = null;\n  const { getScoped, getBaseTypes } = eventGetters;\n  let endTurnButtons = {};\n\n  const getPlayerCombatEvents = (id) => getScoped(id, getBaseTypes().COMBAT);\n  const getPlayerCombatHandlers = (id) => combatControllers[id].getHandlers();\n  const getPlayerCombatData = (id) => ({\n    id,\n    handlers: getPlayerCombatHandlers(id),\n    combatEvents: getPlayerCombatEvents(id)\n  });\n  const loadManager = () => {\n    if (combatManager) return;\n    const [p1Id, p2Id] = playerIds;\n    combatManager = CombatManager({\n      p1CombatData: getPlayerCombatData(p1Id),\n      p2CombatData: getPlayerCombatData(p2Id),\n      eventMethods,\n      overEvent\n    });\n  };\n\n  const start = () => {\n    const controllersArray = Object.entries(combatControllers);\n    const initCombatControllers = () => {\n      controllersArray.forEach(([key, controller]) => {\n        controller.init();\n        onTurnStartManagers[key].set(controller.startTurn);\n      });\n    };\n    const provideMethodsToControllers = () => {\n      if (!combatManager) loadManager();\n      controllersArray.forEach(([key, controller]) => {\n        controller.start({ endTurnMethod: endTurnMethod(key), ...combatManager[key] });\n      });\n    };\n    let endTurnMethod = (id) => endTurnMethods[id];\n    if (gameMode === GAME_MODES.HvH) {\n      playerIds.forEach(\n        (id) =>\n          (endTurnButtons[id] = EndTurnButtonManager({\n            sendEndTurn: endTurnMethods[id],\n            enableOn: getPlayerCombatEvents(id).SEND_ATTACK,\n            disableOn: getScoped(id, getBaseTypes().TURN).START_TURN,\n            eventMethods\n          }))\n      );\n      endTurnMethod = (id) => endTurnButtons[id].element;\n    }\n    initCombatControllers();\n    provideMethodsToControllers(endTurnMethod);\n    combatControllers[currentPlayerId].startTurn();\n  };\n  const reset = () => {\n    combatManager.reset();\n    combatManager = null;\n\n    Object.values(combatControllers).forEach((controller) => controller.end());\n\n    const endTurnButtonsArray = Object.values(endTurnButtons);\n    if (endTurnButtonsArray.length > 0) endTurnButtonsArray.forEach((btn) => btn.reset());\n    endTurnButtons = {};\n  };\n  return { start, reset };\n};\n","/**\n * Sets up combat interactions between players by linking their event handlers to the corresponding\n * events of the opponent. This enables real-time combat event communication such as sending attacks\n * and receiving results. Scoped events ensure that messages are directed appropriately.\n *\n * @param {Object} playerEvents - Scoped events specific to this player for sending attacks and results.\n * @param {Object} opponentHandlers - Callbacks provided by the opponent to respond to received attacks and results.\n * @returns {Object} An interface with methods to initiate combat actions (sendAttack, sendResult, sendLost).\n */\nexport const CombatManager = ({ p1CombatData, p2CombatData, eventMethods, lostEvent }) => {\n  const { id: p1Id, handlers: p1Handlers, combatEvents: p1Events } = p1CombatData;\n  const { id: p2Id, handlers: p2Handlers, combatEvents: p2Events } = p2CombatData;\n  const { on, off, emit } = eventMethods;\n\n  /**\n   * Connects two players through the event system allowing combat event communications.\n   * Subscribes the opponents event-handlers to the players scoped events.\n   *\n   * @param {Object} playerEvents Scoped events for combat communication.\n   * @param {Object} opponentHandlers Contains opponent functions to handle events.\n   * @returns {Object} Methods to facilitate combat communications.\n   */\n  const setupPlayerCombat = (playerEvents, opponentHandlers) => {\n    const { SEND_ATTACK, SEND_RESULT } = playerEvents;\n    const { incomingAttackHandler, incomingResultHandler } = opponentHandlers;\n    on(SEND_ATTACK, incomingAttackHandler);\n    on(SEND_RESULT, incomingResultHandler);\n    return {\n      sendAttack: (coordinates) => emit(SEND_ATTACK, coordinates),\n      sendResult: (result) => emit(SEND_RESULT, result),\n      sendLost: (loserDetail) => emit(lostEvent, loserDetail)\n    };\n  };\n  /**\n   * Unsubscribes handlers from scoped combat events.\n   */\n  const dismantlePlayerCombat = (playerEvents, opponentHandlers) => {\n    const { SEND_ATTACK, SEND_RESULT } = playerEvents;\n    const { incomingAttackHandler, incomingResultHandler } = opponentHandlers;\n    off(SEND_ATTACK, incomingAttackHandler);\n    off(SEND_RESULT, incomingResultHandler);\n  };\n\n  const reset = () => {\n    dismantlePlayerCombat(p1Events, p2Handlers);\n    dismantlePlayerCombat(p2Events, p1Handlers);\n  };\n\n  return {\n    [p1Id]: setupPlayerCombat(p1Events, p2Handlers),\n    [p2Id]: setupPlayerCombat(p2Events, p1Handlers),\n    reset\n  };\n};\n"],"names":["___CSS_LOADER_EXPORT___","push","module","id","exports","cssWithMappingToString","list","toString","this","map","item","content","needLayer","concat","length","join","i","modules","media","dedupe","supports","layer","undefined","alreadyImportedModules","k","_k","cssMapping","btoa","base64","unescape","encodeURIComponent","JSON","stringify","data","sourceMapping","stylesInDOM","getIndexByIdentifier","identifier","result","modulesToDom","options","idCountMap","identifiers","base","count","indexByIdentifier","obj","css","sourceMap","references","updater","addElementStyle","byIndex","splice","api","domAPI","update","newObj","remove","lastIdentifiers","newList","index","newLastIdentifiers","_i","_index","memo","insert","style","target","styleTarget","document","querySelector","window","HTMLIFrameElement","contentDocument","head","e","getTarget","Error","appendChild","element","createElement","setAttributes","attributes","styleElement","nonce","setAttribute","insertStyleElement","styleTagTransform","apply","parentNode","removeChild","removeStyleElement","styleSheet","cssText","firstChild","createTextNode","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","prop","prototype","hasOwnProperty","call","nc","locals","FN_TYPES","PLAYERS","DEFAULT_FLEET","name","STATES","STATUSES","UP","RIGHT","DOWN","LEFT","ORIENTATIONS","VERTICAL","HORIZONTAL","GAME_MODES","AI_NAMES","convertIndexToLetter","String","fromCharCode","convertLetterToIndex","letter","charCodeAt","areCoordinatePairs","pairs","every","coordinates","Array","isArray","isCoordinatePair","coordinate","validateCoordinates","convertToInternalFormat","coordinatesString","letterPart","match","toUpperCase","numberPart","isNaN","convertToDisplayFormat","row","col","letterAxis","isLetterRow","c1","c2","normalizeOrientationString","orientationString","toLowerCase","trim","isDiagonal","coordinatesOne","coordinatesTwo","vector","deltaVector","getDelta","Math","abs","getAbsoluteDeltaVector","isSingleStepVector","testVector","sumCoordinates","getOrientationDirections","orientation","cleanOrientation","up","down","left","right","prev","next","forceSingleStep","toSingleStepVector","dx","dy","getPerpendicularCoordinates","origin","isAdjacent","popRandom","array","floor","random","buildElementTree","type","text","children","nameSpace","listeners","ns","createElementNS","value","entries","textContent","event","actions","forEach","action","addEventListener","child","console","error","STRUCTURAL_ELEMENTS","INTERACTIVE_ELEMENTS","COMMON_ELEMENTS","buildUIObj","namespace","buildElementFromUIObj","uiObj","buildUIElement","wrap","wrapperClass","uiObjs","additionalAttributes","class","buildParagraphObj","classAttr","buildButtonObj","buildSpanObj","spanClass","GENERAL_ATTRIBUTES","BOOL","SHIP_CLASSES","SHIP_DATA_ATTRIBUTES","SHIP_NAME","SHIP_SUNK","SHIP_LENGTH","SHIP_ORIENTATION","SHIP_PLACED","MAIN_FLEET","TRACKING_FLEET","GENERAL_EVENTS","MOUSE_EVENTS","KEY_EVENTS","createAttributeSelector","elementType","attribute","COMMON_GRID","CLASSES","WRAPPER","HEADER","CELL","ROW","LABELS","COL_CONTAINER","COL","LABEL_TYPES","LETTER","NUMERIC","CELL_SELECTOR","TRACKING_GRID","TYPE","PROPERTIES","CELL_ELEMENT","HEADER_TEXT","ATTRIBUTES","CELL_STATUS_DATA","CELL_STATUS_ACCESSOR","SELECTORS","buildGridHeaderObj","headerClass","headerText","getLabelTypes","generateLabels","axisLabelClass","from","_","wrapColLabels","labels","buildGridCellObj","buildGridRowObj","rowLabelObj","cellObjs","TrackingGridView","numberOfRows","numberOfCols","elements","buildAndSetElements","wrappedTrackingGridElement","headerObj","labelTypes","colLabelObjs","rowObjs","colLabelObj","buildTrackingGridCell","coordinateAttribute","trackingGridUIObj","buildTrackingGridUIObj","grid","cells","querySelectorAll","assign","attachTo","container","append","attachWithinWrapper","getCell","setCellStatus","cell","status","hide","display","show","removeAttribute","enable","dataset","isCellUnexplored","disabled","disable","getWrapper","getGrid","reset","AI_TRACKING_GRID","aiName","AIView","boardSettings","shipNames","trackingGrid","trackingGridView","trackingGridElement","classList","add","header","AITrackingGridView","displayResult","fleet","fleetView","fleetContainer","shipList","trackingFleetElement","shipListElement","shipViews","Map","getTrackingFleet","addShipView","shipID","shipView","set","setShipSunk","setSunk","populateFleetShipLists","getShipElement","AIFleetView","replace","trackingShipBaseObj","buildBaseShipUIObj","trackingShipElement","AIShipView","buildAIFleet","Queue","_head","_tail","_size","enqueue","node","_data","_next","nextNode","Node","dequeue","output","peekHead","slice","peekTail","isEmpty","size","copyToArray","currentNode","createGrid","rows","cols","fill","isWithinGrid","bounds","copyGrid","isAtEdge","getValueAt","getCellStatusAt","cellValue","getCellInADirection","direction","getCellsInAllDirections","cellsAround","keys","cellInDirection","getOpenMovesAround","filter","getTypeOfCellInADirection","start","cellsOfType","nextCell","IntermediateMoveStrategy","popRandomMove","popMove","lastHit","hitChain","priorityMoves","getRandomPriorityMove","move","getNextMove","movesAround","hitsFromChain","flatMap","hit","backTrack","processMoveResult","getLastHit","setLastHit","hasPriorityMoves","hasHitsInChain","_prev","prevNode","Dequeue","pushFront","pushBack","popFront","popBack","peekBeforeTail","Chain","startingOrientation","chain","afterHeadDirection","afterTailDirection","currentDirection","isAdjacentToTail","canExtendChain","inOrientation","isVertical","isHorizontal","doCoordinatesMatchOrientation","isAdjacentToHead","setDirections","initialDirection","addCoordinates","setFirstInChain","relativeOrientation","adjacent","getRelativeOrientation","initializeChain","updateChain","directions","orientationDirectionVectors","values","getOrientation","getCurrentDirection","getAfterHeadDirection","getAfterTailDirection","popTail","popHead","copyChainToArray","isInitialized","ProbabilityMap","initialGrid","gridHelpers","isHitResolved","getSmallestShipLength","validateFn","probabilityMap","smallestShipLength","calculateProbabilityScore","score","orientationScore","orientations","canFit","totalSpace","weightedCanShipFit","adjacentCells","cellStatus","unresolvedHitsScore","currentCell","currentCellStatus","getUnresolvedHitsScore","calculateAdjacencyScore","round","getCellWithHighestProbability","highestScore","highestScoringCells","rowIndex","colIndex","getHighestProbabilityFromMoves","moves","sort","b","getHitWithHighestSurroundingProbability","hits","hitsAndOpen","reduce","acc","openCell","updateState","shipSunk","assessCellProbabilities","initializeHelpers","fleetData","fleetManager","gameFleet","opponentFleetTracker","ship","lastShipSunk","opponentShipSunk","sunkShipID","sunkShipLength","delete","getLastSunkLength","getSmallestAliveOpponentShipLength","Number","MAX_SAFE_INTEGER","getLiveOpponentShipLengths","getNumberOfOpponentShipsLeft","areAllOpponentShipsSunk","clear","OpponentFleetManager","hitsManager","totalHits","totalSunk","unresolvedHits","Set","resolvedHits","hitKey","message","setToArray","split","resolveHit","test","has","resolveAllUnresolved","addUnresolvedHit","addHit","addSunk","getHits","getSunk","areHitsEqualToSunk","getResolvedHits","getUnresolvedHits","hasUnresolvedHits","HitsManager","inGrid","fn","args","inGridOfType","getOpenMovesInADirection","getConsecutiveHitsInADirection","initializeGridHelpers","validateMove","canShipFit","chainManager","currentChain","startNewChainAt","startNewEmptyChain","startNewChainFromUnresolved","handleUnresolvedChain","oppositeOrientation","tryLinearContinuation","afterTail","afterHead","getNextInChain","bestAroundHead","openAroundHead","tryAroundFirstInChain","resolvePartOfChain","numberOfHitsToResolve","getChainSize","getChainOrientation","pushToCurrentChain","getCurrentChainArray","resolveCurrentChain","resolveAllChains","ChainManager","initializeProcessMoveResult","initData","updateProbabilityMap","resultData","sunkLength","chainSize","AiCombatManager","model","view","attackDelay","properties","isAllShipsSunk","setTrackingGridCellStatus","baseProcessResult","displayCoordinates","getAttackStrategy","difficulty","processResult","send","endTurn","helpers","findBestMove","getRandomMove","nextInChain","determineMoveStrategy","AdvancedMoveStrategy","getData","attack","lost","incomingAttack","handleShipSunk","shipId","processResultFromGrid","getShip","isSunk","handleRequest","mainGrid","processIncomingAttack","outgoingAttack","processIncomingResult","setTimeout","init","strategy","onShipSunk","sendRequest","handleIncomingResultRequest","initializeCombat","sendAttack","sendResult","sendLost","endTurnMethod","initialize","getDifficulty","startTurn","getHandlers","incomingAttackHandler","incomingResultHandler","AIController","mainGridModel","isInBounds","placeShip","end","isPlacementValid","getMainGrid","AIMainGridModel","trackingGridModel","getTrackingGrid","AITrackingGridModel","fleetModel","aiFleet","isAllShipsPlaced","isPlaced","addMainShip","shipModel","getShipFromAIFleet","getAIFleetData","getTotalFleetLength","setShipPlacementCoordinates","placement","setPlacedCoordinates","AIFleetModel","shipLength","shipName","clean","cleanText","replaceAll","createSlug","placedCoordinates","health","isShip","getName","getHealth","AIShipModel","movesManager","availableMoves","getIndex","findIndex","initializeAvailableMoves","getRandom","getMove","getFrom","popFrom","getTotalAvailableMoves","getAvailableMoves","AvailableMovesManager","getType","isAI","place","getAllAvailable","getTotalAvailable","AIModel","board","provideTrackingGrid","provideTrackingFleet","handleFinalize","gridArray","getRandomOrientation","orientationChoices","getAllPlacementCells","startingCell","endingCoordinate","constant","getVerticalPlacementCells","getHorizontalPlacementCells","getRandomStartingCoordinates","occupyCells","calculateRandomShipPlacements","placements","attempts","x","y","getRandomShipPlacement","updateGrid","newGridArray","PlacementCoordinatesGenerator","combat","manager","getPlayerModel","ManagerFactory","ManagerBuilder","initialDetails","validateDetails","details","getManager","setDetails","newDetails","FleetPlacementManager","shipPlacementManagers","createHandler","selected","select","handler","rotateButton","getRotateButton","emitData","emit","execute","allShipsPlaced","emitFalse","isSelected","deselect","on","callback","off","emitTrue","onSelected","onOrientationToggled","offOrientationToggled","offSelected","onAllShipsPlaced","offAllShipsPlaced","FleetCombatManager","shipCombatManagers","shipHit","onHit","offHit","allShipsSunk","check","onSunk","offSunk","onShipHit","offShipHit","offShipSunk","onAllShipsSunk","offAllShipsSunk","EventEmitter","subscribers","hasEventSubscription","subscribe","unsubscribe","subscriber","subscribeMany","subscriptions","unsubscribeMany","publish","incomingData","eventData","EventHandler","emitter","eventName","preEmitCallback","validateCallback","at","callbacks","includes","setPreEmitCallback","newCallback","payload","FleetController","fleetShipControllers","mainFleet","trackingFleet","addTrackingShip","getFleet","getShipFromMainFleet","FleetModel","mainFleetElement","mainFleetContainer","trackingFleetContainer","mainFleetHeader","trackingFleetHeader","mainShipList","trackingShipList","buildFleetUIObj","mainFleetShipList","trackingFleetShipList","attachMainFleetTo","attachTrackingFleetTo","getMainShip","getTrackingShip","getRotateShipButton","getMainFleet","FleetView","shipControllers","addShipPlacementManager","setManager","PlacementManagerFactory","getPlacementManager","addShipCombatManager","setManger","CombatManagerFactory","getCombatManager","assignShipToFleet","shipController","getModel","getView","BASE_CLASSES","ListenerManager","activeControllers","inactiveControllers","updateControllers","controller","isActive","getKey","addController","parameters","HTMLElement","validateControllerParameters","tagName","removeEventListener","createEventController","enableListener","enabledListener","disableListener","disabledListener","enableAllListeners","disableAllListeners","removeListener","LISTENER_MANAGER_KEYS","ShipSelectionAndPlacementManager","selectionController","isEnabled","selectionView","mainShipElement","rotateButtonElement","listenerManager","enableSelect","disableSelect","enableOrientationToggle","disableOrientationToggle","requestSelectionCallback","toggleOrientationCallback","initializeSelection","orientationToggle","all","newOrientation","selectedStatus","toggle","ShipSelectionView","toggleOrientation","code","button","contains","PointerEvent","isRotateRequest","preventDefault","requestOrientationToggleCallback","setIsSelected","ShipSelectionController","placementController","setIsPlaced","placed","pickup","clearPlacedCoordinates","ShipPlacementController","request","onPlaced","offPlaced","ShipCombatManager","sink","ShipController","shipData","getPlacedCoordinates","ShipModel","interactiveShipBaseObj","interactiveShipExtendedObj","baseObj","extendBaseForInteractivity","buildShipUIObj","ShipView","placementManager","SelectionAndPlacementManagerFactory","combatManager","getMainShipElement","getTrackingShipElement","MAIN_GRID","HIT_MARKER","VALID_PLACEMENT","INVALID_PLACEMENT","PLACED_ENTITY","CELL_COORDINATES_DATA","PLACED_ENTITY_NAME","INVALID_PLACEMENT_SELECTOR","VALID_PLACEMENT_SELECTOR","PLACED_ENTITY_SELECTOR","PreviewManager","gridElement","maxVertical","maxHorizontal","currentTarget","currentShip","clearPlacementPreview","processPreview","targetCoordinates","isAtopAnotherShip","displayPlacementPreview","startingCoordinates","startMax","max","startCoordinate","min","getStartEnd","calculateCells","handleMouseOver","targetCell","closest","updateOrientation","setCurrentEntity","initializeGrid","MainGridPlacementView","mainGridElement","submitPlacementsButtonElement","previewConfig","previewManager","enableSubmitPlacements","disableSubmitPlacements","enableRequestPlacements","disableRequestPlacements","submitPlacementsCallback","requestPlacementCallback","processPlacementRequest","placementCells","charAt","displayPlacedEntity","placementRequest","submitPlacements","preview","selectedEntity","entityID","entityCells","getEntityPlacementCells","clearPlacedEntity","submitPlacementsButtonContainer","MainGridPlacementManager","selectedEntityID","getMaxVertical","getMaxHorizontal","getLetterAxis","placementView","getSubmitPlacementsButton","handleRequestCallback","requestPlacement","toggleSubmission","isReady","updateSelectedEntity","isEntityPlaced","removePlacedEntity","MainGridPlacementController","submit","toggleSubmit","onPlace","offPlace","onSubmit","offSubmit","MainGridCombatManager","process","displayShipHit","onIncomingAttackProcessed","offIncomingAttackProcessed","MainGridController","boardConfig","valueAt","entityPlacementManager","placedEntityCoordinates","getPlacedEntityMap","placeEntity","entityPlacementCoordinates","EntityPlacementManager","getEntityPlacements","getDimensions","width","height","MainGridModel","wrappedMainGridElement","buildMainGridCell","mainGridUIObj","submitPlacementsButtonUIObj","buildMainGridUIObj","MainGridView","getSubmitButton","TrackingGridCombatManager","combatView","lastCell","onAttackCallback","getTargetCoordinates","TrackingGridCombatView","acceptResult","onResultProcessed","offResultProcessed","onSendAttack","offSendAttack","TrackingGridController","initializePlayer","playerSettings","player","controllers","aiController","username","playerName","playerType","playerId","validateName","isPlayer","getId","setName","setType","PlayerModel","initializePlayerControllers","BoardPlacementManager","placementManagers","endPlacement","isFinalizeRequest","startPlacement","onFinalize","updateRotateButton","removeRotateButton","placementData","initializePlacement","BOARD_CLASSES","buildUtilityContainer","finalClass","BoardController","gameMode","displayContainer","views","mainGridButtonManager","boardContainer","build","buildBoardContainer","playerNameDisplay","buildPlayerNameDisplay","mainGridUtilityContainer","mainGridButtonContainer","buildButtonContainer","trackingGridUtilityContainer","wrappers","buildButtonWrapper","addWrapper","wrapper","removeButton","updateButton","newButton","addButton","removeWrapper","ButtonContainerManager","buttonManager","BoardPlacementView","endTurnBtn","setEndTurnButton","btnElement","opponentFleet","aiGrid","prepend","BoardView","loadManager","combatManagers","onLost","lastSunk","updateLastSunk","triggerAllShipsSunk","BoardCombatManager","startCombat","endCombat","gameContainer","setUpAvADisplay","p1","p2","existingDisplay","aiOneContainer","aiTwoContainer","EventManager","eventsConfig","global","scopes","subscriptionTracker","events","initialScopes","scoped","baseTypes","setBaseEvents","newEvents","typeKey","buildScopedEvents","createKey","scope","scopeEvents","eventObj","scopedObj","addScope","removeScope","s","setGlobalEvents","getGlobalEvents","getBaseEvents","getScopedEvents","getBaseTypes","EventDefinitionManager","removeAllSubscriptions","offAll","StartStateCoordinator","settings","p1Settings","p2Settings","p1Type","p2Type","initPlayers","p1Id","p2Id","p1BoardController","p2BoardController","boardController","initializeBoardView","configureBoardControllers","playerManager","config","ids","controllerTypes","names","resetControllers","getPlayerName","getControllersOfType","fromEntries","getOpponentName","opponentId","find","storedId","PlayerManager","PLACEMENT","COMBAT","eventManager","getScoped","eventType","scopedEvents","getGlobal","START_OVER","PLACEMENT_OVER","PROGRESS_OVER","turn","START_TURN","END_TURN","FINALIZE_PLACEMENT","SEND_ATTACK","SEND_RESULT","SEND_SHIP_SUNK","getEventMethods","turnManager","turnEvents","TURN","p1StartTurn","p1EndTurn","p2StartTurn","p2EndTurn","getEvent","START","END","players","current","waiting","startCurrentPlayerTurn","alternate","autoAlternate","OnTurnStartManager","onStart","getStartEvent","onTurnStartManagers","OnTurnEndManager","onEnd","getEndEvent","onTurnEndManagers","currentPlayer","allPlayers","getAllPlayerEndTurnMethods","TurnManager","GameTurnManager","GENERAL","HIDE","HEADER_WRAPPER","DIALOG_TITLE","DIALOG","PLAYER_SETTINGS","INPUT_FIELDS","ELEMENT","CLASS","PLACEHOLDER","ID","OPTION_ELEMENT","INPUT_FIELD_CLASS","MIN","DEFAULT_VALUE","LABEL","ATTACK_DELAY_INPUT","TEXTS","ATTACK_DELAY","MAX","ROWS_ID","COLS_ID","COLS_INPUT","ROWS_INPUT","COLS_INPUT_WRAPPER","COLS_INPUT_LABEL","ROWS_INPUT_WRAPPER","ROWS_INPUT_LABEL","ROWS","COLS","SELECTIONS","DIFFICULTY","OPTIONS","PLAYER_TYPE","TYPES","HUMAN","COMPUTER","PLAYER_TYPE_CLASS","LETTER_AXIS","BOARD_SETTINGS","BUTTONS","TEXT","buildLabelObj","buildSelectInputObj","label","optionsObjs","option","buildOptionObj","buildDifficultySelectInputObj","buildTextUsernameInputObj","placeholder","buildPlayerTypeSelectInputObj","humanOption","computerOption","buildDimensionInputObj","labelText","labelClass","for","buildAttackDelayInputObj","EVENT_CONTROLLER_KEYS","SettingsDialogController","handleOnSubmit","getSettings","updateSettings","SettingsDialogModel","dialogElement","playerInfoInputs","buttons","buildSettingsDialogElement","setOnSubmit","setOpenInstructions","onSubmitCallback","openInstructionsCallback","p1TypeSelect","p1UsernameInput","p2TypeSelect","p2UsernameInput","p2DifficultySelect","p1DifficultySelect","p1AttackDelayInput","p2AttackDelayInput","rowsInput","colsInput","letterAxisInput","instructionsButton","submitButton","cancelButton","getElements","onsubmit","openInstructions","setColorCallback","difficultySelect","p1SetColorCallback","p2setColorCallback","updateOnPlayerTypeChange","typeSelect","usernameInput","attackDelayInput","dynamicDifficultyKey","parentElement","getPlayerInfo","closeDialog","close","initializeListenerManager","disclaimer","closeBtn","setContainer","newContainer","showModal","showDisclaimer","showCloseButton","SettingsDialogView","getCurrentSettings","BASE_DIALOG_CLASSES","CONSTANTS","INSTRUCTION_BUTTON_CLASS","instruction","INSTRUCTIONS_DIALOG","WRAPPER_CLASS","INSTRUCTION_BUTTONS","CONTAINER_CLASS","SETTINGS","COMMON","primary","containerClass","sections","instructionListItemClass","instructionTextClass","placementInstructionsConfig","instructionName","instructionHeaderText","sectionName","markerType","sectionHeaderText","instructions","combatInstructionsConfig","settingsInstructionsConfig","CLOSE","instructionsManager","buildSectionInstructions","section","sectionInstructions","instructionsHeader","builtInstructions","marker","paragraph","textSpan","buildListItemObj","markers","loadInstructionsConfig","addInstruction","buildInstruction","instructionConfig","instructionElements","InstructionsManager","buildInstructionsElements","getButtons","contentContainer","displayInstructions","instructionKey","btn","dialogsManager","dialogHeader","instructionButtons","buildInstructionsDialogElement","InstructionsDialogView","gameOver","playAgainBtn","closeButton","openSettingsBtn","winnerNameElement","winnerMessageElement","dialogObj","buildGameOverDialogElement","winnerName","winnerMessage","playAgain","openSettings","onClose","setWinnerName","newName","setWinnerMessage","setOnPlayAgain","setOpenSettings","setText","GameOverDialogView","alternatePlayers","dialog","proceedButtonElement","playerNameElement","playerNameObj","proceedButtonObj","buildAlternatePlayerDialogElement","displayName","setPlayerName","AlternatePlayerDialogView","getDialog","removeDialog","managers","methods","getters","startGame","onEnter","onExit","transitionTo","initialStates","states","addState","stateName","setCurrentState","state","executeCurrentEnter","executeCurrentExit","firstState","newState","exitCurrent","GameStateController","stateManager","sendStartRequest","coordinator","opponentName","transition","enter","endCurrentPlayerTurn","getCurrentPlayerId","playerIds","eventMethods","eventGetters","placementControllers","finalized","currentId","finalizePlacement","setupFinalizePlacement","PlacementStateCoordinator","exit","overEvent","winner","loserId","winnerId","getWinnerName","toggleOverListener","combatControllers","endTurnMethods","currentPlayerId","PLAYER_LOST","endTurnButtons","getPlayerCombatEvents","getPlayerCombatHandlers","getPlayerCombatData","handlers","combatEvents","controllersArray","sendEndTurn","enableOn","disableOn","EndTurnButtonManager","p1CombatData","p2CombatData","lostEvent","p1Handlers","p1Events","p2Handlers","p2Events","setupPlayerCombat","playerEvents","opponentHandlers","loserDetail","dismantlePlayerCombat","CombatManager","endTurnButtonsArray","CombatStateCoordinator","over"],"sourceRoot":""}